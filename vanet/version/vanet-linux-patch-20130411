diff -urN linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-1588.dts linux/arch/powerpc/boot/dts/mpc8315erdb-1588.dts
--- linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-1588.dts	1970-01-01 07:00:00.000000000 +0700
+++ linux/arch/powerpc/boot/dts/mpc8315erdb-1588.dts	2013-04-11 14:00:45.042584200 +0800
@@ -0,0 +1,464 @@
+/dts-v1/;
+
+/ {
+	compatible = "fsl,mpc8315erdb";
+	#address-cells = <0x1>;
+	#size-cells = <0x1>;
+
+	aliases {
+		ethernet0 = "/immr@e0000000/ethernet@24000";
+		ethernet1 = "/immr@e0000000/ethernet@25000";
+		serial0 = "/immr@e0000000/serial@4500";
+		serial1 = "/immr@e0000000/serial@4600";
+		pci0 = "/pci@e0008500";
+		pcie0 = "/pci@e0009000";
+		pcie1 = "/pci@e000a000";
+	};
+
+	cpus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+
+		PowerPC,8315@0 {
+			device_type = "cpu";
+			reg = <0x0>;
+			d-cache-line-size = <0x20>;
+			i-cache-line-size = <0x20>;
+			d-cache-size = <0x4000>;
+			i-cache-size = <0x4000>;
+			timebase-frequency = <0x0>;
+			bus-frequency = <0x0>;
+			clock-frequency = <0x0>;
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x8000000>;
+	};
+
+	localbus@e0005000 {
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		compatible = "fsl,mpc8315-elbc", "fsl,elbc", "simple-bus";
+		reg = <0xe0005000 0x1000>;
+		interrupts = <0x4d 0x8>;
+		interrupt-parent = <0x1>;
+		ranges = <0x0 0x0 0xfe000000 0x800000 0x1 0x0 0xe0600000 0x2000 0x2 0x0 0xf0000000 0x20000 0x3 0x0 0xfa000000 0x8000>;
+
+		flash@0,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x800000>;
+			bank-width = <0x2>;
+			device-width = <0x1>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+			};
+
+			fs@100000 {
+				reg = <0x100000 0x400000>;
+			};
+
+			kernel@500000 {
+				reg = <0x500000 0x200000>;
+			};
+
+			dtb@700000 {
+				reg = <0x700000 0x100000>;
+			};
+		};
+
+		nand@1,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-fcm-nand", "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x2000>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+				label = "U-Boot-NAND";
+			};
+
+			jffs2@100000 {
+				reg = <0x100000 0x800000>;
+				label = "JFFS2-NAND";
+			};
+
+			ramdisk@900000 {
+				reg = <0x900000 0x400000>;
+				label = "Ramdisk-NAND";
+			};
+
+			reserved@d00000 {
+				reg = <0xd00000 0x1000000>;
+				label = "Reserved-NAND";
+			};
+
+			kernel@1d00000 {
+				reg = <0x1d00000 0x200000>;
+				read-only;
+				label = "Kernel-NAND";
+			};
+
+			dtb@1f00000 {
+				reg = <0x1f00000 0x100000>;
+				read-only;
+				label = "DTB-NAND";
+			};
+		};
+	};
+
+	immr@e0000000 {
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+		device_type = "soc";
+		compatible = "fsl,mpc8315-immr", "simple-bus";
+		ranges = <0x0 0xe0000000 0x100000>;
+		reg = <0xe0000000 0x200>;
+		bus-frequency = <0x0>;
+
+		wdt@200 {
+			device_type = "watchdog";
+			compatible = "mpc83xx_wdt";
+			reg = <0x200 0x100>;
+		};
+
+		i2c@3000 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			cell-index = <0x0>;
+			compatible = "fsl-i2c";
+			reg = <0x3000 0x100>;
+			interrupts = <0xe 0x8>;
+			interrupt-parent = <0x1>;
+			dfsrr;
+
+			rtc@68 {
+				compatible = "dallas,ds1339";
+				reg = <0x68>;
+			};
+
+			mcu@a {
+				#gpio-cells = <0x2>;
+				compatible = "fsl,mc9s08qg8-mpc8315erdb", "fsl,mcu-mpc8349emitx";
+				reg = <0xa>;
+				gpio-controller;
+			};
+		};
+
+		spi@7000 {
+			cell-index = <0x0>;
+			compatible = "fsl,spi";
+			reg = <0x7000 0x1000>;
+			interrupts = <0x10 0x8>;
+			interrupt-parent = <0x1>;
+			mode = "cpu";
+		};
+
+		dma@82a8 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-dma", "fsl,elo-dma";
+			reg = <0x82a8 0x4>;
+			ranges = <0x0 0x8100 0x1a8>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x47 0x8>;
+			cell-index = <0x0>;
+
+			dma-channel@0 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0x0>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@80 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <0x1>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@100 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <0x2>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@180 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x180 0x28>;
+				cell-index = <0x3>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+		};
+
+		usb@23000 {
+			compatible = "fsl-usb2-dr";
+			reg = <0x23000 0x1000>;
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x26 0x8>;
+			phy_type = "utmi";
+			sleep = <0x2 0xc00000>;
+		};
+
+		mdio@24520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-mdio";
+			reg = <0x24520 0x20>;
+
+			ethernet-phy@0 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x14 0x8>;
+				reg = <0x0>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x4>;
+			};
+
+			ethernet-phy@1 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x13 0x8>;
+				reg = <0x1>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x7>;
+			};
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x3>;
+			};
+		};
+
+		mdio@25520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-tbi";
+			reg = <0x25520 0x20>;
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x6>;
+			};
+		};
+
+		ptimer@24e00 {
+			compatible = "fsl,gianfar-ptp-timer";
+			reg = <0x24e00 0xb0>;
+			linux,phandle = <0x5>;
+		};
+
+		ethernet@24000 {
+			cell-index = <0x0>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x24000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x20 0x8 0x21 0x8 0x22 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x3>;
+			phy-handle = <0x4>;
+			sleep = <0x2 0xc0000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+			ptimer-handle = <0x5>;
+		};
+
+		ethernet@25000 {
+			cell-index = <0x1>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x25000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x23 0x8 0x24 0x8 0x25 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x6>;
+			phy-handle = <0x7>;
+			sleep = <0x2 0x30000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+			ptimer-handle = <0x5>;
+		};
+
+		serial@4500 {
+			cell-index = <0x0>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4500 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0x9 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		serial@4600 {
+			cell-index = <0x1>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4600 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0xa 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		crypto@30000 {
+			compatible = "fsl,sec3.3", "fsl,sec3.1", "fsl,sec3.0", "fsl,sec2.4", "fsl,sec2.2", "fsl,sec2.1", "fsl,sec2.0";
+			reg = <0x30000 0x10000>;
+			interrupts = <0xb 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,num-channels = <0x4>;
+			fsl,channel-fifo-len = <0x18>;
+			fsl,exec-units-mask = <0x97c>;
+			fsl,descriptor-types-mask = <0x3ab0abf>;
+		};
+
+		sata@18000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x18000 0x1000>;
+			cell-index = <0x1>;
+			interrupts = <0x2c 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		sata@19000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x19000 0x1000>;
+			cell-index = <0x2>;
+			interrupts = <0x2d 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		tdm@16000 {
+			device_type = "tdm";
+			compatible = "fsl,mpc8315-tdm";
+			reg = <0x16000 0x200 0x2c000 0x2000>;
+			clock-frequency = <0x0>;
+			interrupts = <0x53 0x8 0x5e 0x8 0x3 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		legerity {
+			device_type = "slic";
+			compatible = "legerity-slic";
+			clock-frequency = <0x0>;
+			interrupts = <0x16 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		gpio@c00 {
+			device_type = "gpio";
+			compatible = "fsl,mpc8315-gpio";
+			reg = <0xc00 0x18>;
+			interrupt-parent = <0x1>;
+		};
+
+		interrupt-controller@700 {
+			compatible = "fsl,ipic";
+			interrupt-controller;
+			#address-cells = <0x0>;
+			#interrupt-cells = <0x2>;
+			reg = <0x700 0x100>;
+			device_type = "ipic";
+			linux,phandle = <0x1>;
+		};
+
+		ipic-msi@7c0 {
+			compatible = "fsl,ipic-msi";
+			reg = <0x7c0 0x40>;
+			msi-available-ranges = <0x0 0x100>;
+			interrupts = <0x43 0x8 0x4 0x8 0x51 0x8 0x52 0x8 0x56 0x8 0x57 0x8 0x58 0x8 0x59 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		power@b00 {
+			compatible = "fsl,mpc8313-pmc", "fsl,mpc8349-pmc";
+			reg = <0xb00 0x100 0xa00 0x100>;
+			interrupts = <0x50 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,mpc8313-wakeup-timer = <0x8>;
+			linux,phandle = <0x2>;
+		};
+
+		timer@500 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x500 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5a 0x8 0x4e 0x8 0x54 0x8 0x48 0x8>;
+			interrupt-parent = <0x1>;
+			linux,phandle = <0x8>;
+		};
+
+		timer@600 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x600 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5b 0x8 0x4f 0x8 0x55 0x8 0x49 0x8>;
+			interrupt-parent = <0x1>;
+		};
+	};
+
+	pci@e0008500 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		interrupt-map = <0x7000 0x0 0x0 0x1 0x1 0x12 0x8 0x7000 0x0 0x0 0x2 0x1 0x12 0x8 0x7000 0x0 0x0 0x3 0x1 0x12 0x8 0x7000 0x0 0x0 0x4 0x1 0x12 0x8 0x7800 0x0 0x0 0x1 0x1 0x11 0x8 0x7800 0x0 0x0 0x2 0x1 0x11 0x8 0x7800 0x0 0x0 0x3 0x1 0x11 0x8 0x7800 0x0 0x0 0x4 0x1 0x11 0x8 0x8000 0x0 0x0 0x1 0x1 0x30 0x8 0x8000 0x0 0x0 0x2 0x1 0x11 0x8 0x8000 0x0 0x0 0x3 0x1 0x30 0x8 0x8000 0x0 0x0 0x4 0x1 0x11 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x42 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0x90000000 0x90000000 0x0 0x10000000 0x42000000 0x0 0x80000000 0x80000000 0x0 0x10000000 0x1000000 0x0 0x0 0xe0300000 0x0 0x100000>;
+		clock-frequency = <0x3f940aa>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0008500 0x100 0xe0008300 0x8>;
+		compatible = "fsl,mpc8349-pci";
+		device_type = "pci";
+	};
+
+	pci@e0009000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x1 0x8 0x0 0x0 0x0 0x2 0x1 0x1 0x8 0x0 0x0 0x0 0x3 0x1 0x1 0x8 0x0 0x0 0x0 0x4 0x1 0x1 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x1 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xa0000000 0xa0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xb1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0009000 0x1000 0xb0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+
+	pci@e000a000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x2 0x8 0x0 0x0 0x0 0x2 0x1 0x2 0x8 0x0 0x0 0x0 0x3 0x1 0x2 0x8 0x0 0x0 0x0 0x4 0x1 0x2 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x2 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xc0000000 0xc0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xd1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe000a000 0x1000 0xd0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+};
diff -urN linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-default.dts linux/arch/powerpc/boot/dts/mpc8315erdb-default.dts
--- linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-default.dts	1970-01-01 07:00:00.000000000 +0700
+++ linux/arch/powerpc/boot/dts/mpc8315erdb-default.dts	2013-04-11 14:00:45.049250830 +0800
@@ -0,0 +1,456 @@
+/dts-v1/;
+
+/ {
+	compatible = "fsl,mpc8315erdb";
+	#address-cells = <0x1>;
+	#size-cells = <0x1>;
+
+	aliases {
+		ethernet0 = "/immr@e0000000/ethernet@24000";
+		ethernet1 = "/immr@e0000000/ethernet@25000";
+		serial0 = "/immr@e0000000/serial@4500";
+		serial1 = "/immr@e0000000/serial@4600";
+		pci0 = "/pci@e0008500";
+		pcie0 = "/pci@e0009000";
+		pcie1 = "/pci@e000a000";
+	};
+
+	cpus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+
+		PowerPC,8315@0 {
+			device_type = "cpu";
+			reg = <0x0>;
+			d-cache-line-size = <0x20>;
+			i-cache-line-size = <0x20>;
+			d-cache-size = <0x4000>;
+			i-cache-size = <0x4000>;
+			timebase-frequency = <0x0>;
+			bus-frequency = <0x0>;
+			clock-frequency = <0x0>;
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x8000000>;
+	};
+
+	localbus@e0005000 {
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		compatible = "fsl,mpc8315-elbc", "fsl,elbc", "simple-bus";
+		reg = <0xe0005000 0x1000>;
+		interrupts = <0x4d 0x8>;
+		interrupt-parent = <0x1>;
+		ranges = <0x0 0x0 0xfe000000 0x800000 0x1 0x0 0xe0600000 0x2000 0x2 0x0 0xf0000000 0x20000 0x3 0x0 0xfa000000 0x8000>;
+
+		flash@0,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x800000>;
+			bank-width = <0x2>;
+			device-width = <0x1>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+			};
+
+			fs@100000 {
+				reg = <0x100000 0x400000>;
+			};
+
+			kernel@500000 {
+				reg = <0x500000 0x200000>;
+			};
+
+			dtb@700000 {
+				reg = <0x700000 0x100000>;
+			};
+		};
+
+		nand@1,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-fcm-nand", "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x2000>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+				label = "U-Boot-NAND";
+			};
+
+			jffs2@100000 {
+				reg = <0x100000 0x800000>;
+				label = "JFFS2-NAND";
+			};
+
+			ramdisk@900000 {
+				reg = <0x900000 0x400000>;
+				label = "Ramdisk-NAND";
+			};
+
+			reserved@d00000 {
+				reg = <0xd00000 0x1000000>;
+				label = "Reserved-NAND";
+			};
+
+			kernel@1d00000 {
+				reg = <0x1d00000 0x200000>;
+				read-only;
+				label = "Kernel-NAND";
+			};
+
+			dtb@1f00000 {
+				reg = <0x1f00000 0x100000>;
+				read-only;
+				label = "DTB-NAND";
+			};
+		};
+	};
+
+	immr@e0000000 {
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+		device_type = "soc";
+		compatible = "fsl,mpc8315-immr", "simple-bus";
+		ranges = <0x0 0xe0000000 0x100000>;
+		reg = <0xe0000000 0x200>;
+		bus-frequency = <0x0>;
+
+		wdt@200 {
+			device_type = "watchdog";
+			compatible = "mpc83xx_wdt";
+			reg = <0x200 0x100>;
+		};
+
+		i2c@3000 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			cell-index = <0x0>;
+			compatible = "fsl-i2c";
+			reg = <0x3000 0x100>;
+			interrupts = <0xe 0x8>;
+			interrupt-parent = <0x1>;
+			dfsrr;
+
+			rtc@68 {
+				compatible = "dallas,ds1339";
+				reg = <0x68>;
+			};
+
+			mcu@a {
+				#gpio-cells = <0x2>;
+				compatible = "fsl,mc9s08qg8-mpc8315erdb", "fsl,mcu-mpc8349emitx";
+				reg = <0xa>;
+				gpio-controller;
+			};
+		};
+
+		spi@7000 {
+			cell-index = <0x0>;
+			compatible = "fsl,spi";
+			reg = <0x7000 0x1000>;
+			interrupts = <0x10 0x8>;
+			interrupt-parent = <0x1>;
+			mode = "cpu";
+		};
+
+		dma@82a8 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-dma", "fsl,elo-dma";
+			reg = <0x82a8 0x4>;
+			ranges = <0x0 0x8100 0x1a8>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x47 0x8>;
+			cell-index = <0x0>;
+
+			dma-channel@0 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0x0>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@80 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <0x1>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@100 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <0x2>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@180 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x180 0x28>;
+				cell-index = <0x3>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+		};
+
+		usb@23000 {
+			compatible = "fsl-usb2-dr";
+			reg = <0x23000 0x1000>;
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x26 0x8>;
+			phy_type = "utmi";
+			sleep = <0x2 0xc00000>;
+		};
+
+		mdio@24520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-mdio";
+			reg = <0x24520 0x20>;
+
+			ethernet-phy@0 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x14 0x8>;
+				reg = <0x0>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x4>;
+			};
+
+			ethernet-phy@1 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x13 0x8>;
+				reg = <0x1>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x6>;
+			};
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x3>;
+			};
+		};
+
+		mdio@25520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-tbi";
+			reg = <0x25520 0x20>;
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x5>;
+			};
+		};
+
+		ethernet@24000 {
+			cell-index = <0x0>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x24000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x20 0x8 0x21 0x8 0x22 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x3>;
+			phy-handle = <0x4>;
+			sleep = <0x2 0xc0000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+		};
+
+		ethernet@25000 {
+			cell-index = <0x1>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x25000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x23 0x8 0x24 0x8 0x25 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x5>;
+			phy-handle = <0x6>;
+			sleep = <0x2 0x30000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+		};
+
+		serial@4500 {
+			cell-index = <0x0>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4500 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0x9 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		serial@4600 {
+			cell-index = <0x1>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4600 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0xa 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		crypto@30000 {
+			compatible = "fsl,sec3.3", "fsl,sec3.1", "fsl,sec3.0", "fsl,sec2.4", "fsl,sec2.2", "fsl,sec2.1", "fsl,sec2.0";
+			reg = <0x30000 0x10000>;
+			interrupts = <0xb 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,num-channels = <0x4>;
+			fsl,channel-fifo-len = <0x18>;
+			fsl,exec-units-mask = <0x97c>;
+			fsl,descriptor-types-mask = <0x3ab0abf>;
+		};
+
+		sata@18000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x18000 0x1000>;
+			cell-index = <0x1>;
+			interrupts = <0x2c 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		sata@19000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x19000 0x1000>;
+			cell-index = <0x2>;
+			interrupts = <0x2d 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		tdm@16000 {
+			device_type = "tdm";
+			compatible = "fsl,mpc8315-tdm";
+			reg = <0x16000 0x200 0x2c000 0x2000>;
+			clock-frequency = <0x0>;
+			interrupts = <0x53 0x8 0x5e 0x8 0x3 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		legerity {
+			device_type = "slic";
+			compatible = "legerity-slic";
+			clock-frequency = <0x0>;
+			interrupts = <0x16 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		gpio@c00 {
+			device_type = "gpio";
+			compatible = "fsl,mpc8315-gpio";
+			reg = <0xc00 0x18>;
+			interrupt-parent = <0x1>;
+		};
+
+		interrupt-controller@700 {
+			compatible = "fsl,ipic";
+			interrupt-controller;
+			#address-cells = <0x0>;
+			#interrupt-cells = <0x2>;
+			reg = <0x700 0x100>;
+			device_type = "ipic";
+			linux,phandle = <0x1>;
+		};
+
+		ipic-msi@7c0 {
+			compatible = "fsl,ipic-msi";
+			reg = <0x7c0 0x40>;
+			msi-available-ranges = <0x0 0x100>;
+			interrupts = <0x43 0x8 0x4 0x8 0x51 0x8 0x52 0x8 0x56 0x8 0x57 0x8 0x58 0x8 0x59 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		power@b00 {
+			compatible = "fsl,mpc8313-pmc", "fsl,mpc8349-pmc";
+			reg = <0xb00 0x100 0xa00 0x100>;
+			interrupts = <0x50 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,mpc8313-wakeup-timer = <0x7>;
+			linux,phandle = <0x2>;
+		};
+
+		timer@500 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x500 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5a 0x8 0x4e 0x8 0x54 0x8 0x48 0x8>;
+			interrupt-parent = <0x1>;
+			linux,phandle = <0x7>;
+		};
+
+		timer@600 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x600 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5b 0x8 0x4f 0x8 0x55 0x8 0x49 0x8>;
+			interrupt-parent = <0x1>;
+		};
+	};
+
+	pci@e0008500 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		interrupt-map = <0x7000 0x0 0x0 0x1 0x1 0x12 0x8 0x7000 0x0 0x0 0x2 0x1 0x12 0x8 0x7000 0x0 0x0 0x3 0x1 0x12 0x8 0x7000 0x0 0x0 0x4 0x1 0x12 0x8 0x7800 0x0 0x0 0x1 0x1 0x11 0x8 0x7800 0x0 0x0 0x2 0x1 0x11 0x8 0x7800 0x0 0x0 0x3 0x1 0x11 0x8 0x7800 0x0 0x0 0x4 0x1 0x11 0x8 0x8000 0x0 0x0 0x1 0x1 0x30 0x8 0x8000 0x0 0x0 0x2 0x1 0x11 0x8 0x8000 0x0 0x0 0x3 0x1 0x30 0x8 0x8000 0x0 0x0 0x4 0x1 0x11 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x42 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0x90000000 0x90000000 0x0 0x10000000 0x42000000 0x0 0x80000000 0x80000000 0x0 0x10000000 0x1000000 0x0 0x0 0xe0300000 0x0 0x100000>;
+		clock-frequency = <0x3f940aa>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0008500 0x100 0xe0008300 0x8>;
+		compatible = "fsl,mpc8349-pci";
+		device_type = "pci";
+	};
+
+	pci@e0009000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x1 0x8 0x0 0x0 0x0 0x2 0x1 0x1 0x8 0x0 0x0 0x0 0x3 0x1 0x1 0x8 0x0 0x0 0x0 0x4 0x1 0x1 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x1 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xa0000000 0xa0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xb1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0009000 0x1000 0xb0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+
+	pci@e000a000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x2 0x8 0x0 0x0 0x0 0x2 0x1 0x2 0x8 0x0 0x0 0x0 0x3 0x1 0x2 0x8 0x0 0x0 0x0 0x4 0x1 0x2 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x2 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xc0000000 0xc0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xd1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe000a000 0x1000 0xd0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+};
diff -urN linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb.dts linux/arch/powerpc/boot/dts/mpc8315erdb.dts
--- linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb.dts	2012-02-04 04:39:51.000000000 +0800
+++ linux/arch/powerpc/boot/dts/mpc8315erdb.dts	2013-04-11 14:00:44.885918382 +0800
@@ -265,7 +265,7 @@
 		serial0: serial@4500 {
 			cell-index = <0>;
 			device_type = "serial";
-			compatible = "ns16550";
+			compatible = "fsl,ns16550", "ns16550";
 			reg = <0x4500 0x100>;
 			clock-frequency = <133333333>;
 			interrupts = <9 0x8>;
@@ -275,7 +275,7 @@
 		serial1: serial@4600 {
 			cell-index = <1>;
 			device_type = "serial";
-			compatible = "ns16550";
+			compatible = "fsl,ns16550", "ns16550";
 			reg = <0x4600 0x100>;
 			clock-frequency = <133333333>;
 			interrupts = <10 0x8>;
diff -urN linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-otg.dts linux/arch/powerpc/boot/dts/mpc8315erdb-otg.dts
--- linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-otg.dts	1970-01-01 07:00:00.000000000 +0700
+++ linux/arch/powerpc/boot/dts/mpc8315erdb-otg.dts	2013-04-11 14:00:44.965917949 +0800
@@ -0,0 +1,465 @@
+/dts-v1/;
+
+/ {
+	compatible = "fsl,mpc8315erdb";
+	#address-cells = <0x1>;
+	#size-cells = <0x1>;
+
+	aliases {
+		ethernet0 = "/immr@e0000000/ethernet@24000";
+		ethernet1 = "/immr@e0000000/ethernet@25000";
+		serial0 = "/immr@e0000000/serial@4500";
+		serial1 = "/immr@e0000000/serial@4600";
+		pci0 = "/pci@e0008500";
+		pcie0 = "/pci@e0009000";
+		pcie1 = "/pci@e000a000";
+	};
+
+	cpus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+
+		PowerPC,8315@0 {
+			device_type = "cpu";
+			reg = <0x0>;
+			d-cache-line-size = <0x20>;
+			i-cache-line-size = <0x20>;
+			d-cache-size = <0x4000>;
+			i-cache-size = <0x4000>;
+			timebase-frequency = <0x0>;
+			bus-frequency = <0x0>;
+			clock-frequency = <0x0>;
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x8000000>;
+	};
+
+	localbus@e0005000 {
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		compatible = "fsl,mpc8315-elbc", "fsl,elbc", "simple-bus";
+		reg = <0xe0005000 0x1000>;
+		interrupts = <0x4d 0x8>;
+		interrupt-parent = <0x1>;
+		ranges = <0x0 0x0 0xfe000000 0x800000 0x1 0x0 0xe0600000 0x2000 0x2 0x0 0xf0000000 0x20000 0x3 0x0 0xfa000000 0x8000>;
+
+		flash@0,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x800000>;
+			bank-width = <0x2>;
+			device-width = <0x1>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+			};
+
+			fs@100000 {
+				reg = <0x100000 0x400000>;
+			};
+
+			kernel@500000 {
+				reg = <0x500000 0x200000>;
+			};
+
+			dtb@700000 {
+				reg = <0x700000 0x100000>;
+			};
+		};
+
+		nand@1,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-fcm-nand", "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x2000>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+				label = "U-Boot-NAND";
+			};
+
+			jffs2@100000 {
+				reg = <0x100000 0x800000>;
+				label = "JFFS2-NAND";
+			};
+
+			ramdisk@900000 {
+				reg = <0x900000 0x400000>;
+				label = "Ramdisk-NAND";
+			};
+
+			reserved@d00000 {
+				reg = <0xd00000 0x1000000>;
+				label = "Reserved-NAND";
+			};
+
+			kernel@1d00000 {
+				reg = <0x1d00000 0x200000>;
+				read-only;
+				label = "Kernel-NAND";
+			};
+
+			dtb@1f00000 {
+				reg = <0x1f00000 0x100000>;
+				read-only;
+				label = "DTB-NAND";
+			};
+		};
+	};
+
+	immr@e0000000 {
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+		device_type = "soc";
+		compatible = "fsl,mpc8315-immr", "simple-bus";
+		ranges = <0x0 0xe0000000 0x100000>;
+		reg = <0xe0000000 0x200>;
+		bus-frequency = <0x0>;
+
+		wdt@200 {
+			device_type = "watchdog";
+			compatible = "mpc83xx_wdt";
+			reg = <0x200 0x100>;
+		};
+
+		i2c@3000 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			cell-index = <0x0>;
+			compatible = "fsl-i2c";
+			reg = <0x3000 0x100>;
+			interrupts = <0xe 0x8>;
+			interrupt-parent = <0x1>;
+			dfsrr;
+
+			rtc@68 {
+				compatible = "dallas,ds1339";
+				reg = <0x68>;
+			};
+
+			mcu@a {
+				#gpio-cells = <0x2>;
+				compatible = "fsl,mc9s08qg8-mpc8315erdb", "fsl,mcu-mpc8349emitx";
+				reg = <0xa>;
+				gpio-controller;
+			};
+		};
+
+		spi@7000 {
+			cell-index = <0x0>;
+			compatible = "fsl,spi";
+			reg = <0x7000 0x1000>;
+			interrupts = <0x10 0x8>;
+			interrupt-parent = <0x1>;
+			mode = "cpu";
+		};
+
+		dma@82a8 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-dma", "fsl,elo-dma";
+			reg = <0x82a8 0x4>;
+			ranges = <0x0 0x8100 0x1a8>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x47 0x8>;
+			cell-index = <0x0>;
+
+			dma-channel@0 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0x0>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@80 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <0x1>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@100 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <0x2>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@180 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x180 0x28>;
+				cell-index = <0x3>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+		};
+
+		usb@23000 {
+			compatible = "fsl-usb2-dr";
+			reg = <0x23000 0x1000>;
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x26 0x8>;
+			dr_mode = "otg";
+			phy_type = "ulpi";
+			sleep = <0x2 0xc00000>;
+		};
+
+		mdio@24520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-mdio";
+			reg = <0x24520 0x20>;
+
+			ethernet-phy@0 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x14 0x8>;
+				reg = <0x0>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x4>;
+			};
+
+			ethernet-phy@1 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x13 0x8>;
+				reg = <0x1>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x7>;
+			};
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x3>;
+			};
+		};
+
+		mdio@25520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-tbi";
+			reg = <0x25520 0x20>;
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x6>;
+			};
+		};
+
+		ptimer@24e00 {
+			compatible = "fsl,gianfar-ptp-timer";
+			reg = <0x24e00 0xb0>;
+			linux,phandle = <0x5>;
+		};
+
+		ethernet@24000 {
+			cell-index = <0x0>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x24000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x20 0x8 0x21 0x8 0x22 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x3>;
+			phy-handle = <0x4>;
+			sleep = <0x2 0xc0000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+			ptimer-handle = <0x5>;
+		};
+
+		ethernet@25000 {
+			cell-index = <0x1>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x25000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x23 0x8 0x24 0x8 0x25 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x6>;
+			phy-handle = <0x7>;
+			sleep = <0x2 0x30000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+			ptimer-handle = <0x5>;
+		};
+
+		serial@4500 {
+			cell-index = <0x0>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4500 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0x9 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		serial@4600 {
+			cell-index = <0x1>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4600 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0xa 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		crypto@30000 {
+			compatible = "fsl,sec3.3", "fsl,sec3.1", "fsl,sec3.0", "fsl,sec2.4", "fsl,sec2.2", "fsl,sec2.1", "fsl,sec2.0";
+			reg = <0x30000 0x10000>;
+			interrupts = <0xb 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,num-channels = <0x4>;
+			fsl,channel-fifo-len = <0x18>;
+			fsl,exec-units-mask = <0x97c>;
+			fsl,descriptor-types-mask = <0x3ab0abf>;
+		};
+
+		sata@18000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x18000 0x1000>;
+			cell-index = <0x1>;
+			interrupts = <0x2c 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		sata@19000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x19000 0x1000>;
+			cell-index = <0x2>;
+			interrupts = <0x2d 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		tdm@16000 {
+			device_type = "tdm";
+			compatible = "fsl,mpc8315-tdm";
+			reg = <0x16000 0x200 0x2c000 0x2000>;
+			clock-frequency = <0x0>;
+			interrupts = <0x53 0x8 0x5e 0x8 0x3 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		legerity {
+			device_type = "slic";
+			compatible = "legerity-slic";
+			clock-frequency = <0x0>;
+			interrupts = <0x16 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		gpio@c00 {
+			device_type = "gpio";
+			compatible = "fsl,mpc8315-gpio";
+			reg = <0xc00 0x18>;
+			interrupt-parent = <0x1>;
+		};
+
+		interrupt-controller@700 {
+			compatible = "fsl,ipic";
+			interrupt-controller;
+			#address-cells = <0x0>;
+			#interrupt-cells = <0x2>;
+			reg = <0x700 0x100>;
+			device_type = "ipic";
+			linux,phandle = <0x1>;
+		};
+
+		ipic-msi@7c0 {
+			compatible = "fsl,ipic-msi";
+			reg = <0x7c0 0x40>;
+			msi-available-ranges = <0x0 0x100>;
+			interrupts = <0x43 0x8 0x4 0x8 0x51 0x8 0x52 0x8 0x56 0x8 0x57 0x8 0x58 0x8 0x59 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		power@b00 {
+			compatible = "fsl,mpc8313-pmc", "fsl,mpc8349-pmc";
+			reg = <0xb00 0x100 0xa00 0x100>;
+			interrupts = <0x50 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,mpc8313-wakeup-timer = <0x8>;
+			linux,phandle = <0x2>;
+		};
+
+		timer@500 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x500 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5a 0x8 0x4e 0x8 0x54 0x8 0x48 0x8>;
+			interrupt-parent = <0x1>;
+			linux,phandle = <0x8>;
+		};
+
+		timer@600 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x600 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5b 0x8 0x4f 0x8 0x55 0x8 0x49 0x8>;
+			interrupt-parent = <0x1>;
+		};
+	};
+
+	pci@e0008500 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		interrupt-map = <0x7000 0x0 0x0 0x1 0x1 0x12 0x8 0x7000 0x0 0x0 0x2 0x1 0x12 0x8 0x7000 0x0 0x0 0x3 0x1 0x12 0x8 0x7000 0x0 0x0 0x4 0x1 0x12 0x8 0x7800 0x0 0x0 0x1 0x1 0x11 0x8 0x7800 0x0 0x0 0x2 0x1 0x11 0x8 0x7800 0x0 0x0 0x3 0x1 0x11 0x8 0x7800 0x0 0x0 0x4 0x1 0x11 0x8 0x8000 0x0 0x0 0x1 0x1 0x30 0x8 0x8000 0x0 0x0 0x2 0x1 0x11 0x8 0x8000 0x0 0x0 0x3 0x1 0x30 0x8 0x8000 0x0 0x0 0x4 0x1 0x11 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x42 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0x90000000 0x90000000 0x0 0x10000000 0x42000000 0x0 0x80000000 0x80000000 0x0 0x10000000 0x1000000 0x0 0x0 0xe0300000 0x0 0x100000>;
+		clock-frequency = <0x3f940aa>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0008500 0x100 0xe0008300 0x8>;
+		compatible = "fsl,mpc8349-pci";
+		device_type = "pci";
+	};
+
+	pci@e0009000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x1 0x8 0x0 0x0 0x0 0x2 0x1 0x1 0x8 0x0 0x0 0x0 0x3 0x1 0x1 0x8 0x0 0x0 0x0 0x4 0x1 0x1 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x1 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xa0000000 0xa0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xb1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0009000 0x1000 0xb0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+
+	pci@e000a000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x2 0x8 0x0 0x0 0x0 0x2 0x1 0x2 0x8 0x0 0x0 0x0 0x3 0x1 0x2 0x8 0x0 0x0 0x0 0x4 0x1 0x2 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x2 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xc0000000 0xc0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xd1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe000a000 0x1000 0xd0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+};
diff -urN linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-ulpi.dts linux/arch/powerpc/boot/dts/mpc8315erdb-ulpi.dts
--- linux-3.2.4/arch/powerpc/boot/dts/mpc8315erdb-ulpi.dts	1970-01-01 07:00:00.000000000 +0700
+++ linux/arch/powerpc/boot/dts/mpc8315erdb-ulpi.dts	2013-04-11 14:00:45.032584255 +0800
@@ -0,0 +1,464 @@
+/dts-v1/;
+
+/ {
+	compatible = "fsl,mpc8315erdb";
+	#address-cells = <0x1>;
+	#size-cells = <0x1>;
+
+	aliases {
+		ethernet0 = "/immr@e0000000/ethernet@24000";
+		ethernet1 = "/immr@e0000000/ethernet@25000";
+		serial0 = "/immr@e0000000/serial@4500";
+		serial1 = "/immr@e0000000/serial@4600";
+		pci0 = "/pci@e0008500";
+		pcie0 = "/pci@e0009000";
+		pcie1 = "/pci@e000a000";
+	};
+
+	cpus {
+		#address-cells = <0x1>;
+		#size-cells = <0x0>;
+
+		PowerPC,8315@0 {
+			device_type = "cpu";
+			reg = <0x0>;
+			d-cache-line-size = <0x20>;
+			i-cache-line-size = <0x20>;
+			d-cache-size = <0x4000>;
+			i-cache-size = <0x4000>;
+			timebase-frequency = <0x0>;
+			bus-frequency = <0x0>;
+			clock-frequency = <0x0>;
+		};
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x0 0x8000000>;
+	};
+
+	localbus@e0005000 {
+		#address-cells = <0x2>;
+		#size-cells = <0x1>;
+		compatible = "fsl,mpc8315-elbc", "fsl,elbc", "simple-bus";
+		reg = <0xe0005000 0x1000>;
+		interrupts = <0x4d 0x8>;
+		interrupt-parent = <0x1>;
+		ranges = <0x0 0x0 0xfe000000 0x800000 0x1 0x0 0xe0600000 0x2000 0x2 0x0 0xf0000000 0x20000 0x3 0x0 0xfa000000 0x8000>;
+
+		flash@0,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x800000>;
+			bank-width = <0x2>;
+			device-width = <0x1>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+			};
+
+			fs@100000 {
+				reg = <0x100000 0x400000>;
+			};
+
+			kernel@500000 {
+				reg = <0x500000 0x200000>;
+			};
+
+			dtb@700000 {
+				reg = <0x700000 0x100000>;
+			};
+		};
+
+		nand@1,0 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-fcm-nand", "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x2000>;
+
+			u-boot@0 {
+				reg = <0x0 0x100000>;
+				read-only;
+				label = "U-Boot-NAND";
+			};
+
+			jffs2@100000 {
+				reg = <0x100000 0x800000>;
+				label = "JFFS2-NAND";
+			};
+
+			ramdisk@900000 {
+				reg = <0x900000 0x400000>;
+				label = "Ramdisk-NAND";
+			};
+
+			reserved@d00000 {
+				reg = <0xd00000 0x1000000>;
+				label = "Reserved-NAND";
+			};
+
+			kernel@1d00000 {
+				reg = <0x1d00000 0x200000>;
+				read-only;
+				label = "Kernel-NAND";
+			};
+
+			dtb@1f00000 {
+				reg = <0x1f00000 0x100000>;
+				read-only;
+				label = "DTB-NAND";
+			};
+		};
+	};
+
+	immr@e0000000 {
+		#address-cells = <0x1>;
+		#size-cells = <0x1>;
+		device_type = "soc";
+		compatible = "fsl,mpc8315-immr", "simple-bus";
+		ranges = <0x0 0xe0000000 0x100000>;
+		reg = <0xe0000000 0x200>;
+		bus-frequency = <0x0>;
+
+		wdt@200 {
+			device_type = "watchdog";
+			compatible = "mpc83xx_wdt";
+			reg = <0x200 0x100>;
+		};
+
+		i2c@3000 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			cell-index = <0x0>;
+			compatible = "fsl-i2c";
+			reg = <0x3000 0x100>;
+			interrupts = <0xe 0x8>;
+			interrupt-parent = <0x1>;
+			dfsrr;
+
+			rtc@68 {
+				compatible = "dallas,ds1339";
+				reg = <0x68>;
+			};
+
+			mcu@a {
+				#gpio-cells = <0x2>;
+				compatible = "fsl,mc9s08qg8-mpc8315erdb", "fsl,mcu-mpc8349emitx";
+				reg = <0xa>;
+				gpio-controller;
+			};
+		};
+
+		spi@7000 {
+			cell-index = <0x0>;
+			compatible = "fsl,spi";
+			reg = <0x7000 0x1000>;
+			interrupts = <0x10 0x8>;
+			interrupt-parent = <0x1>;
+			mode = "cpu";
+		};
+
+		dma@82a8 {
+			#address-cells = <0x1>;
+			#size-cells = <0x1>;
+			compatible = "fsl,mpc8315-dma", "fsl,elo-dma";
+			reg = <0x82a8 0x4>;
+			ranges = <0x0 0x8100 0x1a8>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x47 0x8>;
+			cell-index = <0x0>;
+
+			dma-channel@0 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x0 0x80>;
+				cell-index = <0x0>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@80 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x80 0x80>;
+				cell-index = <0x1>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@100 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x100 0x80>;
+				cell-index = <0x2>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+
+			dma-channel@180 {
+				compatible = "fsl,mpc8315-dma-channel", "fsl,elo-dma-channel";
+				reg = <0x180 0x28>;
+				cell-index = <0x3>;
+				interrupt-parent = <0x1>;
+				interrupts = <0x47 0x8>;
+			};
+		};
+
+		usb@23000 {
+			compatible = "fsl-usb2-dr";
+			reg = <0x23000 0x1000>;
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			interrupt-parent = <0x1>;
+			interrupts = <0x26 0x8>;
+			phy_type = "ulpi";
+			sleep = <0x2 0xc00000>;
+		};
+
+		mdio@24520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-mdio";
+			reg = <0x24520 0x20>;
+
+			ethernet-phy@0 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x14 0x8>;
+				reg = <0x0>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x4>;
+			};
+
+			ethernet-phy@1 {
+				interrupt-parent = <0x1>;
+				interrupts = <0x13 0x8>;
+				reg = <0x1>;
+				device_type = "ethernet-phy";
+				linux,phandle = <0x7>;
+			};
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x3>;
+			};
+		};
+
+		mdio@25520 {
+			#address-cells = <0x1>;
+			#size-cells = <0x0>;
+			compatible = "fsl,gianfar-tbi";
+			reg = <0x25520 0x20>;
+
+			tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+				linux,phandle = <0x6>;
+			};
+		};
+
+		ptimer@24e00 {
+			compatible = "fsl,gianfar-ptp-timer";
+			reg = <0x24e00 0xb0>;
+			linux,phandle = <0x5>;
+		};
+
+		ethernet@24000 {
+			cell-index = <0x0>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x24000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x20 0x8 0x21 0x8 0x22 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x3>;
+			phy-handle = <0x4>;
+			sleep = <0x2 0xc0000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+			ptimer-handle = <0x5>;
+		};
+
+		ethernet@25000 {
+			cell-index = <0x1>;
+			device_type = "network";
+			model = "eTSEC";
+			compatible = "gianfar";
+			reg = <0x25000 0x1000>;
+			local-mac-address = [00 00 00 00 00 00];
+			interrupts = <0x23 0x8 0x24 0x8 0x25 0x8>;
+			interrupt-parent = <0x1>;
+			tbi-handle = <0x6>;
+			phy-handle = <0x7>;
+			sleep = <0x2 0x30000000>;
+			fsl,magic-packet;
+			fsl,lossless-flow-ctrl = <0x0>;
+			ptimer-handle = <0x5>;
+		};
+
+		serial@4500 {
+			cell-index = <0x0>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4500 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0x9 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		serial@4600 {
+			cell-index = <0x1>;
+			device_type = "serial";
+			compatible = "ns16550";
+			reg = <0x4600 0x100>;
+			clock-frequency = <0x7f28155>;
+			interrupts = <0xa 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		crypto@30000 {
+			compatible = "fsl,sec3.3", "fsl,sec3.1", "fsl,sec3.0", "fsl,sec2.4", "fsl,sec2.2", "fsl,sec2.1", "fsl,sec2.0";
+			reg = <0x30000 0x10000>;
+			interrupts = <0xb 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,num-channels = <0x4>;
+			fsl,channel-fifo-len = <0x18>;
+			fsl,exec-units-mask = <0x97c>;
+			fsl,descriptor-types-mask = <0x3ab0abf>;
+		};
+
+		sata@18000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x18000 0x1000>;
+			cell-index = <0x1>;
+			interrupts = <0x2c 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		sata@19000 {
+			compatible = "fsl,mpc8315-sata", "fsl,pq-sata";
+			reg = <0x19000 0x1000>;
+			cell-index = <0x2>;
+			interrupts = <0x2d 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		tdm@16000 {
+			device_type = "tdm";
+			compatible = "fsl,mpc8315-tdm";
+			reg = <0x16000 0x200 0x2c000 0x2000>;
+			clock-frequency = <0x0>;
+			interrupts = <0x53 0x8 0x5e 0x8 0x3 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		legerity {
+			device_type = "slic";
+			compatible = "legerity-slic";
+			clock-frequency = <0x0>;
+			interrupts = <0x16 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		gpio@c00 {
+			device_type = "gpio";
+			compatible = "fsl,mpc8315-gpio";
+			reg = <0xc00 0x18>;
+			interrupt-parent = <0x1>;
+		};
+
+		interrupt-controller@700 {
+			compatible = "fsl,ipic";
+			interrupt-controller;
+			#address-cells = <0x0>;
+			#interrupt-cells = <0x2>;
+			reg = <0x700 0x100>;
+			device_type = "ipic";
+			linux,phandle = <0x1>;
+		};
+
+		ipic-msi@7c0 {
+			compatible = "fsl,ipic-msi";
+			reg = <0x7c0 0x40>;
+			msi-available-ranges = <0x0 0x100>;
+			interrupts = <0x43 0x8 0x4 0x8 0x51 0x8 0x52 0x8 0x56 0x8 0x57 0x8 0x58 0x8 0x59 0x8>;
+			interrupt-parent = <0x1>;
+		};
+
+		power@b00 {
+			compatible = "fsl,mpc8313-pmc", "fsl,mpc8349-pmc";
+			reg = <0xb00 0x100 0xa00 0x100>;
+			interrupts = <0x50 0x8>;
+			interrupt-parent = <0x1>;
+			fsl,mpc8313-wakeup-timer = <0x8>;
+			linux,phandle = <0x2>;
+		};
+
+		timer@500 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x500 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5a 0x8 0x4e 0x8 0x54 0x8 0x48 0x8>;
+			interrupt-parent = <0x1>;
+			linux,phandle = <0x8>;
+		};
+
+		timer@600 {
+			compatible = "fsl,mpc8313-gtm", "fsl,gtm";
+			reg = <0x600 0x100>;
+			clock-frequency = <0x7ed6b40>;
+			interrupts = <0x5b 0x8 0x4f 0x8 0x55 0x8 0x49 0x8>;
+			interrupt-parent = <0x1>;
+		};
+	};
+
+	pci@e0008500 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		interrupt-map = <0x7000 0x0 0x0 0x1 0x1 0x12 0x8 0x7000 0x0 0x0 0x2 0x1 0x12 0x8 0x7000 0x0 0x0 0x3 0x1 0x12 0x8 0x7000 0x0 0x0 0x4 0x1 0x12 0x8 0x7800 0x0 0x0 0x1 0x1 0x11 0x8 0x7800 0x0 0x0 0x2 0x1 0x11 0x8 0x7800 0x0 0x0 0x3 0x1 0x11 0x8 0x7800 0x0 0x0 0x4 0x1 0x11 0x8 0x8000 0x0 0x0 0x1 0x1 0x30 0x8 0x8000 0x0 0x0 0x2 0x1 0x11 0x8 0x8000 0x0 0x0 0x3 0x1 0x30 0x8 0x8000 0x0 0x0 0x4 0x1 0x11 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x42 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0x90000000 0x90000000 0x0 0x10000000 0x42000000 0x0 0x80000000 0x80000000 0x0 0x10000000 0x1000000 0x0 0x0 0xe0300000 0x0 0x100000>;
+		clock-frequency = <0x3f940aa>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0008500 0x100 0xe0008300 0x8>;
+		compatible = "fsl,mpc8349-pci";
+		device_type = "pci";
+	};
+
+	pci@e0009000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x1 0x8 0x0 0x0 0x0 0x2 0x1 0x1 0x8 0x0 0x0 0x0 0x3 0x1 0x1 0x8 0x0 0x0 0x0 0x4 0x1 0x1 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x1 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xa0000000 0xa0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xb1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe0009000 0x1000 0xb0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+
+	pci@e000a000 {
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		msi-available-ranges = <0x43 0x4 0x51 0x52 0x56 0x57 0x58 0x59>;
+		interrupt-map = <0x0 0x0 0x0 0x1 0x1 0x2 0x8 0x0 0x0 0x0 0x2 0x1 0x2 0x8 0x0 0x0 0x0 0x3 0x1 0x2 0x8 0x0 0x0 0x0 0x4 0x1 0x2 0x8>;
+		interrupt-parent = <0x1>;
+		interrupts = <0x2 0x8>;
+		bus-range = <0x0 0x0>;
+		ranges = <0x2000000 0x0 0xc0000000 0xc0000000 0x0 0x10000000 0x1000000 0x0 0x0 0xd1000000 0x0 0x800000>;
+		clock-frequency = <0x0>;
+		#interrupt-cells = <0x1>;
+		#size-cells = <0x2>;
+		#address-cells = <0x3>;
+		reg = <0xe000a000 0x1000 0xd0000000 0x1000000>;
+		compatible = "fsl,mpc8315-pcie";
+		device_type = "pci";
+	};
+};
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/attach.c linux/drivers/net/wireless/ath/ath5k/attach.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/attach.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/attach.c	2013-04-11 13:59:12.549751944 +0800
@@ -22,10 +22,20 @@
 
 #include <linux/pci.h>
 #include <linux/slab.h>
+#include <linux/module.h>
 #include "ath5k.h"
 #include "reg.h"
 #include "debug.h"
 
+static int ath5k_modparam_chan_bw;
+module_param_named(chan_bw, ath5k_modparam_chan_bw, int, S_IRUGO);
+MODULE_PARM_DESC(chan_bw, "Channel bandwidth setting 10(default), 20, 5MHz");
+
+static bool ath5k_modparam_only_11a;
+module_param_named(only_11a, ath5k_modparam_only_11a, bool, S_IRUGO);
+MODULE_PARM_DESC(only_11a, "Disable(default) 11b/11g mode even if NIC supports them");
+
+
 /**
  * ath5k_hw_post - Power On Self Test helper function
  *
@@ -113,7 +123,22 @@
 	/*
 	 * HW information
 	 */
-	ah->ah_bwmode = AR5K_BWMODE_DEFAULT;
+	/*
+	 * Channel bandwidth setting.
+	 * Powered by VANET
+	 */
+	switch (ath5k_modparam_chan_bw) {
+	case 20:
+		ah->ah_bwmode = AR5K_BWMODE_DEFAULT;
+		break;
+	case 5:
+		ah->ah_bwmode = AR5K_BWMODE_5MHZ;
+		break;
+	default:
+		ah->ah_bwmode = AR5K_BWMODE_10MHZ;
+		printk(KERN_WARNING "ath5k channel bandwidth setting 10MHz default\n");
+		break;
+	}
 	ah->ah_txpower.txp_tpc = AR5K_TUNE_TPC_TXPOWER;
 	ah->ah_imr = 0;
 	ah->ah_retry_short = AR5K_INIT_RETRY_SHORT;
@@ -312,6 +337,13 @@
 		__clear_bit(AR5K_MODE_11B, ah->ah_capabilities.cap_mode);
 		__clear_bit(AR5K_MODE_11G, ah->ah_capabilities.cap_mode);
 	}
+
+	/*Disable 11b/11g mode in order to use 11a by default VANET modified by LiJing*/
+	if (ath5k_modparam_only_11a) {
+		printk("VANET-DEBUG: %s Disabling 11b/11g mode\n", __func__);
+		__clear_bit(AR5K_MODE_11B, ah->ah_capabilities.cap_mode);
+		__clear_bit(AR5K_MODE_11G, ah->ah_capabilities.cap_mode);
+	}
 
 	/* Crypto settings */
 	common->keymax = (ah->ah_version == AR5K_AR5210 ?
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/base.c linux/drivers/net/wireless/ath/ath5k/base.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/base.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/base.c	2013-04-11 13:59:12.993082875 +0800
@@ -53,6 +53,7 @@
 #include <linux/slab.h>
 #include <linux/etherdevice.h>
 #include <linux/nl80211.h>
+#include <linux/ctype.h>
 
 #include <net/ieee80211_radiotap.h>
 
@@ -268,7 +269,11 @@
 		/* 802.11j 5.030-5.080 GHz (20MHz) */
 		(chan == 8 || chan == 12 || chan == 16) ||
 		/* 802.11j 4.9GHz (20MHz) */
-		(chan == 184 || chan == 188 || chan == 192 || chan == 196));
+		(chan == 184 || chan == 188 || chan == 192 || chan == 196) ||
+		/* 802.11p 5.8GHz (20MHz) by ZHAO Yao @ VANET */
+		(chan == 172 || chan == 174 || chan == 176 || chan == 178 ||
+		 chan == 180 || chan == 182 || chan == 184)
+		);
 }
 
 static unsigned int
@@ -353,6 +358,7 @@
 
 	if (test_bit(AR5K_MODE_11G, ah->ah_capabilities.cap_mode)) {
 		/* G mode */
+		printk("VANET-DEBUG: %s AR5K_MODE_11G\n", __func__);
 		memcpy(sband->bitrates, &ath5k_rates[0],
 		       sizeof(struct ieee80211_rate) * 12);
 		sband->n_bitrates = 12;
@@ -366,6 +372,7 @@
 		max_c -= count_c;
 	} else if (test_bit(AR5K_MODE_11B, ah->ah_capabilities.cap_mode)) {
 		/* B mode */
+		printk("VANET-DEBUG: %s AR5K_MODE_11B\n", __func__);
 		memcpy(sband->bitrates, &ath5k_rates[0],
 		       sizeof(struct ieee80211_rate) * 4);
 		sband->n_bitrates = 4;
@@ -395,6 +402,7 @@
 
 	/* 5GHz band, A mode */
 	if (test_bit(AR5K_MODE_11A, ah->ah_capabilities.cap_mode)) {
+		printk("VANET-DEBUG: %s AR5K_MODE_11A\n", __func__);
 		sband = &ah->sbands[IEEE80211_BAND_5GHZ];
 		sband->band = IEEE80211_BAND_5GHZ;
 		sband->bitrates = &ah->rates[IEEE80211_BAND_5GHZ][0];
@@ -429,6 +437,8 @@
 	ATH5K_DBG(ah, ATH5K_DEBUG_RESET,
 		  "channel set, resetting (%u -> %u MHz)\n",
 		  ah->curchan->center_freq, chan->center_freq);
+	printk("VANET-debug: %s resetting (%u -> %u MHz)\n",
+		       __func__, ah->curchan->center_freq, chan->center_freq);
 
 	/*
 	 * To switch channels clear any pending DMA operations;
@@ -1306,9 +1316,39 @@
 		    struct ath5k_rx_status *rs)
 {
 	struct ieee80211_rx_status *rxs;
+	struct ieee80211_mgmt *mgmt;
+#if 0 // debug information for PowerPC
+	int i, j;
+#endif
 
 	ath5k_remove_padding(skb);
 
+	/*
+	 * VANET: for PowerPC platform debug.
+	 */
+#if 0
+	printk("VANET-debug: %s\n", __func__);
+	printk("VANET-debug: ***** first 128 bytes of skb data *****\n");
+	for (j=0; j<16; j++) {
+		printk("[%d] ", j);
+		for (i=j*8; i<(j+1)*8; i++) {
+			if (skb->data[i] < 0x10)
+				printk("0%x ", skb->data[i]);
+			else
+				printk("%2x ", skb->data[i]);
+		}
+		printk("\t");
+		for (i=j*8; i<(j+1)*8; i++) {
+			if (isalnum(skb->data[i]) || skb->data[i]==' ')
+				printk("%c", skb->data[i]);
+			else
+				printk(".");
+		}
+		printk("\n");
+	}
+	printk("VANET-debug: ***************************************\n");
+#endif
+
 	rxs = IEEE80211_SKB_RXCB(skb);
 
 	rxs->flag = 0;
@@ -1365,7 +1405,15 @@
 	if (ah->opmode == NL80211_IFTYPE_ADHOC)
 		ath5k_check_ibss_tsf(ah, skb, rxs);
 
-	ieee80211_rx(ah->hw, skb);
+	/**
+	 * VANET-debug: XXX ath5k drop all received management frame
+	 */
+	mgmt = (struct ieee80211_mgmt *)skb->data;
+	if (!ieee80211_is_data(mgmt->frame_control)) {
+		kfree_skb(skb);
+	} else {
+		ieee80211_rx(ah->hw, skb);
+	}
 }
 
 /** ath5k_frame_receive_ok() - Do we want to receive this frame or not?
@@ -1451,6 +1499,9 @@
 	struct ath5k_desc *ds;
 	int ret;
 
+#if 0 // debug information for PowerPC
+	printk("VANET-debug: %s\n", __func__);
+#endif
 	spin_lock(&ah->rxbuflock);
 	if (list_empty(&ah->rxbuf)) {
 		ATH5K_WARN(ah, "empty rx buf pool\n");
@@ -1539,6 +1590,8 @@
 	spin_lock_irqsave(&ah->txbuflock, flags);
 	if (list_empty(&ah->txbuf)) {
 		ATH5K_ERR(ah, "no further txbuf available, dropping packet\n");
+		printk("VANET-debug: %s no further txbuf available, dropping packet\n",
+				__func__);
 		spin_unlock_irqrestore(&ah->txbuflock, flags);
 		ieee80211_stop_queues(hw);
 		goto drop_packet;
@@ -1849,6 +1902,7 @@
 				ah->bmisscount);
 			ATH5K_DBG(ah, ATH5K_DEBUG_RESET,
 				  "stuck beacon, resetting\n");
+			printk("VANET-debug: %s before queue reset_work\n", __func__);
 			ieee80211_queue_work(ah->hw, &ah->reset_work);
 		}
 		return;
@@ -2165,6 +2219,7 @@
 			 */
 			ATH5K_DBG(ah, ATH5K_DEBUG_RESET,
 				  "fatal int, resetting\n");
+			printk("VANET-debug: %s AR5K_INT_FATAL, before queue reset_work\n", __func__);
 			ieee80211_queue_work(ah->hw, &ah->reset_work);
 		} else if (unlikely(status & AR5K_INT_RXORN)) {
 			/*
@@ -2180,6 +2235,7 @@
 			if (ah->ah_mac_srev < AR5K_SREV_AR5212) {
 				ATH5K_DBG(ah, ATH5K_DEBUG_RESET,
 					  "rx overrun, resetting\n");
+				printk("VANET-debug: %s before queue reset_work\n", __func__);
 				ieee80211_queue_work(ah->hw, &ah->reset_work);
 			} else
 				ath5k_schedule_rx(ah);
@@ -2208,6 +2264,7 @@
 				/* TODO */
 			}
 			if (status & AR5K_INT_MIB) {
+				printk("VANET-debug: %s INT_MIB\n", __func__);
 				ah->stats.mib_intr++;
 				ath5k_hw_update_mib_counters(ah);
 				ath5k_ani_mib_intr(ah);
@@ -2255,6 +2312,7 @@
 		 * to load new gain values.
 		 */
 		ATH5K_DBG(ah, ATH5K_DEBUG_RESET, "calibration, resetting\n");
+		printk("VANET-debug: %s before queue reset_work\n", __func__);
 		ieee80211_queue_work(ah->hw, &ah->reset_work);
 	}
 	if (ath5k_hw_phy_calibrate(ah, ah->curchan))
@@ -2294,6 +2352,7 @@
 			tx_complete_work.work);
 	struct ath5k_txq *txq;
 	int i;
+	static unsigned int old_ackfail = 0; //VANET-debug: ack failed info
 	bool needreset = false;
 
 	mutex_lock(&ah->lock);
@@ -2303,6 +2362,10 @@
 			txq = &ah->txqs[i];
 			spin_lock_bh(&txq->lock);
 			if (txq->txq_len > 1) {
+				printk("VANET-debug: txqs[%d]: len=%d poll_mark=%s, ackfailed=%u/3sec\n",
+						i, txq->txq_len,
+						(txq->txq_poll_mark==true)?"true":"false",
+						ah->stats.ack_fail-old_ackfail);
 				if (txq->txq_poll_mark) {
 					ATH5K_DBG(ah, ATH5K_DEBUG_XMIT,
 						  "TX queue stuck %d\n",
@@ -2319,9 +2382,12 @@
 		}
 	}
 
+	old_ackfail = ah->stats.ack_fail;
+
 	if (needreset) {
 		ATH5K_DBG(ah, ATH5K_DEBUG_RESET,
 			  "TX queues stuck, resetting\n");
+		printk("VANET-debug: %s before reset\n", __func__);
 		ath5k_reset(ah, NULL, true);
 	}
 
@@ -2349,7 +2415,8 @@
 	hw->flags = IEEE80211_HW_RX_INCLUDES_FCS |
 			IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING |
 			IEEE80211_HW_SIGNAL_DBM |
-			IEEE80211_HW_REPORTS_TX_ACK_STATUS;
+			IEEE80211_HW_REPORTS_TX_ACK_STATUS |
+			IEEE80211_HW_VANET;
 
 	hw->wiphy->interface_modes =
 		BIT(NL80211_IFTYPE_AP) |
@@ -2426,6 +2493,8 @@
 					ah->ah_mac_srev,
 					ah->ah_phy_revision);
 
+	printk("VANET-DEBUG: RADIO: 0x%x, EE: 0x%x",
+		ah->ah_radio, ah->ah_ee_version);
 	if (!ah->ah_single_chip) {
 		/* Single chip radio (!RF5111) */
 		if (ah->ah_radio_5ghz_revision &&
@@ -2526,6 +2595,7 @@
 	struct ath_common *common = ath5k_hw_common(ah);
 	int ret, i;
 
+	printk("VANET-debug: %s\n", __func__);
 	mutex_lock(&ah->lock);
 
 	ATH5K_DBG(ah, ATH5K_DEBUG_RESET, "mode %d\n", ah->opmode);
@@ -2655,6 +2725,7 @@
 	bool fast;
 
 	ATH5K_DBG(ah, ATH5K_DEBUG_RESET, "resetting\n");
+	printk("VANET-debug: %s\n", __func__);
 
 	ath5k_hw_set_imr(ah, 0);
 	synchronize_irq(ah->irq);
@@ -2670,8 +2741,16 @@
 	 * so we should also free any remaining
 	 * tx buffers */
 	ath5k_drain_tx_buffs(ah);
-	if (chan)
+
+	/**
+	 * VANET-debug:XXX force set chan->center_freq to 5890MHz
+	 */
+	if (chan) {
+//		printk("VANET-debug: wanna center_freq = %u, but freq sticks to 5890MHz\n",
+//				chan->center_freq);
+//		chan->center_freq = 5890;/*VANET-debug*/
 		ah->curchan = chan;
+	}
 
 	fast = ((chan != NULL) && modparam_fastchanswitch) ? 1 : 0;
 
@@ -2728,6 +2807,7 @@
 	struct ath5k_hw *ah = container_of(work, struct ath5k_hw,
 		reset_work);
 
+	printk("VANET-debug: %s before reset\n", __func__);
 	mutex_lock(&ah->lock);
 	ath5k_reset(ah, NULL, true);
 	mutex_unlock(&ah->lock);
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/desc.c linux/drivers/net/wireless/ath/ath5k/desc.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/desc.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/desc.c	2013-04-11 13:59:13.173081899 +0800
@@ -249,6 +249,14 @@
 	txctl2 = AR5K_REG_SM(tx_tries0, AR5K_4W_TX_DESC_CTL2_XMIT_TRIES0);
 	txctl3 = tx_rate0 & AR5K_4W_TX_DESC_CTL3_XMIT_RATE0;
 
+#if 0
+	u32 rate_code = 0;
+	rate_code = txctl3 << 27;
+	rate_code = rate_code >> 27;
+	printk("VANET-DEBUG: tx_rate0=0x%x\t", tx_rate0);
+	printk("VANET-DEBUG: rate_code=0x%x\n", rate_code);
+#endif
+
 #define _TX_FLAGS(_c, _flag)					\
 	if (flags & AR5K_TXDESC_##_flag) {			\
 		txctl##_c |= AR5K_4W_TX_DESC_CTL##_c##_##_flag;	\
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/mac80211-ops.c linux/drivers/net/wireless/ath/ath5k/mac80211-ops.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/mac80211-ops.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/mac80211-ops.c	2013-04-11 13:59:12.859750265 +0800
@@ -195,7 +195,9 @@
 	mutex_lock(&ah->lock);
 
 	if (changed & IEEE80211_CONF_CHANGE_CHANNEL) {
+		printk("VANET-DEBUG: %s CHANNEL_SWITCH_START\n", __func__);
 		ret = ath5k_chan_set(ah, conf->channel);
+		printk("VANET-DEBUG: %s CHANNEL_SWITCH_FINISHED\n", __func__);
 		if (ret < 0)
 			goto unlock;
 	}
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/phy.c linux/drivers/net/wireless/ath/ath5k/phy.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/phy.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/phy.c	2013-04-11 13:59:12.719751022 +0800
@@ -1183,6 +1183,8 @@
 	data = data0 = data1 = data2 = 0;
 	c = channel->center_freq;
 
+	printk("VANET-DEBUG: %s Writing freq = %u to registers\n", __func__, c);
+
 	if (c < 4800) {
 		if (!((c - 2224) % 5)) {
 			data0 = ((2 * (c - 704)) - 3040) / 10;
@@ -3106,6 +3108,11 @@
 		if (rates[i] > 63)
 			rates[i] = 63;
 	}
+	printk("VANET-debug: %s ", __func__);
+	for(i=0; i < 8; i++)
+		printk("%u ", rates[i]);
+	printk("\n");
+	printk("VANET-debug: ah_txpower txp_offset=%d\n", ah->ah_txpower.txp_offset);
 
 	/* Min/max in 0.25dB units */
 	ah->ah_txpower.txp_min_pwr = 2 * rates[7];
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/qcu.c linux/drivers/net/wireless/ath/ath5k/qcu.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/qcu.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/qcu.c	2013-04-11 13:59:12.846417003 +0800
@@ -308,6 +308,7 @@
 
 	/* Constant bit rate period */
 	if (tq->tqi_cbr_period) {
+		printk("VANET-debug: %s set FRSHED CBR\n", __func__);
 		ath5k_hw_reg_write(ah, AR5K_REG_SM(tq->tqi_cbr_period,
 					AR5K_QCU_CBRCFG_INTVAL) |
 					AR5K_REG_SM(tq->tqi_cbr_overflow_limit,
diff -urN linux-3.2.4/drivers/net/wireless/ath/ath5k/reset.c linux/drivers/net/wireless/ath/ath5k/reset.c
--- linux-3.2.4/drivers/net/wireless/ath/ath5k/reset.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/drivers/net/wireless/ath/ath5k/reset.c	2013-04-11 13:59:12.653084717 +0800
@@ -1108,6 +1108,7 @@
 	 * go on. If it fails continue with a normal reset.
 	 */
 	if (fast) {
+		printk("VANET-DEBUG: %s FAST_CHANNEL_SWITCHING\n", __func__);
 		ret = ath5k_hw_phy_init(ah, channel, mode, true);
 		if (ret) {
 			ATH5K_DBG(ah, ATH5K_DEBUG_RESET,
diff -urN linux-3.2.4/.gitignore linux/.gitignore
--- linux-3.2.4/.gitignore	2012-02-04 04:39:51.000000000 +0800
+++ linux/.gitignore	2013-04-11 13:58:27.326663604 +0800
@@ -21,7 +21,9 @@
 *.i
 *.lst
 *.symtypes
+*.symvers
 *.order
+net/wireless/Module.symvers
 modules.builtin
 *.elf
 *.bin
@@ -46,6 +48,16 @@
 /Module.symvers
 
 #
+# After make source code, appear files below
+#
+security/tomoyo/
+
+#
+# Doc files
+#
+Documentation/
+
+#
 # Debian directory (make deb-pkg)
 #
 /debian/
diff -urN linux-3.2.4/include/linux/socket.h linux/include/linux/socket.h
--- linux-3.2.4/include/linux/socket.h	2012-02-04 04:39:51.000000000 +0800
+++ linux/include/linux/socket.h	2013-04-11 13:57:48.273541841 +0800
@@ -265,6 +265,10 @@
 #define MSG_NOSIGNAL	0x4000	/* Do not generate SIGPIPE */
 #define MSG_MORE	0x8000	/* Sender will send more */
 #define MSG_WAITFORONE	0x10000	/* recvmmsg(): block until 1+ packets avail */
+/*
+ * VANET: XXX
+ */
+#define MSG_VANET	0x20000 /* vanet msg, through special & fast process */
 
 #define MSG_EOF         MSG_FIN
 
diff -urN linux-3.2.4/include/net/ipv6.h linux/include/net/ipv6.h
--- linux-3.2.4/include/net/ipv6.h	2012-02-04 04:39:51.000000000 +0800
+++ linux/include/net/ipv6.h	2013-04-11 13:57:36.943603220 +0800
@@ -111,6 +111,73 @@
 
 #include <net/sock.h>
 
+/**
+ * VANET
+ */
+#define VANET_UNICAST_FORWARD 1
+#define VANET_MRT_FRESH_TIME 3 // HZ.
+			// ATTENSTION: suppose VANET safety messaging interval is 1 sec.
+#define VANET_IF_NAME "a5k0" // used in vanet-spec socket initial.
+#define VANET_IF_NAME_STR "a5k%d" // used in ieee80211_register_hw()
+/**
+ * Maximum data length, wlan's MTU correlate.
+ * The DATA means anything totally handed from application to socket layer. For raw socket,
+ * even though the data may contains lower layer header, like ICMP, IP, or IPv6 header,
+ * this maximum length is effective too.
+ */
+#define VANET_DATALEN_MAX 1440
+#define VANET_UC_HL_DEFAULT 4 // vanet unicast packet default hop limit.
+#define VANET_LL_RESERVED_SPACE 16 // see more in LL_RESERVED_SPACE.
+#define VN_MC_GRP_1 (0xFF050000)
+#define VN_MC_GRP_2 (0x0)
+#define VN_MC_GRP_3 (0x0)
+#define VN_MC_GRP_4 (0x37)
+#define VN_MC_GRP_4_T (0x39)
+#define VANET_BM_LEN 16 // *8 bits
+#define VANET_BM_TOTAL (VANET_BM_LEN*8)
+#define VANET_BM_INTERVAL 32
+#define VANET_BM_OP 80
+#define VANET_BM_OF (VANET_BM_TOTAL-VANET_BM_INTERVAL-1-VANET_BM_OP)
+#define VN_TIMEOUT 60 // HZ
+#define VN_HTLEN 97
+#define VN_HASH(a) (((a).s6_addr16[4] ^ (a).s6_addr16[5] ^ (a).s6_addr16[6] ^ (a).s6_addr16[7]) % VN_HTLEN)
+//#define VN_HASH(a) (0)
+
+struct vanet_node {
+	struct in6_addr addr;
+	struct vanet_node *next;
+	struct vn_htentry *hte;
+	unsigned long lvt;
+#define VANET_NODE_F_RELEASE 0x00000001
+	unsigned int flags;
+
+#if VANET_UNICAST_FORWARD
+	unsigned long mrt_update;
+	unsigned char mrt_via[ETH_ALEN];
+	u16 mrt_hl; //even though ipv6 header's hop_limit is u8, here we use u16
+#endif
+
+	unsigned char bitmap[VANET_BM_LEN];
+	unsigned char bitmap_t[VANET_BM_LEN];
+};
+
+struct vn_htentry {
+	spinlock_t lock;
+	struct vanet_node *first;
+	int count;
+};
+
+extern struct in6_addr vanet_mc_grp;
+extern struct in6_addr vanet_mc_grp_t;
+extern struct in6_addr vanet_self_lladdr;
+extern unsigned char vanet_hhd[ETH_HLEN];
+extern unsigned char vanet_hhd_t[ETH_HLEN];
+
+extern struct kmem_cache *vanet_node_cache __read_mostly;
+extern struct vn_htentry vn_hash_table[VN_HTLEN] __read_mostly;
+extern int vanet_ipv6_init(void);
+extern int vanet_uc_find_path(struct in6_addr *dest, void *path);
+
 /* sysctls */
 extern int sysctl_mld_max_msf;
 extern struct ctl_path net_ipv6_ctl_path[];
@@ -511,6 +578,23 @@
 						unsigned int flags,
 						int dontfrag);
 
+#if VANET_UNICAST_FORWARD
+extern int			ip6_append_data_vanet(struct sock *sk,
+						int getfrag(void *from, char *to, int offset, int len, int odd, struct sk_buff *skb),
+						void *from,
+						int length,
+						int transhdrlen,
+						int hlimit,
+						int tclass,
+						struct flowi6 *fl6,
+						unsigned int flags);
+
+extern int			ip6_local_out_vanet(struct sk_buff *skb);
+
+extern int			ip6_push_pending_frames_vanet(struct sock *sk, struct flowi6 *fl6,
+								int hl, int tc);
+#endif
+
 extern int			ip6_push_pending_frames(struct sock *sk);
 
 extern void			ip6_flush_pending_frames(struct sock *sk);
diff -urN linux-3.2.4/include/net/mac80211.h linux/include/net/mac80211.h
--- linux-3.2.4/include/net/mac80211.h	2012-02-04 04:39:51.000000000 +0800
+++ linux/include/net/mac80211.h	2013-04-11 13:57:36.843603761 +0800
@@ -1154,6 +1154,10 @@
 	IEEE80211_HW_SUPPORTS_PER_STA_GTK		= 1<<21,
 	IEEE80211_HW_AP_LINK_PS				= 1<<22,
 	IEEE80211_HW_TX_AMPDU_SETUP_IN_HW		= 1<<23,
+	/*
+	 * VANET: XXX add vanet specific flag
+	 */
+	IEEE80211_HW_VANET				= 1<<28,
 };
 
 /**
diff -urN linux-3.2.4/net/ipv6/addrconf.c linux/net/ipv6/addrconf.c
--- linux-3.2.4/net/ipv6/addrconf.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/addrconf.c	2013-04-11 13:56:46.113878589 +0800
@@ -599,8 +599,10 @@
 	if (addr_type == IPV6_ADDR_ANY ||
 	    addr_type & IPV6_ADDR_MULTICAST ||
 	    (!(idev->dev->flags & IFF_LOOPBACK) &&
-	     addr_type & IPV6_ADDR_LOOPBACK))
+	     addr_type & IPV6_ADDR_LOOPBACK)) {
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 		return ERR_PTR(-EADDRNOTAVAIL);
+	}
 
 	rcu_read_lock_bh();
 	if (idev->dead) {
@@ -1225,8 +1227,10 @@
 	}
 	rcu_read_unlock();
 
-	if (!hiscore->ifa)
+	if (!hiscore->ifa) {
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 		return -EADDRNOTAVAIL;
+	}
 
 	ipv6_addr_copy(saddr, &hiscore->ifa->addr);
 	in6_ifa_put(hiscore->ifa);
@@ -1241,6 +1245,7 @@
 	int err = -EADDRNOTAVAIL;
 
 	rcu_read_lock();
+	printk("VANET-debug: %s dev->name %s\n", __func__, dev->name);
 	idev = __in6_dev_get(dev);
 	if (idev) {
 		struct inet6_ifaddr *ifp;
@@ -1250,6 +1255,7 @@
 			if (ifp->scope == IFA_LINK &&
 			    !(ifp->flags & banned_flags)) {
 				ipv6_addr_copy(addr, &ifp->addr);
+				printk("VANET-debug: %s return 0\n", __func__);
 				err = 0;
 				break;
 			}
@@ -1257,6 +1263,9 @@
 		read_unlock_bh(&idev->lock);
 	}
 	rcu_read_unlock();
+	if (err == -EADDRNOTAVAIL)
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
+
 	return err;
 }
 
@@ -2172,6 +2181,8 @@
 
 err_exit:
 	rtnl_unlock();
+	if (err == -EADDRNOTAVAIL)
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return err;
 }
 
@@ -2287,6 +2298,7 @@
 		}
 	}
 	read_unlock_bh(&idev->lock);
+	printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return -EADDRNOTAVAIL;
 }
 
@@ -2532,6 +2544,7 @@
 		addrconf_add_linklocal(idev, &lladdr);
 		return 0;
 	}
+	printk("VANET-debug: %s get_lladdr failed\n", __func__);
 	return -1;
 }
 
@@ -2580,6 +2593,7 @@
 	struct inet6_dev *idev = __in6_dev_get(dev);
 	int run_pending = 0;
 	int err;
+	int i;
 
 	switch (event) {
 	case NETDEV_REGISTER:
@@ -2680,6 +2694,32 @@
 			if (dev->mtu < IPV6_MIN_MTU)
 				addrconf_ifdown(dev, 1);
 		}
+		/*
+		 * VANET: XXX device-specific initial stuffs.
+		 *
+		 */
+		printk("VANET-debug: %s dev->name is %s\n", __func__, dev->name);
+		if (!strcmp(dev->name, VANET_IF_NAME)) {
+			printk("VANET-debug: %s find vanet interface\n", __func__);
+			printk("VANET-debug: %s set mc_forwarding up\n", __func__);
+			dev_net(dev)->ipv6.devconf_all->mc_forwarding = 1;
+
+			ipv6_get_lladdr(dev, &vanet_self_lladdr, 0);
+			printk("VANET-debug: vanet_self_lladdr is ");
+			for (i=0; i<sizeof(vanet_self_lladdr); i++) {
+				printk("%2x", vanet_self_lladdr.s6_addr[i]);
+			}
+			printk("\n");
+			printk("VANET-debug: vanet wlan's HW addr is ");
+			for (i=0; i<ETH_ALEN-1; i++) {
+				printk("%2x:", dev->dev_addr[i]);
+			}
+			printk("%2x\n", dev->dev_addr[ETH_ALEN-1]);
+			memcpy(vanet_hhd+ETH_ALEN, dev->dev_addr, ETH_ALEN);
+			memcpy(vanet_hhd_t+ETH_ALEN, dev->dev_addr, ETH_ALEN);
+			printk("VANET-debug: ip6 vanet forward data inital completed\n");
+		}
+
 		break;
 
 	case NETDEV_CHANGEMTU:
@@ -3812,7 +3852,8 @@
 		dev = __dev_get_by_index(net, ifm->ifa_index);
 
 	ifa = ipv6_get_ifaddr(net, addr, dev, 1);
-	if (!ifa) {
+	if (!ifa) {		
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 		err = -EADDRNOTAVAIL;
 		goto errout;
 	}
diff -urN linux-3.2.4/net/ipv6/af_inet6.c linux/net/ipv6/af_inet6.c
--- linux-3.2.4/net/ipv6/af_inet6.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/af_inet6.c	2013-04-11 13:56:47.103873224 +0800
@@ -108,6 +108,9 @@
 	char answer_no_check;
 	int try_loading_module = 0;
 	int err;
+#if VANET_UNICAST_FORWARD
+	struct net_device *ndev;
+#endif
 
 	if (sock->type != SOCK_RAW &&
 	    sock->type != SOCK_DGRAM &&
@@ -205,6 +208,23 @@
 	np->pmtudisc	= IPV6_PMTUDISC_WANT;
 	np->ipv6only	= net->ipv6.sysctl.bindv6only;
 
+#if VANET_UNICAST_FORWARD
+	/**
+	 * VANET: TODO XXX FIXME when vanet device (a5k0) exits, all IPv6 socket would
+	 * have to be initialized as vanet-spec socket.
+	 * How could we normally use none-vanet device's IPv6 socket and IPv6
+	 * application when vanet device exits?
+	 */
+	ndev = dev_get_by_name(sk->sk_net, VANET_IF_NAME);
+	if (ndev) { // VANET: Have vanet interface, DO vanet-spec socket initial.
+		printk("VANET-debug: %s using vanet-spec socket config\n", __func__);
+		sk->sk_bound_dev_if = ndev->ifindex;
+		ipv6_addr_copy(&np->saddr, &vanet_self_lladdr);
+		np->hop_limit = VANET_UC_HL_DEFAULT;
+		dev_put(ndev);
+	}
+#endif
+
 	/* Init the ipv4 part of the socket since we can have sockets
 	 * using v6 API for ipv4.
 	 */
@@ -266,6 +286,7 @@
 	int addr_type = 0;
 	int err = 0;
 
+	printk("VANET-debug: %s\n", __func__);
 	/* If the socket has its own bind function then use it. */
 	if (sk->sk_prot->bind)
 		return sk->sk_prot->bind(sk, uaddr, addr_len);
@@ -313,6 +334,7 @@
 		    chk_addr_ret != RTN_LOCAL &&
 		    chk_addr_ret != RTN_MULTICAST &&
 		    chk_addr_ret != RTN_BROADCAST) {
+			printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 			err = -EADDRNOTAVAIL;
 			goto out;
 		}
@@ -350,6 +372,7 @@
 				if (!inet->transparent &&
 				    !ipv6_chk_addr(net, &addr->sin6_addr,
 						   dev, 0)) {
+					printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 					err = -EADDRNOTAVAIL;
 					goto out_unlock;
 				}
@@ -1193,6 +1216,7 @@
 	if (err)
 		goto sysctl_fail;
 #endif
+	err = vanet_ipv6_init();
 out:
 	return err;
 
diff -urN linux-3.2.4/net/ipv6/anycast.c linux/net/ipv6/anycast.c
--- linux-3.2.4/net/ipv6/anycast.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/anycast.c	2013-04-11 13:56:46.027212391 +0800
@@ -139,6 +139,8 @@
 	rcu_read_unlock();
 	if (pac)
 		sock_kfree_s(sk, pac, sizeof(*pac));
+	if (err == -EADDRNOTAVAIL) 
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return err;
 }
 
diff -urN linux-3.2.4/net/ipv6/datagram.c linux/net/ipv6/datagram.c
--- linux-3.2.4/net/ipv6/datagram.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/datagram.c	2013-04-11 13:56:46.343877342 +0800
@@ -51,6 +51,8 @@
 	int			addr_type;
 	int			err;
 
+	printk("VANET-debug: %s\n", __func__);
+
 	if (usin->sin6_family == AF_INET) {
 		if (__ipv6_only_sock(sk))
 			return -EAFNOSUPPORT;
@@ -677,7 +679,10 @@
 			}
 
 			if (fl6->flowlabel&IPV6_FLOWINFO_MASK) {
+				printk("VANET-debug: %s has already set flowlabel\n", __func__);
 				if ((fl6->flowlabel^*(__be32 *)CMSG_DATA(cmsg))&~IPV6_FLOWINFO_MASK) {
+					printk("VANET-debug: %s sendmsg's flowlabel differes from already one",
+							__func__);
 					err = -EINVAL;
 					goto exit_f;
 				}
diff -urN linux-3.2.4/net/ipv6/icmp.c linux/net/ipv6/icmp.c
--- linux-3.2.4/net/ipv6/icmp.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/icmp.c	2013-04-11 13:56:46.103878642 +0800
@@ -513,6 +513,112 @@
 }
 EXPORT_SYMBOL(icmpv6_send);
 
+#if VANET_UNICAST_FORWARD
+static int icmpv6_push_pending_frames_vanet(struct sock *sk, struct flowi6 *fl6,
+		struct icmp6hdr *thdr, int len, int hl, int tc)
+{
+	struct sk_buff *skb;
+	struct icmp6hdr *icmp6h;
+	int err = 0;
+
+	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)
+		goto out;
+
+	icmp6h = icmp6_hdr(skb);
+	memcpy(icmp6h, thdr, sizeof(struct icmp6hdr));
+	icmp6h->icmp6_cksum = 0;
+
+	if (skb_queue_len(&sk->sk_write_queue) == 1) {
+		skb->csum = csum_partial(icmp6h,
+					sizeof(struct icmp6hdr), skb->csum);
+		icmp6h->icmp6_cksum = csum_ipv6_magic(&fl6->saddr,
+						      &fl6->daddr,
+						      len, fl6->flowi6_proto,
+						      skb->csum);
+	} else {
+		struct sk_buff *skb;
+		err = -EOPNOTSUPP;
+
+		printk("VANET-error: %s has multi fragment, flushing\n", __func__);
+		while ((skb = __skb_dequeue_tail(&sk->sk_write_queue)) != NULL)
+			kfree_skb(skb);
+		goto out;
+	}
+
+	ip6_push_pending_frames_vanet(sk, fl6, hl, tc);
+
+out:
+	return err;
+}
+
+static void icmpv6_echo_reply_vanet(struct sk_buff *skb)
+{
+	struct net *net = dev_net(skb->dev);
+	struct sock *sk;
+	struct ipv6_pinfo *np;
+	const struct in6_addr *saddr = NULL;
+	struct icmp6hdr *icmph = icmp6_hdr(skb);
+	struct icmp6hdr tmp_hdr;
+	struct flowi6 fl6;
+	struct icmpv6_msg msg;
+	int err = 0;
+	int hlimit;
+
+	saddr = &ipv6_hdr(skb)->daddr;
+
+	memcpy(&tmp_hdr, icmph, sizeof(tmp_hdr));
+	tmp_hdr.icmp6_type = ICMPV6_ECHO_REPLY;
+
+	memset(&fl6, 0, sizeof(fl6));
+	fl6.flowi6_proto = IPPROTO_ICMPV6;
+	ipv6_addr_copy(&fl6.daddr, &ipv6_hdr(skb)->saddr);
+	if (saddr)
+		ipv6_addr_copy(&fl6.saddr, saddr);
+	fl6.flowi6_oif = skb->dev->ifindex;
+	if (!fl6.flowi6_oif)
+		printk("VANET-debug: %s oif = 0\n", __func__);
+	fl6.fl6_icmp_type = ICMPV6_ECHO_REPLY;
+
+	sk = icmpv6_xmit_lock(net);
+	if (sk == NULL)
+		return;
+	np = inet6_sk(sk);
+
+	if (!fl6.flowi6_oif && ipv6_addr_is_multicast(&fl6.daddr))
+		fl6.flowi6_oif = np->mcast_oif;
+
+	if (ipv6_addr_is_multicast(&fl6.daddr))
+		hlimit = np->mcast_hops;
+	else
+		hlimit = np->hop_limit;
+	/* VANET: set echo reply's hop-limit to vanet-spec value. */
+	if (hlimit < 0 || hlimit > 10) { // 10 hop is too far...
+		hlimit = VANET_UC_HL_DEFAULT;
+	}
+
+	msg.skb = skb;
+	msg.offset = 0;
+	msg.type = ICMPV6_ECHO_REPLY;
+
+	err = ip6_append_data_vanet(sk, icmpv6_getfrag, &msg,
+			skb->len + sizeof(struct icmp6hdr),
+			sizeof(struct icmp6hdr), hlimit, np->tclass, &fl6,
+			MSG_DONTWAIT);
+	if (err) {
+		struct sk_buff *skb;
+//		printk("VANET-debug: %s flush pending frames\n", __func__);
+		while ((skb = __skb_dequeue_tail(&sk->sk_write_queue)) != NULL)
+			kfree_skb(skb);
+	} else {
+		err = icmpv6_push_pending_frames_vanet(sk, &fl6, &tmp_hdr,
+				skb->len + sizeof(struct icmp6hdr), hlimit,
+				np->tclass);
+	}
+
+	icmpv6_xmit_unlock(sk);
+}
+#endif
+
 static void icmpv6_echo_reply(struct sk_buff *skb)
 {
 	struct net *net = dev_net(skb->dev);
@@ -698,7 +804,11 @@
 
 	switch (type) {
 	case ICMPV6_ECHO_REQUEST:
+#if VANET_UNICAST_FORWARD
+		icmpv6_echo_reply_vanet(skb);
+#else
 		icmpv6_echo_reply(skb);
+#endif
 		break;
 
 	case ICMPV6_ECHO_REPLY:
diff -urN linux-3.2.4/net/ipv6/inet6_hashtables.c linux/net/ipv6/inet6_hashtables.c
--- linux-3.2.4/net/ipv6/inet6_hashtables.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/inet6_hashtables.c	2013-04-11 13:56:45.997212553 +0800
@@ -282,6 +282,7 @@
 
 not_unique:
 	spin_unlock(lock);
+	printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return -EADDRNOTAVAIL;
 }
 
diff -urN linux-3.2.4/net/ipv6/ip6_input.c linux/net/ipv6/ip6_input.c
--- linux-3.2.4/net/ipv6/ip6_input.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/ip6_input.c	2013-04-11 13:56:45.570548197 +0800
@@ -55,12 +55,72 @@
 	return dst_input(skb);
 }
 
+#if VANET_UNICAST_FORWARD
+/*
+ * VANET: unicast packet forward
+ * return value is based on dev_queue_xmit() or NET_RX_DROP.
+ */
+int ip6_uc_forward_vanet(struct sk_buff *skb, struct net_device *dev)
+{
+	struct ipv6hdr *ipv6h;
+	int err;
+
+//	printk("VANET-debug: %s\n", __func__);
+	ipv6h = ipv6_hdr(skb);
+
+	if (ipv6h->hop_limit <= 1) {
+		printk("VANET-debug: %s hop_limit less than 1, DROP\n", __func__);
+		goto out_free;
+	}
+	// TODO FIXME: since skb->len contains IPv6 header's length, can not compare with
+	// VANET_DATALEN_MAX directly.
+	if (skb->len > VANET_DATALEN_MAX) {
+		printk("VANET-debug: %s MTU(%d) exceed, DROP\n", __func__, VANET_DATALEN_MAX);
+		goto out_free;
+	}
+	/**
+	 * VANET: TODO XXX make sure skb's headroom is big enough, and do not need reallocating
+	 * frequently to improve performance.
+	 */
+	if (skb_cow(skb, sizeof(*ipv6h) + LL_RESERVED_SPACE(skb->dev))) {
+		printk("VANET-debug: %s skb_cow failed, need to DROP\n", __func__);
+		goto out_free;
+	}
+
+	ipv6h = ipv6_hdr(skb);
+	ipv6h->hop_limit--;
+	skb->protocol = htons(ETH_P_IPV6);
+	IP6CB(skb)->flags |= IP6SKB_FORWARDED;
+
+	memcpy(skb->data - ETH_HLEN, vanet_hhd, ETH_HLEN);
+	skb_push(skb, ETH_HLEN);
+
+	err = vanet_uc_find_path(&ipv6h->daddr, skb->data);
+	if (err == 0)
+		return dev_queue_xmit(skb);
+
+	/*
+	 * VANET: TODO XXX for (err != 0) which means find path failed, this packet will be
+	 * dropped silently. Need informing the sender of the packet?
+	 */
+out_free:
+	kfree_skb(skb);
+	return NET_RX_DROP;
+}
+#endif
+
 int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
 {
 	const struct ipv6hdr *hdr;
 	u32 		pkt_len;
 	struct inet6_dev *idev;
 	struct net *net = dev_net(skb->dev);
+#if VANET_UNICAST_FORWARD
+	static int addrtype;
+#endif
+#if 0 //debug information for PowerPC
+	int i;
+#endif
 
 	if (skb->pkt_type == PACKET_OTHERHOST) {
 		kfree_skb(skb);
@@ -99,6 +159,16 @@
 
 	hdr = ipv6_hdr(skb);
 
+#if 0 //debug information for PowerPC
+	printk("VANET-debug: %s DA<", __func__);
+	for (i=0; i<16; i++)
+		printk("%2x", hdr->daddr.s6_addr[i]);
+	printk(">\tSA<");
+	for (i=0; i<16; i++)
+		printk("%2x", hdr->saddr.s6_addr[i]);
+	printk(">\n");
+#endif
+
 	if (hdr->version != 6)
 		goto err;
 
@@ -151,6 +221,15 @@
 	/* Must drop socket now because of tproxy. */
 	skb_orphan(skb);
 
+#if VANET_UNICAST_FORWARD
+	addrtype = ipv6_addr_type(&hdr->daddr);
+	if (!ipv6_addr_equal(&vanet_self_lladdr, &hdr->daddr) &&
+			(addrtype & IPV6_ADDR_LINKLOCAL) &&
+			!(addrtype & IPV6_ADDR_MULTICAST)) { //VANET: XXX FF02:xxx is LINKLOCAL
+		return ip6_uc_forward_vanet(skb, dev);
+	}
+#endif
+
 	return NF_HOOK(NFPROTO_IPV6, NF_INET_PRE_ROUTING, skb, dev, NULL,
 		       ip6_rcv_finish);
 err:
@@ -248,6 +327,480 @@
 		       ip6_input_finish);
 }
 
+/*
+ * VANET: safety multicast packets fast forward
+ */
+struct in6_addr vanet_mc_grp;
+struct in6_addr vanet_mc_grp_t;
+struct in6_addr vanet_self_lladdr;
+unsigned char vanet_hhd[ETH_HLEN];
+unsigned char vanet_hhd_t[ETH_HLEN];
+
+struct kmem_cache *vanet_node_cache __read_mostly;
+struct vn_htentry vn_hash_table[VN_HTLEN] __read_mostly;
+
+/*
+ * Under spin_lock_bh of hte, run as fast as we can!
+ */
+static inline struct vanet_node *
+vanet_find_node_release(struct vn_htentry *htep, struct in6_addr *addr, struct vanet_node **release)
+{
+	struct vanet_node *np, *npp, *temp;
+	if (htep->count < 0) {
+		printk("VANET-debug: %s FATAL ERROR\n", __func__);
+		/*
+		 * VANET: FIXME TODO what can we do, poor man!
+		 */
+		return NULL;
+	}
+	for (np=htep->first, npp=NULL; np!=NULL; ) {
+		if (ipv6_addr_equal(&np->addr, addr)) {
+			return np;
+		} else {
+			if (time_before(np->lvt, jiffies - HZ * VN_TIMEOUT)) { //timeout
+				if (npp == NULL) { //np is the first in mostly situation
+					htep->first = np->next;
+					htep->count --;
+					np->flags |= VANET_NODE_F_RELEASE;
+					np->next = NULL;
+					if (*release == NULL) {
+						*release = np;
+					} else {
+						for (temp=(*release); temp->next!=NULL; temp=temp->next)
+							;
+						temp->next = np;
+					}
+					np = htep->first;
+				} else {
+					npp->next = np->next;
+					htep->count --;
+					np->flags |= VANET_NODE_F_RELEASE;
+					np->next = NULL;
+					if (*release != NULL) {
+						for (temp=(*release); temp->next!=NULL; temp=temp->next)
+							;
+						temp->next = np;
+					} else {
+						*release = np;
+					}
+					np = npp->next;
+				}
+			} else {
+				npp = np;
+				np = np->next;
+			}
+		}
+	}
+
+	return NULL;
+}
+
+static inline struct vanet_node *
+vanet_find_node_fast(struct vn_htentry *hte, struct in6_addr *addr)
+{
+	struct vanet_node *np;
+	for (np=hte->first; np!=NULL; np=np->next) {
+		if (ipv6_addr_equal(&np->addr, addr))
+			return np;
+	}
+
+	return NULL;
+}
+
+static inline int
+vanet_add_node(struct vn_htentry *hte, struct vanet_node *vn)
+{
+	vn->next = hte->first;
+	hte->first = vn;
+	hte->count++;
+	printk("VANET-debug: %s hte count[%d] first<0x%p>, vn<0x%p>, vnext<0x%p>\n",
+			__func__, hte->count, hte->first, vn, vn->next);
+	return 0;
+}
+
+static inline int
+vanet_check_packet_id(struct vanet_node *vn, u32 id, int txt)
+{
+	unsigned char *bm;
+	int sf, sp, i;
+
+	if (txt == 0) {
+		bm = vn->bitmap;
+	} else {
+		bm = vn->bitmap_t;
+	}
+
+	/*
+	 * vanet bitmap only take care VANET_BM_TOTAL packet in a period of time,
+	 * wrap the id.
+	 */
+	id = id % VANET_BM_TOTAL;
+
+	/*
+	 * have forwarded this packet and fast return.
+	 */
+	if (bm[id/8] & (1<<(id%8)))
+		return 1;
+
+	/*
+	 * First of all, set up corresponding bit.
+	 */
+	bm[id/8] |= (1<<(id%8));
+
+	/*
+	 * Then, mask out protection interval
+	 */
+	sf = id + VANET_BM_OF + 1;
+	sp = id + VANET_BM_TOTAL -VANET_BM_OP - 1;
+	/*
+	 * Since VANET_BM_INTERVAL is fixed, we can divide sub-situation specifically
+	 */
+#if (VANET_BM_INTERVAL > 8)
+	for (i=(sf/8+1); i<(sp/8); i++)
+		memset(&bm[i%VANET_BM_LEN], 0, sizeof(unsigned char));
+	bm[(sf/8)%VANET_BM_LEN] &= ((1<<(sf%8))-1);
+	bm[(sp/8)%VANET_BM_LEN] &= (~((1<<(sp%8+1))-1));
+#else
+	if ((sf/8)%VANET_BM_LEN == (sp/8)%VANET_BM_LEN) {
+		bm[(sf/8)%VANET_BM_LEN] &= (((1<<(sf%8))-1) | (~((1<<(sp%8+1))-1)));
+	} else {
+		bm[(sf/8)%VANET_BM_LEN] &= ((1<<(sf%8))-1);
+		bm[(sp/8)%VANET_BM_LEN] &= (~((1<<(sp%8+1))-1));
+	}
+#endif
+
+	return 0;
+}
+
+#if VANET_UNICAST_FORWARD
+/*
+ * VANET: main forwarding procedure of unicast packet
+ * return 0, find path and copy it's MAC address to path;
+ * return -1, do not find path.
+ */
+int vanet_uc_find_path(struct in6_addr *dest, void *path)
+{
+	struct vn_htentry *htep;
+	struct vanet_node *vnp;
+
+	htep = &vn_hash_table[VN_HASH(*dest)];
+
+	spin_lock_bh(&htep->lock);
+	vnp = vanet_find_node_fast(htep, dest);
+	if (vnp != NULL) {
+		memcpy(path, vnp->mrt_via, ETH_ALEN);
+		spin_unlock_bh(&htep->lock);
+//		printk("VANET-debug: %s find next hop\n", __func__);
+		return 0;
+	} else {
+		spin_unlock_bh(&htep->lock);
+		printk("VANET-debug: %s DO NOT find next hop\n", __func__);
+		return -1;
+	}
+}
+#endif
+
+/*
+ * VANET: XXX check multicast packet duplicated?
+ * return 0, if not forward this packet yet;
+ * return 1, have forward this packet.
+ */
+int vanet_check_mc_dup(struct sk_buff *skb, int txt)
+{
+	int ret = 0;
+	struct ipv6hdr *ipv6h;
+#if VANET_UNICAST_FORWARD
+	struct ethhdr *ethh;
+#endif
+	struct vn_htentry *htep;
+	struct vanet_node *vnp, *vnp2, *release;
+	u32 id;
+	unsigned char *fl;
+	int i;
+
+	ipv6h = ipv6_hdr(skb);
+#if VANET_UNICAST_FORWARD
+	ethh = eth_hdr(skb);
+#endif
+	fl = ipv6h->flow_lbl;
+	/*
+	 * VANET: XXX __BIG_ENDIAN and __BIG_ENDIAN_BITFIELD in
+	 * x86 and PowerPC.
+	 */
+#if defined(__LITTLE_ENDIAN_BITFIELD) //x86
+//	printk("VANET-debug: %s (LE BITFIELD) fl[0] = 0x%x\n",
+//			__func__, fl[0]);
+#elif defined(__BIG_ENDIAN_BITFIELD) //PowerPC
+//	printk("VANET-debug: %s (BE BITFIELD) fl[0] = 0x%x\n",
+//			__func__, fl[0]);
+#else
+#error	"Not define __XXX_ENDIAN_BITFIELD"
+#endif
+	id = ((fl[0] & 0xf) << 16) + (fl[1] << 8) + fl[2];
+
+#if 0
+	printk("VANET-debug: %s node<", __func__);
+	for (i=0; i<sizeof(struct in6_addr); i++) {
+		printk("%2x", ipv6h->saddr.s6_addr[i]);
+	}
+	printk(">\tid<%u>\n", id);
+#endif
+
+	htep = &vn_hash_table[VN_HASH(ipv6h->saddr)];
+	release = NULL;
+
+	spin_lock_bh(&htep->lock);
+	vnp = vanet_find_node_release(htep, &ipv6h->saddr, &release);
+	spin_unlock_bh(&htep->lock);
+
+	if (release != NULL) {
+		printk("VANET-debug: %s releasing node on hte[%d]\n",
+				__func__, VN_HASH(ipv6h->saddr));
+		for (vnp2=release; vnp2!=NULL; vnp2=vnp2->next) {
+			printk("VANET-debug: %s RELEASE node<", __func__);
+			for (i=0; i<sizeof(struct in6_addr); i++)
+				printk("%2x", vnp2->addr.s6_addr[i]);
+			printk(">\n");
+			kmem_cache_free(vanet_node_cache, vnp2);
+		}
+	}
+
+	/*
+	 * VANET: XXX TODO BUG: during this lock gap vnp may be released!
+	 */
+
+	if (vnp != NULL) { // found node
+		spin_lock_bh(&htep->lock);
+		vnp->lvt = jiffies;
+		ret = vanet_check_packet_id(vnp, id, txt);
+		spin_unlock_bh(&htep->lock);
+	} else { // add node
+		printk("VANET-debug: DO NOT FIND node\n");
+		vnp2 = (struct vanet_node *)kmem_cache_alloc(vanet_node_cache,
+								GFP_ATOMIC);
+		if (vnp2 == NULL) {
+			/*
+			 * Cannot alloc memory immediately, forward packet unconditionally
+			 */
+			printk("VANET-debug: %s alloc vanet_node failed\n", __func__);
+			return 0;
+		}
+		memset(vnp2, 0, sizeof(struct vanet_node));
+		memcpy(&vnp2->addr, &ipv6h->saddr, sizeof(struct in6_addr));
+		vnp2->next = NULL;
+		vnp2->hte = htep;
+
+		spin_lock_bh(&htep->lock);
+		/**
+		 * VANET: TODO re-finding is not needed in NON-SMP while under big lock.
+		 */
+		vnp = vanet_find_node_fast(htep, &ipv6h->saddr);
+		if (vnp == NULL) { // add node can proceed
+			vnp2->lvt = jiffies;
+			ret = vanet_check_packet_id(vnp2, id, txt);
+			vanet_add_node(htep, vnp2);
+			vnp = vnp2;
+			spin_unlock_bh(&htep->lock);
+			printk("VANET-debug: ADD node<");
+			for (i=0; i<sizeof(struct in6_addr); i++)
+				printk("%2x", vnp2->addr.s6_addr[i]);
+			printk(">\n");
+		} else { // during former process, node is added by other's
+			vnp->lvt = jiffies;
+			ret = vanet_check_packet_id(vnp, id, txt);
+			spin_unlock_bh(&htep->lock);
+			kmem_cache_free(vanet_node_cache, vnp2);
+			printk("VANET-debug: WARNING other process has added this node\n");
+		}
+	}
+
+	/**
+	 * If packet has not yet forwarded(ret == 0), which means I am first receiving this
+	 * vanet node's packet <id> VANET Safety Message.
+	 * Using this packet's info to build & update vanet's Messaging Relation Table (MRT).
+	 * MRT is embedded in vanet_node hash table.
+	 */
+	/**
+	 * VANET: TODO vanet_unicast_forward's code is a mess, need tuning.
+	 */
+#if VANET_UNICAST_FORWARD
+//	printk("VANET-debug: %s generating or updating vanet MRT\n", __func__);
+	if (ret == 0) {
+		spin_lock_bh(&htep->lock);
+		if ((ipv6h->hop_limit > vnp->mrt_hl) || (vnp->mrt_hl == 0)) { // find better via or new node
+			vnp->mrt_update = jiffies;
+			vnp->mrt_hl = ipv6h->hop_limit;
+			memcpy(vnp->mrt_via, ethh->h_source, ETH_ALEN);
+		} else {
+			if (time_before(vnp->mrt_update, jiffies - HZ * VANET_MRT_FRESH_TIME)) { // old
+				vnp->mrt_update = jiffies;
+				vnp->mrt_hl = ipv6h->hop_limit;
+				memcpy(vnp->mrt_via, ethh->h_source, ETH_ALEN);
+			} else { // fresh
+				if ((!memcmp(vnp->mrt_via, ethh->h_source, ETH_ALEN)) &&
+							(vnp->mrt_hl == ipv6h->hop_limit)) {
+					vnp->mrt_update = jiffies;
+				}
+			}
+		}
+		spin_unlock_bh(&htep->lock);
+
+#if 0
+		printk("VANET-debug: %s VIA<", __func__);
+		for (i=0; i<ETH_ALEN-1; i++)
+			printk("%2x:", vnp->mrt_via[i]);
+		printk("%2x>\tHOP_LIMIT<%u>\tTIME<%lu>\n", vnp->mrt_via[ETH_ALEN-1],
+						vnp->mrt_hl, vnp->mrt_update);
+#endif
+	}
+#endif
+
+	return ret;
+}
+
+/*
+ * VANET: init in ipv6 module's normal path
+ */
+int __init vanet_ipv6_init(void)
+{
+	int i;
+	printk("VANET-debug: %s\n", __func__);
+
+	/*
+	 * VANET: TODO (add configuration interface) notice BE & LE,
+	 * VN_MC_GRP's value is now stored in net/ipv6.h temporarily.
+	 */
+	ipv6_addr_set(&vanet_mc_grp, __cpu_to_be32(VN_MC_GRP_1),
+				     __cpu_to_be32(VN_MC_GRP_2),
+				     __cpu_to_be32(VN_MC_GRP_3),
+				     __cpu_to_be32(VN_MC_GRP_4));
+	// For broadcast text message.
+	ipv6_addr_set(&vanet_mc_grp_t, __cpu_to_be32(VN_MC_GRP_1),
+				     __cpu_to_be32(VN_MC_GRP_2),
+				     __cpu_to_be32(VN_MC_GRP_3),
+				     __cpu_to_be32(VN_MC_GRP_4_T));
+	printk("VANET-debug: vanet_mc_grp address is ");
+	for (i=0; i<sizeof(struct in6_addr); i++) {
+		printk("%2x", vanet_mc_grp.s6_addr[i]);
+	}
+	printk("\n");
+	printk("VANET-debug: vanet_mc_grp_t address is ");
+	for (i=0; i<sizeof(struct in6_addr); i++) {
+		printk("%2x", vanet_mc_grp_t.s6_addr[i]);
+	}
+	printk("\n");
+	ipv6_eth_mc_map(&vanet_mc_grp, vanet_hhd);
+	ipv6_eth_mc_map(&vanet_mc_grp_t, vanet_hhd_t);
+	// vanet_hhd's source mac address is completed in addrconf_notify()
+	/*
+	 * VANET: ipv6 in ethernet prototype is 0x86dd
+	 */
+	vanet_hhd[ETH_HLEN-2] = 0x86;
+	vanet_hhd[ETH_HLEN-1] = 0xdd;
+	vanet_hhd_t[ETH_HLEN-2] = 0x86;
+	vanet_hhd_t[ETH_HLEN-1] = 0xdd;
+
+	/*
+	 * Slub initial
+	 */
+	vanet_node_cache = kmem_cache_create("vanet_node_cache",
+			sizeof(struct vanet_node), 0, 0, NULL);
+
+	if (vanet_node_cache == NULL) {
+		/*
+		 * VANET: TODO XXX how to deal with this tough situation?
+		 */
+		printk("VANET-debug: %s ERROR create vanet_node_cache failed\n", __func__);
+	}
+
+	/*
+	 * Hash table initial
+	 */
+	for (i=0; i<VN_HTLEN; i++) {
+		spin_lock_init(&vn_hash_table[i].lock);
+		vn_hash_table[i].count = 0;
+		vn_hash_table[i].first = NULL;
+	}
+
+	return 0;
+}
+
+/*
+ * VANET: XXX specific multicast process
+ *                      Powered by Vanet
+ */
+int ip6_mc_fast_forward(struct sk_buff *skb)
+{
+	struct ipv6hdr *ipv6h;
+	static int txt;
+
+	ipv6h = ipv6_hdr(skb);
+
+	if (ipv6h->hop_limit <= 1) {
+//		printk("VANET-debug: %s hop_limit less than 1, DROP\n", __func__);
+		goto out_free;
+	}
+
+	// VANET: FIXME XXX Hardcode 0x37 and 0x39 are not good
+	if (ipv6h->daddr.s6_addr[15] == 0x37) { // normal Vehicle Security Message
+		txt = 0;
+	} else if (ipv6h->daddr.s6_addr[15] == 0x39) { // text message
+		txt = 1;
+	} else {
+		printk("VANET-error: %s unknown multicast address\n", __func__);
+		goto out_free;
+	}
+
+	/*
+	 * VANET: XXX key process, check duplication of forwarded packet
+	 */
+	if (vanet_check_mc_dup(skb, txt)) {
+//		printk("VANET-debug: %s packet has been forward, DROP\n", __func__);
+		goto out_free;
+	}
+
+	/*
+	 * VANET: XXX after skb_cow, skb's header is changed, any pointing value
+	 * point to skb's header SHOULD be revalued.
+	 * 	  TODO XXX make sure skb's headroom is big enough, and avoiding
+	 * reallocating frequently.
+	 */
+	if (skb_cow(skb, sizeof(*ipv6h)+LL_RESERVED_SPACE(skb->dev))) {
+		printk("VANET-debug: skb_cow failed, need to drop\n");
+		goto out_free;
+	}
+	ipv6h = ipv6_hdr(skb);
+
+	ipv6h->hop_limit--;
+	IP6CB(skb)->flags |= IP6SKB_FORWARDED;
+
+	/**
+	 * VANET: TODO FIXME skb->len contains IPv6 header's length
+	 */
+	if (skb->len > VANET_DATALEN_MAX) {
+		printk("VANET-debug: %s MTU(%d) exceed, DROP\n", __func__, VANET_DATALEN_MAX);
+		goto out_free;
+	}
+
+	skb->protocol = htons(ETH_P_IPV6);
+	/*
+	 * VANET: XXX pay attention to vanet_hhd, it's fixed Ethernet Header for 
+	 * all IPv6 multicast packet
+	 */
+	if (txt == 0)
+		memcpy(skb->data-ETH_HLEN, vanet_hhd, ETH_HLEN);
+	else
+		memcpy(skb->data-ETH_HLEN, vanet_hhd_t, ETH_HLEN);
+
+	skb_push(skb, ETH_HLEN);
+
+	return dev_queue_xmit(skb);
+
+out_free:
+	kfree_skb(skb);
+	return 0;
+}
+
 int ip6_mc_input(struct sk_buff *skb)
 {
 	const struct ipv6hdr *hdr;
@@ -260,6 +813,16 @@
 	hdr = ipv6_hdr(skb);
 	deliver = ipv6_chk_mcast_addr(skb->dev, &hdr->daddr, NULL);
 
+	/*
+	 * VANET: XXX free self-generated packet, and loopback is now disabled
+	 * even though it is setted.
+	 */
+	if (deliver && ipv6_addr_equal(&vanet_self_lladdr, &hdr->saddr)) {
+//		printk("VANET-debug: %s self-generated packet, DROP\n", __func__);
+		kfree_skb(skb);
+		return 0;
+	}
+
 #ifdef CONFIG_IPV6_MROUTE
 	/*
 	 *      IPv6 multicast router mode is now supported ;)
@@ -282,6 +845,8 @@
 			u8 nexthdr = hdr->nexthdr;
 			int offset;
 
+			printk("VANET-debug: %s check for MLD\n", __func__);
+
 			/* Check if the value of Router Alert
 			 * is for MLD (0x0000).
 			 */
@@ -327,13 +892,34 @@
 		}
 
 		if (skb2) {
-			ip6_mr_input(skb2);
+			struct ipv6hdr *ipv6h;
+			int i;
+
+			ipv6h = ipv6_hdr(skb2);
+			if (ipv6_addr_equal(&vanet_mc_grp, &ipv6h->daddr) ||
+			    ipv6_addr_equal(&vanet_mc_grp_t, &ipv6h->daddr)) {
+				/*
+				 * VANET: process start point
+				 */
+				ip6_mc_fast_forward(skb2);
+			} else {
+				printk("VANET-debug: %s not vanet addr\n", __func__);
+				printk("VANET-debug: skb's daddr is ");
+				for (i=0; i<16; i++) printk("%2x", ipv6h->daddr.s6_addr[i]);
+				printk("\n");
+
+				ip6_mr_input(skb2);
+			}
 		}
 	}
 out:
 #endif
-	if (likely(deliver))
+	if (likely(deliver)) {
+#if 0 //debug information for PowerPC
+		printk("VANET-debug: %s deliver to host stack\n", __func__);
+#endif
 		ip6_input(skb);
+	}
 	else {
 		/* discard */
 		kfree_skb(skb);
diff -urN linux-3.2.4/net/ipv6/ip6_output.c linux/net/ipv6/ip6_output.c
--- linux-3.2.4/net/ipv6/ip6_output.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/ip6_output.c	2013-04-11 13:56:45.873879887 +0800
@@ -83,6 +83,160 @@
 }
 EXPORT_SYMBOL_GPL(ip6_local_out);
 
+#if VANET_UNICAST_FORWARD
+
+int ip6_append_data_vanet(struct sock *sk, int getfrag(void *from, char *to,
+		int offset, int len, int odd, struct sk_buff *skb),
+		void *from, int length, int transhdrlen, int hlimit,
+		int tclass, struct flowi6 *fl6, unsigned int flags)
+{
+	struct sk_buff *skb;
+	int hh_len, alloclen;
+	int err;
+	int csummode = CHECKSUM_NONE;
+	__u8 tx_flags = 0;
+	char *data;
+	int datalen = length - transhdrlen;
+
+	if (flags & MSG_PROBE)
+		printk("VANET-warning: %s MSG_PROBE not supported\n", __func__);
+
+	if (!skb_queue_empty(&sk->sk_write_queue)) {
+		printk("VANET-debug: %s sk_write_queue is not empty, error\n", __func__);
+		return -EINVAL;
+	}
+
+	hh_len = VANET_LL_RESERVED_SPACE;
+
+	if (sk->sk_type == SOCK_DGRAM) {
+		err = sock_tx_timestamp(sk, &tx_flags);
+		if (err)
+			return err;
+	}
+
+	alloclen = length + sizeof(struct ipv6hdr) + sizeof(struct frag_hdr);
+#if 0
+	printk("VANET-debug: %s sk_buff alloclen is %d, noblock is false\n",
+			__func__, alloclen);
+#endif
+	skb = sock_alloc_send_skb(sk, alloclen + hh_len, (flags & MSG_DONTWAIT), &err);
+	if (skb == NULL)
+		return err;
+	skb->ip_summed = csummode;
+	skb->csum = 0;
+	skb_reserve(skb, hh_len + sizeof(struct frag_hdr));
+
+	if (sk->sk_type == SOCK_DGRAM)
+		skb_shinfo(skb)->tx_flags = tx_flags;
+
+	data = skb_put(skb, length + sizeof(struct ipv6hdr));
+	skb_set_network_header(skb, 0);
+	data += sizeof(struct ipv6hdr);
+	skb->transport_header = skb->network_header + sizeof(struct ipv6hdr);
+
+	if (getfrag(from, data+transhdrlen, 0, datalen, 0, skb) < 0) {
+		printk("VANET-debug: %s getfrag failed\n", __func__);
+		kfree_skb(skb);
+		return -EFAULT;
+	}
+	__skb_queue_tail(&sk->sk_write_queue, skb);
+
+	return 0;
+}
+
+int ip6_local_out_vanet(struct sk_buff *skb)
+{
+	int len;
+	struct ipv6hdr *ipv6h;
+	int err;
+#if 0
+	int i;
+#endif
+
+	ipv6h = ipv6_hdr(skb);
+	len = skb->len - sizeof(struct ipv6hdr);
+	ipv6h->payload_len = htons(len);
+
+	skb->protocol = htons(ETH_P_IPV6);
+
+	/*
+	 * VANET: XXX unicast packet get hardware header (MAC header)
+	 */
+	memcpy(skb->data-ETH_HLEN, vanet_hhd, ETH_HLEN);
+	skb_push(skb, ETH_HLEN);
+	err = vanet_uc_find_path(&ipv6h->daddr, skb->data);
+#if 0 // uc local out debug
+	printk("VANET-debug: %s dst addr <", __func__);
+	for (i=0; i<sizeof(struct in6_addr) - 1; i++)
+		printk("%2x:", ipv6h->daddr.s6_addr[i]);
+	printk("%2x>\n", ipv6h->daddr.s6_addr[i]);
+	printk("VANET-debug: %s src addr <", __func__);
+	for (i=0; i<sizeof(struct in6_addr) - 1; i++)
+		printk("%2x:", ipv6h->saddr.s6_addr[i]);
+	printk("%2x>\n", ipv6h->saddr.s6_addr[i]);
+	printk("VANET-debug: %s dst maddr <", __func__);
+	for (i=0; i<ETH_ALEN; i++)
+		printk("%2x ", skb->data[i]);
+	printk(">\n");
+	printk("VANET-debug: %s src maddr <", __func__);
+	for (i=0; i<ETH_ALEN; i++)
+		printk("%2x ", skb->data[i+ETH_ALEN]);
+	printk(">\n");
+#endif
+	if (err == 0)
+		return dev_queue_xmit(skb);
+	else {
+		kfree_skb(skb);
+		return 0;
+	}
+}
+
+int ip6_push_pending_frames_vanet(struct sock *sk, struct flowi6 *fl6, int hl, int tc)
+{
+	struct sk_buff *skb;
+	struct ipv6_pinfo *np = inet6_sk(sk);
+	struct net *net = sock_net(sk);
+	struct ipv6hdr *hdr;
+	struct net_device *ndev;
+	unsigned char proto = fl6->flowi6_proto;
+	int err = 0;
+
+	if ((skb = __skb_dequeue(&sk->sk_write_queue)) == NULL)
+		return err;
+
+	if (np->pmtudisc < IPV6_PMTUDISC_DO)
+		skb->local_df = 1;
+
+	hdr = ipv6_hdr(skb);
+	*(__be32 *)hdr = fl6->flowlabel | htonl(0x60000000 | ((int)tc << 20));
+	hdr->hop_limit = hl & 0xff;
+	hdr->nexthdr = proto;
+	ipv6_addr_copy(&hdr->saddr, &fl6->saddr);
+	ipv6_addr_copy(&hdr->daddr, &fl6->daddr);
+
+	ndev = dev_get_by_index(net, fl6->flowi6_oif);
+	if (ndev) {
+		skb->dev = ndev;
+	} else {
+		printk("VANET-error: %s DO NOT find output device(%d)\n",
+				__func__, fl6->flowi6_oif);
+		kfree_skb(skb);
+		return err;
+	}
+
+	skb->priority = sk->sk_priority;
+	skb->mark = sk->sk_mark;
+
+	err = ip6_local_out_vanet(skb);
+	dev_put(ndev);
+	if (err > 0)
+		err = net_xmit_errno(err);
+
+	return err;
+}
+
+#endif
+
 /* dev_loopback_xmit for use with netfilter. */
 static int ip6_dev_loopback_xmit(struct sk_buff *newskb)
 {
@@ -92,6 +246,8 @@
 	newskb->ip_summed = CHECKSUM_UNNECESSARY;
 	WARN_ON(!skb_dst(newskb));
 
+	printk("VANET-debug: %s\n", __func__);
+
 	netif_rx_ni(newskb);
 	return 0;
 }
diff -urN linux-3.2.4/net/ipv6/ipv6_sockglue.c linux/net/ipv6/ipv6_sockglue.c
--- linux-3.2.4/net/ipv6/ipv6_sockglue.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/ipv6_sockglue.c	2013-04-11 13:56:46.227211308 +0800
@@ -807,6 +807,8 @@
 
 	release_sock(sk);
 
+	if (retv == -EADDRNOTAVAIL)
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return retv;
 
 e_inval:
@@ -943,8 +945,10 @@
 			return -EINVAL;
 		if (copy_from_user(&gsf, optval, GROUP_FILTER_SIZE(0)))
 			return -EFAULT;
-		if (gsf.gf_group.ss_family != AF_INET6)
+		if (gsf.gf_group.ss_family != AF_INET6) {
+			printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 			return -EADDRNOTAVAIL;
+		}
 		lock_sock(sk);
 		err = ip6_mc_msfget(sk, &gsf,
 			(struct group_filter __user *)optval, optlen);
diff -urN linux-3.2.4/net/ipv6/mcast.c linux/net/ipv6/mcast.c
--- linux-3.2.4/net/ipv6/mcast.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/mcast.c	2013-04-11 13:56:46.517209737 +0800
@@ -241,6 +241,7 @@
 	}
 	spin_unlock(&ipv6_sk_mc_lock);
 
+	printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return -EADDRNOTAVAIL;
 }
 
@@ -442,6 +443,8 @@
 	rcu_read_unlock();
 	if (leavegroup)
 		return ipv6_sock_mc_drop(sk, pgsr->gsr_interface, group);
+	if (err == -EADDRNOTAVAIL)
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return err;
 }
 
@@ -604,6 +607,8 @@
 done:
 	read_unlock_bh(&idev->lock);
 	rcu_read_unlock();
+	if (err == -EADDRNOTAVAIL)
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 	return err;
 }
 
@@ -1364,6 +1369,7 @@
 		 * use unspecified address as the source address
 		 * when a valid link-local address is not available.
 		 */
+		printk("VANET-debug: %s get_lladdr failed\n", __func__);
 		saddr = &in6addr_any;
 	} else
 		saddr = &addr_buf;
@@ -1761,6 +1767,7 @@
 		 * use unspecified address as the source address
 		 * when a valid link-local address is not available.
 		 */
+		printk("VANET-debug: %s get_lladdr failed\n", __func__);
 		saddr = &in6addr_any;
 	} else
 		saddr = &addr_buf;
diff -urN linux-3.2.4/net/ipv6/ndisc.c linux/net/ipv6/ndisc.c
--- linux-3.2.4/net/ipv6/ndisc.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/ndisc.c	2013-04-11 13:56:46.477209953 +0800
@@ -588,8 +588,10 @@
 	} else {
 		if (ipv6_dev_get_saddr(dev_net(dev), dev, daddr,
 				       inet6_sk(dev_net(dev)->ipv6.ndisc_sk)->srcprefs,
-				       &tmpaddr))
+				       &tmpaddr)) {
+			printk("VANET-debug: %s get_lladdr failed\n", __func__);
 			return;
+		}
 		src_addr = &tmpaddr;
 	}
 
@@ -636,8 +638,10 @@
 
 	if (saddr == NULL) {
 		if (ipv6_get_lladdr(dev, &addr_buf,
-				   (IFA_F_TENTATIVE|IFA_F_OPTIMISTIC)))
+				   (IFA_F_TENTATIVE|IFA_F_OPTIMISTIC))) {
+			printk("VANET-debug: %s get_lladdr failed\n", __func__);
 			return;
+		}
 		saddr = &addr_buf;
 	}
 
@@ -1541,6 +1545,7 @@
 		ND_PRINTK2(KERN_WARNING
 			   "ICMPv6 Redirect: no link-local address on %s\n",
 			   dev->name);
+		printk("VANET-debug: %s get_lladdr failed\n", __func__);
 		return;
 	}
 
diff -urN linux-3.2.4/net/ipv6/raw.c linux/net/ipv6/raw.c
--- linux-3.2.4/net/ipv6/raw.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/raw.c	2013-04-11 13:56:46.250544515 +0800
@@ -246,6 +246,8 @@
 	int addr_type;
 	int err;
 
+	printk("VANET-debug: %s\n", __func__);
+
 	if (addr_len < SIN6_LEN_RFC2133)
 		return -EINVAL;
 	addr_type = ipv6_addr_type(&addr->sin6_addr);
@@ -722,6 +724,202 @@
 	return 0;
 }
 
+#if VANET_UNICAST_FORWARD
+
+static int rawv6_push_pending_frames_vanet(struct sock *sk, struct flowi6 *fl6,
+					     struct raw6_sock *rp, int hl, int tc, int total_len)
+{
+	struct sk_buff *skb;
+	int err = 0;
+	int offset;
+	__wsum tmp_csum;
+	__sum16 csum;
+
+	if (!rp->checksum) {
+		printk("VANET-debug: %s do not perform checksum\n", __func__);
+		goto send;
+	}
+
+	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)
+		goto out;
+
+	offset = rp->offset;
+	if (offset >= total_len - 1) {
+		err = -EINVAL;
+		ip6_flush_pending_frames(sk);
+		goto out;
+	}
+
+	if (skb_queue_len(&sk->sk_write_queue) == 1) {
+		tmp_csum = skb->csum;
+	} else {
+		printk("VANET-error: %s has multi fragment, flushing\n", __func__);
+		err = -EOPNOTSUPP;
+		ip6_flush_pending_frames(sk);
+		goto out;
+	}
+
+	offset += skb_transport_offset(skb);
+	if (skb_copy_bits(skb, offset, &csum, 2)) {
+		printk("VANET-debug: %s error\n", __func__);
+		BUG();
+	}
+
+	if (unlikely(csum))
+		tmp_csum = csum_sub(tmp_csum, csum_unfold(csum));
+
+	csum = csum_ipv6_magic(&fl6->saddr, &fl6->daddr,
+				total_len, fl6->flowi6_proto, tmp_csum);
+
+	if (csum == 0 && fl6->flowi6_proto == IPPROTO_UDP)
+		csum = CSUM_MANGLED_0;
+
+	if (skb_store_bits(skb, offset, &csum, 2))
+		BUG();
+
+send:
+	err = ip6_push_pending_frames_vanet(sk, fl6, hl, tc);
+out:
+	return err;
+}
+
+static int rawv6_sendmsg_vanet(struct sock *sk, struct msghdr *msg, size_t len)
+{
+	struct sockaddr_in6 * sin6 = (struct sockaddr_in6 *) msg->msg_name;
+	struct in6_addr *daddr;
+	struct inet_sock *inet = inet_sk(sk);
+	struct ipv6_pinfo *np = inet6_sk(sk);
+	struct raw6_sock *rp = raw6_sk(sk);
+	struct flowi6 fl6;
+	int addr_len = msg->msg_namelen;
+	int hlimit = -1;
+	int tclass = -1;
+	u16 proto;
+	int err = 0;
+
+	if (len > VANET_DATALEN_MAX) {
+		printk("VANET-error: %s data length exceed vanet maximum datalen %d\n",
+				__func__, VANET_DATALEN_MAX);
+		return -EPERM;
+	}
+
+	if (msg->msg_flags & MSG_OOB) {
+		printk("VANET-error: %s MSG_OOB not support\n", __func__);
+		return -EOPNOTSUPP;
+	}
+	if (msg->msg_flags & MSG_CONFIRM) {
+		printk("VANET-error: %s MSG_CONFIRM not support\n", __func__);
+		return -EOPNOTSUPP;
+	}
+	if (msg->msg_flags & MSG_MORE) {
+		printk("VANET-error: %s MSG_MORE not support\n", __func__);
+		return -EOPNOTSUPP;
+	}
+	if (inet->hdrincl) {
+		printk("VANET-error: %s IPv6 header include not support\n", __func__);
+		return -EOPNOTSUPP;
+	}
+
+	// VANET: fill up fl6.
+	memset(&fl6, 0, sizeof(fl6));
+	fl6.flowi6_mark = sk->sk_mark;
+	if (sin6) {
+		if (addr_len < SIN6_LEN_RFC2133)
+			return -EINVAL;
+
+		if (sin6->sin6_family && sin6->sin6_family != AF_INET6)
+			return -EAFNOSUPPORT;
+
+		proto = ntohs(sin6->sin6_port);
+
+		if (!proto)
+			proto = inet->inet_num;
+		else if (proto != inet->inet_num)
+			return -EINVAL;
+
+		daddr = &sin6->sin6_addr;
+		if (ipv6_addr_is_multicast(daddr)) {
+			printk("VANET-error: %s do not support multicast message\n",
+					__func__);
+			return -EINVAL;
+		}
+
+		if (addr_len >= sizeof(struct sockaddr_in6) &&
+		    sin6->sin6_scope_id &&
+		    ipv6_addr_type(daddr)&IPV6_ADDR_LINKLOCAL)
+			fl6.flowi6_oif = sin6->sin6_scope_id;
+	} else {
+		printk("VANET-error: %s have no msg_name, do not support CONNECT\n",
+				__func__);
+		return -EOPNOTSUPP;
+	}
+
+	if (fl6.flowi6_oif == 0)
+		fl6.flowi6_oif = sk->sk_bound_dev_if;
+
+	if (fl6.flowi6_oif == 0) {
+		printk("VANET-error: %s tried sin6_scope_id and sk_bound_dev_if, but oif = 0\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	if (msg->msg_controllen) {
+		printk("VANET-error: %s do not support msg_control\n", __func__);
+		return -EOPNOTSUPP;
+	}
+
+	fl6.flowi6_proto = proto;
+	err = rawv6_probe_proto_opt(&fl6, msg);
+	if (err) {
+		printk("VANET-debug: %s rawv6_probe_proto_opt failed\n", __func__);
+		goto out;
+	}
+
+	if (!ipv6_addr_any(daddr))
+		ipv6_addr_copy(&fl6.daddr, daddr);
+	else
+		fl6.daddr.s6_addr[15] = 0x1; /* loopback address ::1 */
+	if (ipv6_addr_any(&fl6.saddr)) {
+		if (!ipv6_addr_any(&np->saddr)) {
+			ipv6_addr_copy(&fl6.saddr, &np->saddr);
+		} else {
+			printk("VANET-debug: %s saddr is ADDR_ANY, set vanet_sefl_lladdr\n",
+					__func__);
+			ipv6_addr_copy(&fl6.saddr, &vanet_self_lladdr);
+		}
+	}
+
+	if (hlimit < 0) {
+		hlimit = np->hop_limit;
+		if (hlimit < 0) {
+			printk("VANET-debug: %s np's hop_limit invalid, set default %d\n",
+					__func__, VANET_UC_HL_DEFAULT);
+			hlimit = VANET_UC_HL_DEFAULT;
+		}
+	}
+
+	if (tclass < 0)
+		tclass = np->tclass;
+
+	lock_sock(sk);
+	err = ip6_append_data_vanet(sk, ip_generic_getfrag, msg->msg_iov,
+					len, 0, hlimit, tclass, &fl6, msg->msg_flags);
+	if (err) {
+		struct sk_buff *skb;
+		printk("VANET-debug: %s flush pending frames\n", __func__);
+		while ((skb = __skb_dequeue_tail(&sk->sk_write_queue)) != NULL)
+			kfree_skb(skb);
+	} else {
+		err = rawv6_push_pending_frames_vanet(sk, &fl6, rp, hlimit, tclass, len);
+	}
+	release_sock(sk);
+
+out:
+	return err < 0 ? err : len;
+}
+
+#endif
+
 static int rawv6_sendmsg(struct kiocb *iocb, struct sock *sk,
 		   struct msghdr *msg, size_t len)
 {
@@ -742,6 +940,17 @@
 	u16 proto;
 	int err;
 
+	if (msg->msg_flags & MSG_VANET) {
+#if VANET_UNICAST_FORWARD
+		err = rawv6_sendmsg_vanet(sk, msg, len);
+		return err;
+		/* VANET TODO: err control and return*/
+#else
+		printk("VANET-debug: %s get vanet unicast packet, drop\n", __func__);
+		return -EINVAL;
+#endif
+	}
+
 	/* Rough check on arithmetic overflow,
 	   better check is made in ip6_append_data().
 	 */
@@ -1072,6 +1281,8 @@
 static int rawv6_getsockopt(struct sock *sk, int level, int optname,
 			  char __user *optval, int __user *optlen)
 {
+	printk("VANET-debug: %s\n", __func__);
+
 	switch (level) {
 	case SOL_RAW:
 		break;
@@ -1114,6 +1325,8 @@
 
 static int rawv6_ioctl(struct sock *sk, int cmd, unsigned long arg)
 {
+	printk("VANET-debug: %s\n", __func__);
+
 	switch (cmd) {
 	case SIOCOUTQ: {
 		int amount = sk_wmem_alloc_get(sk);
diff -urN linux-3.2.4/net/ipv6/route.c linux/net/ipv6/route.c
--- linux-3.2.4/net/ipv6/route.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/route.c	2013-04-11 13:56:45.767213800 +0800
@@ -2099,9 +2099,12 @@
 	int err = 0;
 	if (rt->rt6i_prefsrc.plen)
 		ipv6_addr_copy(saddr, &rt->rt6i_prefsrc.addr);
-	else
+	else {
 		err = ipv6_dev_get_saddr(net, idev ? idev->dev : NULL,
 					 daddr, prefs, saddr);
+		if (err == -EADDRNOTAVAIL)
+			printk("VANET-debug: %s get_lladdr failed\n", __func__);
+	}
 	return err;
 }
 
diff -urN linux-3.2.4/net/ipv6/udp.c linux/net/ipv6/udp.c
--- linux-3.2.4/net/ipv6/udp.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/ipv6/udp.c	2013-04-11 13:56:46.860541209 +0800
@@ -45,6 +45,7 @@
 #include <net/tcp_states.h>
 #include <net/ip6_checksum.h>
 #include <net/xfrm.h>
+#include <net/ipv6.h> //VANET
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
@@ -106,6 +107,7 @@
 	unsigned int hash2_partial = 
 		udp6_portaddr_hash(sock_net(sk), &inet6_sk(sk)->rcv_saddr, 0);
 
+	printk("VANET-debug: %s\n", __func__);
 	/* precompute partial secondary hash */
 	udp_sk(sk)->udp_portaddr_hash = hash2_partial;
 	return udp_lib_get_port(sk, snum, ipv6_rcv_saddr_equal, hash2_nulladdr);
@@ -943,6 +945,247 @@
 	return err;
 }
 
+/*
+ * VANET: unicast routing and sending
+ */
+#if VANET_UNICAST_FORWARD
+
+static int udp_v6_push_pending_frames_vanet(struct sock *sk,
+					struct flowi6 *fl6, int hl, int tc)
+{
+	struct sk_buff *skb;
+	struct udphdr *uh;
+	struct udp_sock *up = udp_sk(sk);
+	int err = 0;
+	__wsum csum = 0;
+
+	if ((skb = skb_peek(&sk->sk_write_queue)) == NULL)
+		goto out;
+
+	uh = udp_hdr(skb);
+	uh->source = fl6->fl6_sport;
+	uh->dest = fl6->fl6_dport;
+	uh->len = htons(up->len);
+	uh->check = 0;
+
+	if (skb->ip_summed == CHECKSUM_PARTIAL) {
+		udp6_hwcsum_outgoing(sk, skb, &fl6->saddr, &fl6->daddr, up->len);
+		goto send;
+	} else
+		csum = udp_csum_outgoing(sk, skb);
+
+	uh->check = csum_ipv6_magic(&fl6->saddr, &fl6->daddr,
+				    up->len, fl6->flowi6_proto, csum);
+	if (uh->check == 0)
+		uh->check = CSUM_MANGLED_0;
+
+send:
+	err = ip6_push_pending_frames_vanet(sk, fl6, hl, tc);
+	if (err) {
+		if (err == -ENOBUFS && !inet6_sk(sk)->recverr)
+			err = 0;
+	}
+out:
+	up->len = 0;
+	up->pending = 0;
+	return err;
+}
+
+/**
+ * VANET: XXX only support unicast now.
+ */
+int udpv6_sendmsg_vanet(struct sock *sk, struct msghdr *msg, size_t len)
+{
+	struct udp_sock *up = udp_sk(sk);
+	struct inet_sock *inet = inet_sk(sk);
+	struct ipv6_pinfo *np = inet6_sk(sk);
+	struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *) msg->msg_name;
+	struct in6_addr *daddr;
+	struct flowi6 fl6;
+	int addr_len = msg->msg_namelen;
+	int ulen = len;
+	int tclass = -1;
+	int hlimit = -1;
+	int corkreq = up->corkflag || msg->msg_flags&MSG_MORE;
+	int is_udplite = IS_UDPLITE(sk);
+	int err;
+
+	/* error check */
+	if (msg->msg_flags & MSG_CONFIRM) {
+		printk("VANET-error: %s msg confirm is not supported\n", __func__);
+		return -EPERM;
+	}
+	if (corkreq) {
+		printk("VANET-error: %s cork is not supported\n", __func__);
+		return -EPERM;
+	}
+	if (is_udplite) {
+		printk("VANET-error: %s udp-lite is not supported\n", __func__);
+		return -EOPNOTSUPP;
+	}
+	if (np->sndflow) {
+		printk("VANET-error: %s sendflow not supported\n", __func__);
+		return -EPERM;
+	}
+	if (sk->sk_state == TCP_ESTABLISHED) {
+		printk("VANET-error: %s established communication not supported\n",
+				__func__);
+		return -EOPNOTSUPP;
+	}
+	if (sin6) {
+		if (addr_len < offsetof(struct sockaddr, sa_data))
+			return -EINVAL;
+		if (sin6->sin6_family != AF_INET6) {
+			printk("VANET-error: %s only support IPv6 now\n", __func__);
+			return -EINVAL;
+		}
+		if (addr_len < SIN6_LEN_RFC2133)
+			return -EINVAL;
+		if (sin6->sin6_port == 0)
+			return -EINVAL;
+		if (ipv6_addr_is_multicast(&sin6->sin6_addr)) {
+			printk("VANET-error: %s do not support multicast message\n",
+					__func__);
+			return -EINVAL;
+		}
+	} else {
+		printk("VANET-error: %s msg_name is NULL\n", __func__);
+		return -EINVAL;
+	}
+	if (len > INT_MAX - sizeof(struct udphdr))
+		return -EMSGSIZE;
+	if (len > VANET_DATALEN_MAX) {
+		printk("VANET-error: %s data size is bigger than %d\n", __func__, VANET_DATALEN_MAX);
+		return -EPERM;
+	}
+
+	ulen += sizeof(struct udphdr);
+	memset(&fl6, 0, sizeof(fl6));
+	fl6.fl6_dport = sin6->sin6_port;
+	daddr = &sin6->sin6_addr;
+
+	if (addr_len >= sizeof(struct sockaddr_in6) &&
+	    sin6->sin6_scope_id &&
+	    ipv6_addr_type(daddr)&IPV6_ADDR_LINKLOCAL) {
+//		printk("VANET-debug: %s using sockaddr's scope_id for oif\n", __func__);
+		fl6.flowi6_oif = sin6->sin6_scope_id;
+	}
+	if (ipv6_addr_is_multicast(daddr)) {
+		printk("VANET-error: %s not support multicast yet\n", __func__);
+		return -EINVAL;
+	}
+	if (!fl6.flowi6_oif)
+		fl6.flowi6_oif = sk->sk_bound_dev_if;
+	if (!fl6.flowi6_oif) {
+		printk("VANET-error: %s tried sin6_scope_id and sk_bound_dev_if, but oif==0\n",
+				__func__);
+		return -EINVAL;
+	}
+
+	fl6.flowi6_mark = sk->sk_mark;
+
+	if (msg->msg_controllen) { // has msg control option
+		struct cmsghdr *cmsg;
+		for (cmsg = CMSG_FIRSTHDR(msg); cmsg; cmsg = CMSG_NXTHDR(msg, cmsg)) {
+			if (!CMSG_OK(msg, cmsg))
+				return -EINVAL;
+			if (cmsg->cmsg_level != SOL_IPV6)
+				continue;
+			switch (cmsg->cmsg_type) {
+			case IPV6_FLOWINFO:
+				if (cmsg->cmsg_len < CMSG_LEN(4))
+					return -EINVAL;
+				fl6.flowlabel = IPV6_FLOWINFO_MASK & *(__be32 *)CMSG_DATA(cmsg);
+				break;
+			case IPV6_HOPLIMIT:
+				if (cmsg->cmsg_len != CMSG_LEN(sizeof(int)))
+					return -EINVAL;
+				hlimit = *(int *)CMSG_DATA(cmsg);
+				if (hlimit < -1 || hlimit > 0xff)
+					return -EINVAL;
+				break;
+			case IPV6_TCLASS:
+				if (cmsg->cmsg_len != CMSG_LEN(sizeof(int)))
+					return -EINVAL;
+				tclass = *(int *)CMSG_DATA(cmsg);
+				if (tclass < -1 || tclass > 0xff)
+					return -EINVAL;
+				break;
+			default:
+				printk("VANET-debug: %s invalid cmsg type %d\n",
+						__func__, cmsg->cmsg_type);
+				return -EINVAL;
+			}
+		}
+	}
+
+	fl6.flowi6_proto = sk->sk_protocol;
+	if (!ipv6_addr_any(daddr))
+		ipv6_addr_copy(&fl6.daddr, daddr);
+	else
+		fl6.daddr.s6_addr[15] = 0x1;
+	if (ipv6_addr_any(&fl6.saddr) && !ipv6_addr_any(&np->saddr))
+		ipv6_addr_copy(&fl6.saddr, &np->saddr);
+	if (ipv6_addr_any(&fl6.saddr)) {
+		printk("VANET-debug: %s fl6->saddr is ANY, copy link-local addr into it\n",
+				__func__);
+		ipv6_addr_copy(&fl6.saddr, &vanet_self_lladdr);
+		if (ipv6_addr_any(&fl6.saddr))
+			printk("VANET-debug: %s fl6->saddr is ANY anyway\n", __func__);
+	}
+	fl6.fl6_sport = inet->inet_sport;
+
+	if (hlimit < 0) {
+		hlimit = np->hop_limit;
+		if (hlimit < 0) {
+			printk("VANET-debug: %s user and socket don't care hop_limit\n", __func__);
+			printk("VANET-debug: %s using default unicast hop limit %d\n",
+					__func__, VANET_UC_HL_DEFAULT);
+			hlimit = VANET_UC_HL_DEFAULT;
+		}
+	}
+	if (tclass < 0) {
+		tclass = np->tclass;
+//		printk("VANET-debug: %s tclass is %d\n", __func__, tclass);
+	}
+
+	lock_sock(sk);
+	if (unlikely(up->pending)) {
+		release_sock(sk);
+		printk("VANET-debug: %s udp cork app bug 2\n", __func__);
+		return -EINVAL;
+	}
+
+	up->pending = AF_INET6;
+	up->len += ulen;
+	if (up->len != ulen) {
+		printk("VANET-debug: %s BUG, up->len is not 0\n", __func__);
+		return -EINVAL;
+	}
+	err = ip6_append_data_vanet(sk, ip_generic_getfrag, msg->msg_iov,
+				ulen, sizeof(struct udphdr), hlimit, tclass, &fl6,
+				msg->msg_flags);
+	if (err) {
+		struct sk_buff *skb;
+		printk("VANET-debug: %s udpv6 flush pending frames\n", __func__);
+		up->len = 0;
+		up->pending = 0;
+		while ((skb = __skb_dequeue_tail(&sk->sk_write_queue)) != NULL)
+			kfree_skb(skb);
+	} else {
+		err = udp_v6_push_pending_frames_vanet(sk, &fl6, hlimit, tclass);
+	}
+
+	if (err > 0)
+		err = np->recverr ? net_xmit_errno(err) : 0;
+	release_sock(sk);
+	if (!err)
+		return len;
+	return err;
+}
+
+#endif
+
 int udpv6_sendmsg(struct kiocb *iocb, struct sock *sk,
 		  struct msghdr *msg, size_t len)
 {
@@ -967,6 +1210,17 @@
 	int is_udplite = IS_UDPLITE(sk);
 	int (*getfrag)(void *, char *, int, int, int, struct sk_buff *);
 
+	if (msg->msg_flags & MSG_VANET) {
+#if VANET_UNICAST_FORWARD
+		err = udpv6_sendmsg_vanet(sk, msg, len);
+		return err;
+		/* VANET TODO: err control and return*/
+#else
+		printk("VANET-debug: %s get vanet unicast packet, drop\n", __func__);
+		return -EINVAL;
+#endif
+	}
+
 	/* destination address check */
 	if (sin6) {
 		if (addr_len < offsetof(struct sockaddr, sa_data))
@@ -1099,8 +1353,17 @@
 		}
 		if ((fl6.flowlabel&IPV6_FLOWLABEL_MASK) && !flowlabel) {
 			flowlabel = fl6_sock_lookup(sk, fl6.flowlabel);
-			if (flowlabel == NULL)
-				return -EINVAL;
+			if (flowlabel == NULL) {
+//				printk("VANET-debug: %s flowlabel is NULL\n", __func__);
+				/*
+				 * VANET: XXX TODO FIXME change original path, SHOULD discriminate
+				 * vanet packet from normal packet.
+				 */
+//				return -EINVAL;
+			} else {
+				printk("VANET-debug: WARNING %s flowlabel is not NULL\n",
+						__func__);
+			}
 		}
 		if (!(opt->opt_nflen|opt->opt_flen))
 			opt = NULL;
@@ -1245,6 +1508,7 @@
 int udpv6_setsockopt(struct sock *sk, int level, int optname,
 		     char __user *optval, unsigned int optlen)
 {
+	printk("VANET-debug: %s\n", __func__);
 	if (level == SOL_UDP  ||  level == SOL_UDPLITE)
 		return udp_lib_setsockopt(sk, level, optname, optval, optlen,
 					  udp_v6_push_pending_frames);
@@ -1265,6 +1529,7 @@
 int udpv6_getsockopt(struct sock *sk, int level, int optname,
 		     char __user *optval, int __user *optlen)
 {
+	printk("VANET-debug: %s\n", __func__);
 	if (level == SOL_UDP  ||  level == SOL_UDPLITE)
 		return udp_lib_getsockopt(sk, level, optname, optval, optlen);
 	return ipv6_getsockopt(sk, level, optname, optval, optlen);
diff -urN linux-3.2.4/net/mac80211/cfg.c linux/net/mac80211/cfg.c
--- linux-3.2.4/net/mac80211/cfg.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/cfg.c	2013-04-11 13:56:52.550510385 +0800
@@ -1599,9 +1599,20 @@
 	case NL80211_TX_POWER_FIXED:
 		if (mbm < 0 || (mbm % 100))
 			return -EOPNOTSUPP;
+		
 		/* TODO: move to cfg80211 when it knows the channel */
-		if (MBM_TO_DBM(mbm) > chan->max_power)
+		/**
+		 * VANET-debug: XXX force chan->max_power to be 30dBm
+		 */
+		if(chan->max_power < 30) {
+			printk("VANET-debug: %s chan->max_power < 30dBm, set it to 30dBm\n",
+					__func__);
+			chan->max_power = 30;
+		}
+		if (MBM_TO_DBM(mbm) > chan->max_power) {
+			printk("VANET-debug: %s power > max_power(%ddBm)\n", __func__, chan->max_power);
 			return -EINVAL;
+		}
 		local->user_power_level = MBM_TO_DBM(mbm);
 		break;
 	}
diff -urN linux-3.2.4/net/mac80211/ibss.c linux/net/mac80211/ibss.c
--- linux-3.2.4/net/mac80211/ibss.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/ibss.c	2013-04-11 13:56:51.383850040 +0800
@@ -292,8 +292,12 @@
 
 				prev_rates = sta->sta.supp_rates[band];
 				/* make sure mandatory rates are always added */
-				sta->sta.supp_rates[band] = supp_rates |
-					ieee80211_mandatory_rates(local, band);
+//				sta->sta.supp_rates[band] = supp_rates |
+//					ieee80211_mandatory_rates(local, band);
+				/* VANET: XXX */
+				sta->sta.supp_rates[band] = supp_rates | 0xff;
+				printk("VANET-debug: %s mandatory_rates is 0xff, support all rates\n",
+					       __func__);
 
 				if (sta->sta.supp_rates[band] != prev_rates) {
 #ifdef CONFIG_MAC80211_IBSS_DEBUG
@@ -436,8 +440,15 @@
 		return NULL;
 	}
 
-	if (ifibss->state == IEEE80211_IBSS_MLME_SEARCH)
-		return NULL;
+	if (ifibss->state == IEEE80211_IBSS_MLME_SEARCH) {
+		/**
+		 * VANET-debug: XXX do not care ifibss->state
+		 * 	TODO FIXME how to ieee80211_sta_expire???
+		 */
+//		printk("VANET-debug: %s ifibss->state is IEEE80211_IBSS_MLME_SEARCH\n",
+//				__func__);
+		//return NULL; //original
+	}
 
 	if (compare_ether_addr(bssid, sdata->u.ibss.bssid))
 		return NULL;
@@ -448,15 +459,22 @@
 #endif
 
 	sta = sta_info_alloc(sdata, addr, gfp);
-	if (!sta)
+	if (!sta) {
+		printk("VANET-debug: %s sta info alloc failed\n", __func__);
 		return NULL;
+	}
 
 	sta->last_rx = jiffies;
+//	printk("VANET-debug: %s automaticly set sta_flag to WLAN_STA_AUTHORIZED\n",
+//			__func__);
 	set_sta_flag(sta, WLAN_STA_AUTHORIZED);
 
 	/* make sure mandatory rates are always added */
-	sta->sta.supp_rates[band] = supp_rates |
-			ieee80211_mandatory_rates(local, band);
+//	sta->sta.supp_rates[band] = supp_rates |
+//			ieee80211_mandatory_rates(local, band);
+	/* VANET: XXX */
+	sta->sta.supp_rates[band] = supp_rates | 0xff;
+	printk("VANET-debug: %s mandatory_rates is 0xff, support all rates\n", __func__);
 
 	rate_control_rate_init(sta);
 
@@ -868,6 +886,13 @@
 {
 	struct ieee80211_if_ibss *ifibss = &sdata->u.ibss;
 
+	/**
+	 * VANET-debug: XXX set ifibss's bssid to be wildcard
+	 */
+	memset(&ifibss->bssid, 0xff, ETH_ALEN);
+	ifibss->fixed_bssid = true;	
+	printk("VANET-debug: %s set ibss->bssid to wildcard\n", __func__);
+
 	setup_timer(&ifibss->timer, ieee80211_ibss_timer,
 		    (unsigned long) sdata);
 	mutex_init(&ifibss->mtx);
diff -urN linux-3.2.4/net/mac80211/iface.c linux/net/mac80211/iface.c
--- linux-3.2.4/net/mac80211/iface.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/iface.c	2013-04-11 13:56:51.403849930 +0800
@@ -237,6 +237,7 @@
 		if (!is_valid_ether_addr(dev->dev_addr)) {
 			if (!local->open_count)
 				drv_stop(local);
+			printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 			return -EADDRNOTAVAIL;
 		}
 	}
@@ -363,8 +364,10 @@
 	int err;
 
 	/* fail early if user set an invalid address */
-	if (!is_valid_ether_addr(dev->dev_addr))
+	if (!is_valid_ether_addr(dev->dev_addr)) {
+		printk("VANET-debug: %s -------EADDRNOTAVAIL\n", __func__);
 		return -EADDRNOTAVAIL;
+	}
 
 	err = ieee80211_check_concurrent_iface(sdata, sdata->vif.type);
 	if (err)
@@ -999,6 +1002,12 @@
 	sdata->vif.bss_conf.basic_rates =
 		ieee80211_mandatory_rates(sdata->local,
 			sdata->local->hw.conf.channel->band);
+	/* VANET: XXX */
+	if (type == NL80211_IFTYPE_ADHOC) {
+		sdata->vif.bss_conf.basic_rates = 0xff;
+		printk("VANET-debug: %s type is adhoc, mandatory_rates set to 0xff\n", __func__);
+	}
+
 	sdata->drop_unencrypted = 0;
 	if (type == NL80211_IFTYPE_STATION)
 		sdata->u.mgd.use_4addr = false;
@@ -1126,6 +1135,7 @@
 	struct ieee80211_sub_if_data *sdata = NULL;
 	int ret, i;
 
+	printk("VANET-debug: %s, name: %s\n", __func__, name);
 	ASSERT_RTNL();
 
 	ndev = alloc_netdev_mqs(sizeof(*sdata) + local->hw.vif_data_size,
diff -urN linux-3.2.4/net/mac80211/main.c linux/net/mac80211/main.c
--- linux-3.2.4/net/mac80211/main.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/main.c	2013-04-11 13:56:52.073846300 +0800
@@ -24,6 +24,8 @@
 #include <net/net_namespace.h>
 #include <net/cfg80211.h>
 
+#include <net/ipv6.h> // VANET_IF_NAME_STR
+
 #include "ieee80211_i.h"
 #include "driver-ops.h"
 #include "rate.h"
@@ -669,6 +671,7 @@
 		WLAN_CIPHER_SUITE_AES_CMAC
 	};
 
+	printk("VANET-debug: %s\n", __func__);
 	if ((hw->wiphy->wowlan.flags || hw->wiphy->wowlan.n_patterns)
 #ifdef CONFIG_PM
 	    && (!local->ops->suspend || !local->ops->resume)
@@ -897,8 +900,26 @@
 
 	/* add one default STA interface if supported */
 	if (local->hw.wiphy->interface_modes & BIT(NL80211_IFTYPE_STATION)) {
-		result = ieee80211_if_add(local, "wlan%d", NULL,
+		/*
+		 * VANET: FIXME if interface_modes not support IFTYPE_STATION.
+		 * XXX vanet network interface specific treatment.
+		 */
+		if (hw->flags & IEEE80211_HW_VANET) {
+			printk("VANET-debug: %s register vanet network interface %s\n",
+					__func__, VANET_IF_NAME_STR);
+			/*
+			 * VANET: since IEEE80211_HW_VANET flag is setted in ath5k_init_ah,
+			 * we use name VANET_IF_NAME_STR for vanet network interface.
+			 * VANET_IF_NAME_STR is now setted in include/net/ipv6.h,
+			 * TODO change it from wierd location to right place.
+			 */
+			result = ieee80211_if_add(local, VANET_IF_NAME_STR, NULL,
+					  NL80211_IFTYPE_STATION, NULL);
+		} else {
+			printk("VANET-debug: register normal network interface\n");
+			result = ieee80211_if_add(local, "wlan%d", NULL,
 					  NL80211_IFTYPE_STATION, NULL);
+		}
 		if (result)
 			wiphy_warn(local->hw.wiphy,
 				   "Failed to add default virtual iface\n");
diff -urN linux-3.2.4/net/mac80211/rate.c linux/net/mac80211/rate.c
--- linux-3.2.4/net/mac80211/rate.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/rate.c	2013-04-11 13:56:51.493849442 +0800
@@ -123,6 +123,7 @@
 	if (!ops && strlen(CONFIG_MAC80211_RC_DEFAULT))
 		ops = ieee80211_try_rate_control_ops_get(CONFIG_MAC80211_RC_DEFAULT);
 	kparam_unblock_sysfs_write(ieee80211_default_rc_algo);
+	printk("VANET-debug: %s select %s\n", __func__, ops->name);
 
 	return ops;
 }
@@ -316,6 +317,7 @@
 		}
 	}
 
+	printk("VANET-debug: %s DO NOT find suitable rate\n", __func__);
 	/*
 	 * Uh.. No suitable rate exists. This should not really happen with
 	 * sane TX rate mask configurations. However, should someone manage to
diff -urN linux-3.2.4/net/mac80211/rx.c linux/net/mac80211/rx.c
--- linux-3.2.4/net/mac80211/rx.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/rx.c	2013-04-11 13:56:52.583843537 +0800
@@ -17,6 +17,7 @@
 #include <linux/etherdevice.h>
 #include <linux/rcupdate.h>
 #include <linux/export.h>
+#include <linux/ipv6.h>
 #include <net/mac80211.h>
 #include <net/ieee80211_radiotap.h>
 
@@ -1579,10 +1580,20 @@
 static int
 ieee80211_802_1x_port_control(struct ieee80211_rx_data *rx)
 {
-	if (unlikely(!rx->sta ||
-	    !test_sta_flag(rx->sta, WLAN_STA_AUTHORIZED)))
+	/**
+	 * VANET: XXX in 802.11p rx->sta is NULL, fast return.
+	 */
+	if (!rx->sta)
+		return 0;
+
+	if (!test_sta_flag(rx->sta, WLAN_STA_AUTHORIZED))
 		return -EACCES;
 
+	/* original */
+//	if (unlikely(!rx->sta ||
+//	    !test_sta_flag(rx->sta, WLAN_STA_AUTHORIZED)))
+//		return -EACCES;
+
 	return 0;
 }
 
@@ -1741,6 +1752,28 @@
 	struct sta_info *dsta;
 	struct ieee80211_rx_status *status = IEEE80211_SKB_RXCB(rx->skb);
 
+#if 0 //debug information for PowerPC
+	int i;
+	struct ipv6hdr *ihdr;
+
+	printk("VANET-debug: %s MDA<", __func__);
+	for (i=0; i<6; i++)
+		printk("%2x", ehdr->h_dest[i]);
+	printk(">\tMSA<");
+	for (i=0; i<6; i++)
+		printk("%2x", ehdr->h_source[i]);
+	printk(">\n");
+
+	ihdr = (struct ipv6hdr *)(rx->skb->data + ETH_HLEN);
+	printk("VANET-debug: %s DA<", __func__);
+	for (i=0; i<6; i++)
+		printk("%2x", ihdr->daddr.s6_addr[i]);
+	printk(">\tSA<");
+	for (i=0; i<6; i++)
+		printk("%2x", ihdr->saddr.s6_addr[i]);
+	printk(">\n");
+#endif
+
 	skb = rx->skb;
 	xmit_skb = NULL;
 
@@ -2930,6 +2963,7 @@
 
 		rx.sta = sta_info_get_bss_rx(prev, hdr->addr2);
 		rx.sdata = prev;
+		printk("VANET-debug: not find sta, in sdata test, consume is false\n");
 		ieee80211_prepare_and_rx_handle(&rx, skb, false);
 
 		prev = sdata;
diff -urN linux-3.2.4/net/mac80211/sta_info.c linux/net/mac80211/sta_info.c
--- linux-3.2.4/net/mac80211/sta_info.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/sta_info.c	2013-04-11 13:56:52.347178152 +0800
@@ -288,8 +288,10 @@
 	int i;
 
 	sta = kzalloc(sizeof(*sta) + local->hw.sta_data_size, gfp);
-	if (!sta)
+	if (!sta) {
+		printk("VANET-debug: %s no memory to alloc sta\n", __func__);
 		return NULL;
+	}
 
 	spin_lock_init(&sta->lock);
 	INIT_WORK(&sta->drv_unblock_wk, sta_unblock);
@@ -306,6 +308,8 @@
 	ewma_init(&sta->avg_signal, 1024, 8);
 
 	if (sta_prepare_rate_control(local, sta, gfp)) {
+		printk("VANET-debug: %s prepare rate control failed\n",
+				__func__);
 		kfree(sta);
 		return NULL;
 	}
diff -urN linux-3.2.4/net/mac80211/tx.c linux/net/mac80211/tx.c
--- linux-3.2.4/net/mac80211/tx.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/tx.c	2013-04-11 13:56:51.920513797 +0800
@@ -1161,6 +1161,9 @@
 		 * it might already be set for injected frames.
 		 */
 	}
+//	printk("VANET-debug: %s info->flags %s IEEE80211_TX_CTL_NO_ACK\n",
+//			__func__,
+//			(info->flags & IEEE80211_TX_CTL_NO_ACK)?"set":"not set");
 
 	if (!(info->flags & IEEE80211_TX_CTL_DONTFRAG)) {
 		if (!(tx->flags & IEEE80211_TX_UNICAST) ||
@@ -1313,6 +1316,7 @@
 
  txh_done:
 	if (unlikely(res == TX_DROP)) {
+		printk("VANET-debug: %s tx failed\n", __func__);
 		I802_DEBUG_INC(tx->local->tx_handlers_drop);
 		while (skb) {
 			struct sk_buff *next;
@@ -1323,6 +1327,7 @@
 		}
 		return -1;
 	} else if (unlikely(res == TX_QUEUED)) {
+		printk("VANET-debug: %s tx queued\n", __func__);
 		I802_DEBUG_INC(tx->local->tx_handlers_queued);
 		return -1;
 	}
@@ -1895,8 +1900,14 @@
 	/*
 	 * Drop unicast frames to unauthorised stations unless they are
 	 * EAPOL frames from the local station.
+	 * 
+	 * VANET-debug:
+	 * if sdata->vif is ADHOC, then do not drop unicast frames
+	 *
 	 */
 	if (unlikely(!ieee80211_vif_is_mesh(&sdata->vif) &&
+		     /* VANET-debug: XXX */
+		     (sdata->vif.type != NL80211_IFTYPE_ADHOC) &&
 		     !is_multicast_ether_addr(hdr.addr1) && !authorized &&
 		     (cpu_to_be16(ethertype) != sdata->control_port_protocol ||
 		      compare_ether_addr(sdata->vif.addr, skb->data + ETH_ALEN)))) {
@@ -1909,6 +1920,7 @@
 
 		I802_DEBUG_INC(local->tx_handlers_drop_unauth_port);
 
+		printk("VANET-debug: block in %s\n", __func__);
 		ret = NETDEV_TX_OK;
 		goto fail;
 	}
diff -urN linux-3.2.4/net/mac80211/util.c linux/net/mac80211/util.c
--- linux-3.2.4/net/mac80211/util.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/mac80211/util.c	2013-04-11 13:56:52.030513203 +0800
@@ -690,6 +690,13 @@
 	for (i = 0; i < sband->n_bitrates; i++)
 		if (bitrates[i].flags & mandatory_flag)
 			mandatory_rates |= BIT(i);
+	/**
+	 * VANET-debug: XXX at init time mandatory rates is 0x15 (6M, 12M, 24M),
+	 * since vanet has no management frame which contain support_rates information,
+	 * we just let mandatory_rates to be 0xff when calling it if and only if the
+	 * vif type is ADHOC. Then supporting all 11a rates.
+	 */
+
 	return mandatory_rates;
 }
 
diff -urN linux-3.2.4/net/socket.c linux/net/socket.c
--- linux-3.2.4/net/socket.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/socket.c	2013-04-11 13:56:45.293883030 +0800
@@ -1427,6 +1427,7 @@
 	struct sockaddr_storage address;
 	int err, fput_needed;
 
+	printk("VANET-debug: %s\n", __func__);
 	sock = sockfd_lookup_light(fd, &err, &fput_needed);
 	if (sock) {
 		err = move_addr_to_kernel(umyaddr, addrlen, (struct sockaddr *)&address);
diff -urN linux-3.2.4/net/wireless/db.txt linux/net/wireless/db.txt
--- linux-3.2.4/net/wireless/db.txt	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/wireless/db.txt	2013-04-11 13:56:48.100534492 +0800
@@ -1,17 +1,704 @@
-#
-# This file is a placeholder to prevent accidental build breakage if someone
-# enables CONFIG_CFG80211_INTERNAL_REGDB.  Almost no one actually needs to
-# enable that build option.
-#
-# You should be using CRDA instead.  It is even better if you use the CRDA
-# package provided by your distribution, since they will probably keep it
-# up-to-date on your behalf.
-#
-# If you _really_ intend to use CONFIG_CFG80211_INTERNAL_REGDB then you will
-# need to replace this file with one containing appropriately formatted
-# regulatory rules that cover the regulatory domains you will be using.  Your
-# best option is to extract the db.txt file from the wireless-regdb git
-# repository:
-#
-#   git://git.kernel.org/pub/scm/linux/kernel/git/linville/wireless-regdb.git
-#
+# This is the world regulatory domain
+country 00:
+	(2402 - 2472 @ 40), (3, 20)
+        # Channel 12 - 13. No HT40 channel fits here
+        (2457 - 2482 @ 20), (3, 20), PASSIVE-SCAN, NO-IBSS
+        # Channel 14. Only JP enables this and for 802.11b only
+        (2474 - 2494 @ 20), (3, 20), PASSIVE-SCAN, NO-IBSS, NO-OFDM
+        # Channel 36 - 48
+        (5170 - 5250 @ 40), (3, 20), PASSIVE-SCAN, NO-IBSS
+        # NB: 5260 MHz - 5700 MHz requies DFS
+        # Channel 149 - 165
+        (5735 - 5835 @ 40), (3, 20), PASSIVE-SCAN, NO-IBSS
+	(5850 - 5930 @ 20), (N/A, 30)
+
+
+country AE:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country AL:
+	(2402 - 2482 @ 20), (N/A, 20)
+
+country AM:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (N/A, 18)
+	(5250 - 5330 @ 20), (N/A, 18), DFS
+
+country AN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country AR:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country AT: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country AU:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 23)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country AW:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country AZ:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 18)
+	(5250 - 5330 @ 40), (N/A, 18), DFS
+
+country BA: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country BB:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 23)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country BD:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country BE: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country BG: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 23)
+	(5250 - 5290 @ 40), (N/A, 23), DFS
+	(5490 - 5710 @ 40), (N/A, 30), DFS
+
+country BH:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (N/A, 20)
+	(5250 - 5330 @ 20), (N/A, 20), DFS
+	(5735 - 5835 @ 20), (N/A, 20)
+
+country BL:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 18)
+	(5250 - 5330 @ 40), (N/A, 18), DFS
+
+country BN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country BO:
+	(2402 - 2482 @ 40), (N/A, 30)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country BR:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country BY:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country BZ:
+	(2402 - 2482 @ 40), (N/A, 30)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country CA:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country CH: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country CL:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5735 - 5835 @ 40), (N/A, 20)
+
+country CN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+	(5850 - 5930 @ 20), (N/A, 30)
+
+country CO:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country CR:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (3, 17)
+	(5250 - 5330 @ 20), (3, 23), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country CS:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country CY: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+# Data from http://www.ctu.eu/164/download/VOR/VOR-12-08-2005-34.pdf
+# and http://www.ctu.eu/164/download/VOR/VOR-12-05-2007-6-AN.pdf
+# Power at 5250 - 5350 MHz and 5470 - 5725 MHz can be doubled if TPC is
+# implemented.
+country CZ: DFS-ETSI
+	(2400 - 2483.5 @ 40), (N/A, 100 mW)
+	(5150 - 5250 @ 40), (N/A, 200 mW), NO-OUTDOOR
+	(5250 - 5350 @ 40), (N/A, 100 mW), NO-OUTDOOR, DFS
+	(5470 - 5725 @ 40), (N/A, 500 mW), DFS
+
+# Data from "Frequenznutzungsplan" (as published in April 2008), downloaded from
+# http://www.bundesnetzagentur.de/cae/servlet/contentblob/38448/publicationFile/2659/Frequenznutzungsplan2008_Id17448pdf.pdf
+# For the 5GHz range also see
+# http://www.bundesnetzagentur.de/cae/servlet/contentblob/38216/publicationFile/6579/WLAN5GHzVfg7_2010_28042010pdf.pdf
+# The values have been reduced by a factor of 2 (3db) for non TPC devices
+# (in other words: devices with TPC can use twice the tx power of this table).
+# Note that the docs do not require TPC for 5150--5250; the reduction to
+# 100mW thus is not strictly required -- however the conservative 100mW
+# limit is used here as the non-interference with radar and satellite
+# apps relies on the attenuation by the building walls only in the
+# absence of DFS; the neighbour countries have 100mW limit here as well.
+
+country DE: DFS-ETSI
+	# entries 279004 and 280006
+	(2400 - 2483.5 @ 40), (N/A, 100 mW)
+	# entry 303005
+	(5150 - 5250 @ 40), (N/A, 100 mW), NO-OUTDOOR
+	# entries 304002 and 305002
+	(5250 - 5350 @ 40), (N/A, 100 mW), NO-OUTDOOR, DFS
+	# entries 308002, 309001 and 310003
+	(5470 - 5725 @ 40), (N/A, 500 mW), DFS
+
+country DK: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country DO:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country DZ:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country EC:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (3, 17)
+	(5250 - 5330 @ 20), (3, 23), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country EE: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country EG:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (N/A, 20)
+	(5250 - 5330 @ 20), (N/A, 20), DFS
+
+country ES: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country FI: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country FR: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country GE:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 18)
+	(5250 - 5330 @ 40), (N/A, 18), DFS
+
+country GB: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country GD:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country GR: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country GL: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (N/A, 20)
+	(5250 - 5330 @ 20), (N/A, 20), DFS
+	(5490 - 5710 @ 20), (N/A, 27), DFS
+
+country GT:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country GU:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 20), (3, 17)
+	(5250 - 5330 @ 20), (3, 23), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country HN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country HK:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country HR: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country HT:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country HU: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country ID:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country IE: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country IL:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5150 - 5250 @ 40), (N/A, 200 mW), NO-OUTDOOR
+	(5250 - 5350 @ 40), (N/A, 200 mW), NO-OUTDOOR, DFS
+
+country IN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5735 - 5835 @ 40), (N/A, 20)
+
+country IS: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country IR:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country IT: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country JM:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country JP:
+	(2402 - 2472 @ 40), (N/A, 20)
+	(2457 - 2482 @ 20), (N/A, 20)
+	(2474 - 2494 @ 20), (N/A, 20), NO-OFDM
+	(4910 - 4930 @ 10), (N/A, 23)
+	(4910 - 4990 @ 40), (N/A, 23)
+	(4930 - 4950 @ 10), (N/A, 23)
+	(5030 - 5045 @ 10), (N/A, 23)
+	(5030 - 5090 @ 40), (N/A, 23)
+	(5050 - 5060 @ 10), (N/A, 23)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 23), DFS
+
+country JO:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 18)
+
+country KE:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country KH:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country KP:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5330 @ 40), (3, 20)
+	(5160 - 5250 @ 40), (3, 20), DFS
+	(5490 - 5630 @ 40), (3, 30), DFS
+	(5735 - 5815 @ 40), (3, 30)
+
+country KR:
+	(2402 - 2482 @ 20), (N/A, 20)
+	(5170 - 5250 @ 20), (3, 20)
+	(5250 - 5330 @ 20), (3, 20), DFS
+	(5490 - 5630 @ 20), (3, 30), DFS
+	(5735 - 5815 @ 20), (3, 30)
+
+country KW:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+
+country KZ:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country LB:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country LI: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country LK:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (3, 17)
+	(5250 - 5330 @ 20), (3, 20), DFS
+	(5490 - 5710 @ 20), (3, 20), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country LT: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country LU: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country LV: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country MC: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 18)
+	(5250 - 5330 @ 40), (N/A, 18), DFS
+
+country MA:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country MO:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 23)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country MK: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country MT: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country MY:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 30), DFS
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country MX:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country NL: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20), NO-OUTDOOR
+	(5250 - 5330 @ 40), (N/A, 20), NO-OUTDOOR, DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country NO: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country NP:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country NZ:
+	(2402 - 2482 @ 40), (N/A, 30)
+	(5170 - 5250 @ 20), (3, 23)
+	(5250 - 5330 @ 20), (3, 23), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country OM:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country PA:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country PE:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country PG:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country PH:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country PK:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country PL: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country PT: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country PR:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 23), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country QA:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country RO: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country RU:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 20), (N/A, 30)
+
+country RW:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5835 @ 40), (N/A, 30)
+
+country SA:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (3, 23)
+	(5250 - 5330 @ 20), (3, 23), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country SE: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country SG:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5735 - 5835 @ 40), (N/A, 20)
+
+country SI: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country SK: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+	(5490 - 5710 @ 40), (N/A, 27), DFS
+
+country SV:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (3, 17)
+	(5250 - 5330 @ 20), (3, 23), DFS
+	(5735 - 5835 @ 20), (3, 30)
+
+country SY:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country TW:
+	(2402 - 2472 @ 40), (3, 27)
+	(5270 - 5330 @ 40), (3, 17), DFS
+	(5735 - 5815 @ 40), (3, 30)
+
+country TH:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country TT:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country TN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (N/A, 20)
+	(5250 - 5330 @ 20), (N/A, 20), DFS
+
+country TR: DFS-ETSI
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 20), (N/A, 20)
+	(5250 - 5330 @ 20), (N/A, 20), DFS
+
+country UA:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country US: DFS-FCC
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5600 @ 40), (3, 20), DFS
+	(5650 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+	(5850 - 5930 @ 20), (N/A, 30)
+
+country UY:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country UZ:
+	(2402 - 2472 @ 40), (3, 27)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country VE:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5735 - 5815 @ 40), (N/A, 23)
+
+country VN:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (N/A, 20)
+	(5250 - 5330 @ 40), (N/A, 20), DFS
+
+country YE:
+	(2402 - 2482 @ 40), (N/A, 20)
+
+country ZA:
+	(2402 - 2482 @ 40), (N/A, 20)
+	(5170 - 5250 @ 40), (3, 17)
+	(5250 - 5330 @ 40), (3, 20), DFS
+	(5490 - 5710 @ 40), (3, 20), DFS
+	(5735 - 5835 @ 40), (3, 30)
+
+country ZW:
+	(2402 - 2482 @ 40), (N/A, 20)
+
diff -urN linux-3.2.4/net/wireless/nl80211.c linux/net/wireless/nl80211.c
--- linux-3.2.4/net/wireless/nl80211.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/wireless/nl80211.c	2013-04-11 13:56:47.520537634 +0800
@@ -4566,8 +4566,15 @@
 	if (info->attrs[NL80211_ATTR_MAC]) {
 		ibss.bssid = nla_data(info->attrs[NL80211_ATTR_MAC]);
 
-		if (!is_valid_ether_addr(ibss.bssid))
-			return -EINVAL;
+		/*
+		 * Normally wildcard BSSID will return -EINVAL, however VANET
+		 * need wildcard BSSID ad-hoc.
+		 * ZHAO Yao @ VANET
+		 */
+		if (!is_broadcast_ether_addr(ibss.bssid)) { 
+			if (!is_valid_ether_addr(ibss.bssid))
+				return -EINVAL;
+		}
 	}
 	ibss.ssid = nla_data(info->attrs[NL80211_ATTR_SSID]);
 	ibss.ssid_len = nla_len(info->attrs[NL80211_ATTR_SSID]);
diff -urN linux-3.2.4/net/wireless/util.c linux/net/wireless/util.c
--- linux-3.2.4/net/wireless/util.c	2012-02-04 04:39:51.000000000 +0800
+++ linux/net/wireless/util.c	2013-04-11 13:56:47.700536658 +0800
@@ -35,10 +35,15 @@
 {
 	/* see 802.11 17.3.8.3.2 and Annex J
 	 * there are overlapping channel numbers in 5GHz and 2GHz bands */
+	/**
+	 * VANET need channel 182 and 184 @ 5.9GHz, see 802.11p
+	 * Then comment out 4.9GHz support code
+	 * ZHAO Yao @ VANET
+	 */
 	if (band == IEEE80211_BAND_5GHZ) {
-		if (chan >= 182 && chan <= 196)
-			return 4000 + chan * 5;
-		else
+//		if (chan >= 182 && chan <= 196)
+//			return 4000 + chan * 5;
+//		else
 			return 5000 + chan * 5;
 	} else { /* IEEE80211_BAND_2GHZ */
 		if (chan == 14)
diff -urN linux-3.2.4/scripts/genksyms/keywords.hash.c linux/scripts/genksyms/keywords.hash.c
--- linux-3.2.4/scripts/genksyms/keywords.hash.c	1970-01-01 07:00:00.000000000 +0700
+++ linux/scripts/genksyms/keywords.hash.c	2013-04-11 13:58:34.436625087 +0800
@@ -0,0 +1,220 @@
+/* ANSI-C code produced by gperf version 3.0.4 */
+/* Command-line: gperf -t --output-file scripts/genksyms/keywords.hash.c_shipped -a -C -E -g -k '1,3,$' -p -t scripts/genksyms/keywords.gperf  */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#endif
+
+#line 4 "scripts/genksyms/keywords.gperf"
+
+struct resword;
+static const struct resword *is_reserved_word(register const char *str, register unsigned int len);
+#line 8 "scripts/genksyms/keywords.gperf"
+struct resword { const char *name; int token; };
+/* maximum key range = 64, duplicates = 0 */
+
+#ifdef __GNUC__
+__inline
+#else
+#ifdef __cplusplus
+inline
+#endif
+#endif
+static unsigned int
+is_reserved_hash (register const char *str, register unsigned int len)
+{
+  static const unsigned char asso_values[] =
+    {
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67,  0,
+      67, 67, 67, 67, 67, 67, 15, 67, 67, 67,
+       0, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67,  0, 67,  0, 67,  5,
+      25, 20, 15, 30, 67, 15, 67, 67, 10,  0,
+      10, 40, 20, 67, 10,  5,  0, 10, 15, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
+      67, 67, 67, 67, 67, 67
+    };
+  return len + asso_values[(unsigned char)str[2]] + asso_values[(unsigned char)str[0]] + asso_values[(unsigned char)str[len - 1]];
+}
+
+#ifdef __GNUC__
+__inline
+#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
+__attribute__ ((__gnu_inline__))
+#endif
+#endif
+const struct resword *
+is_reserved_word (register const char *str, register unsigned int len)
+{
+  enum
+    {
+      TOTAL_KEYWORDS = 45,
+      MIN_WORD_LENGTH = 3,
+      MAX_WORD_LENGTH = 24,
+      MIN_HASH_VALUE = 3,
+      MAX_HASH_VALUE = 66
+    };
+
+  static const struct resword wordlist[] =
+    {
+      {""}, {""}, {""},
+#line 33 "scripts/genksyms/keywords.gperf"
+      {"asm", ASM_KEYW},
+      {""},
+#line 15 "scripts/genksyms/keywords.gperf"
+      {"__asm", ASM_KEYW},
+      {""},
+#line 16 "scripts/genksyms/keywords.gperf"
+      {"__asm__", ASM_KEYW},
+      {""}, {""},
+#line 59 "scripts/genksyms/keywords.gperf"
+      {"__typeof__", TYPEOF_KEYW},
+      {""},
+#line 19 "scripts/genksyms/keywords.gperf"
+      {"__const", CONST_KEYW},
+#line 18 "scripts/genksyms/keywords.gperf"
+      {"__attribute__", ATTRIBUTE_KEYW},
+#line 20 "scripts/genksyms/keywords.gperf"
+      {"__const__", CONST_KEYW},
+#line 25 "scripts/genksyms/keywords.gperf"
+      {"__signed__", SIGNED_KEYW},
+#line 51 "scripts/genksyms/keywords.gperf"
+      {"static", STATIC_KEYW},
+      {""},
+#line 46 "scripts/genksyms/keywords.gperf"
+      {"int", INT_KEYW},
+#line 39 "scripts/genksyms/keywords.gperf"
+      {"char", CHAR_KEYW},
+#line 40 "scripts/genksyms/keywords.gperf"
+      {"const", CONST_KEYW},
+#line 52 "scripts/genksyms/keywords.gperf"
+      {"struct", STRUCT_KEYW},
+#line 31 "scripts/genksyms/keywords.gperf"
+      {"__restrict__", RESTRICT_KEYW},
+#line 32 "scripts/genksyms/keywords.gperf"
+      {"restrict", RESTRICT_KEYW},
+#line 12 "scripts/genksyms/keywords.gperf"
+      {"EXPORT_SYMBOL_GPL_FUTURE", EXPORT_SYMBOL_KEYW},
+#line 23 "scripts/genksyms/keywords.gperf"
+      {"__inline__", INLINE_KEYW},
+      {""},
+#line 27 "scripts/genksyms/keywords.gperf"
+      {"__volatile__", VOLATILE_KEYW},
+#line 10 "scripts/genksyms/keywords.gperf"
+      {"EXPORT_SYMBOL", EXPORT_SYMBOL_KEYW},
+#line 30 "scripts/genksyms/keywords.gperf"
+      {"_restrict", RESTRICT_KEYW},
+      {""},
+#line 17 "scripts/genksyms/keywords.gperf"
+      {"__attribute", ATTRIBUTE_KEYW},
+#line 11 "scripts/genksyms/keywords.gperf"
+      {"EXPORT_SYMBOL_GPL", EXPORT_SYMBOL_KEYW},
+#line 21 "scripts/genksyms/keywords.gperf"
+      {"__extension__", EXTENSION_KEYW},
+#line 42 "scripts/genksyms/keywords.gperf"
+      {"enum", ENUM_KEYW},
+#line 13 "scripts/genksyms/keywords.gperf"
+      {"EXPORT_UNUSED_SYMBOL", EXPORT_SYMBOL_KEYW},
+#line 43 "scripts/genksyms/keywords.gperf"
+      {"extern", EXTERN_KEYW},
+      {""},
+#line 24 "scripts/genksyms/keywords.gperf"
+      {"__signed", SIGNED_KEYW},
+#line 14 "scripts/genksyms/keywords.gperf"
+      {"EXPORT_UNUSED_SYMBOL_GPL", EXPORT_SYMBOL_KEYW},
+#line 54 "scripts/genksyms/keywords.gperf"
+      {"union", UNION_KEYW},
+#line 58 "scripts/genksyms/keywords.gperf"
+      {"typeof", TYPEOF_KEYW},
+#line 53 "scripts/genksyms/keywords.gperf"
+      {"typedef", TYPEDEF_KEYW},
+#line 22 "scripts/genksyms/keywords.gperf"
+      {"__inline", INLINE_KEYW},
+#line 38 "scripts/genksyms/keywords.gperf"
+      {"auto", AUTO_KEYW},
+#line 26 "scripts/genksyms/keywords.gperf"
+      {"__volatile", VOLATILE_KEYW},
+      {""}, {""},
+#line 55 "scripts/genksyms/keywords.gperf"
+      {"unsigned", UNSIGNED_KEYW},
+      {""},
+#line 49 "scripts/genksyms/keywords.gperf"
+      {"short", SHORT_KEYW},
+#line 45 "scripts/genksyms/keywords.gperf"
+      {"inline", INLINE_KEYW},
+      {""},
+#line 57 "scripts/genksyms/keywords.gperf"
+      {"volatile", VOLATILE_KEYW},
+#line 47 "scripts/genksyms/keywords.gperf"
+      {"long", LONG_KEYW},
+#line 29 "scripts/genksyms/keywords.gperf"
+      {"_Bool", BOOL_KEYW},
+      {""}, {""},
+#line 48 "scripts/genksyms/keywords.gperf"
+      {"register", REGISTER_KEYW},
+#line 56 "scripts/genksyms/keywords.gperf"
+      {"void", VOID_KEYW},
+#line 44 "scripts/genksyms/keywords.gperf"
+      {"float", FLOAT_KEYW},
+#line 41 "scripts/genksyms/keywords.gperf"
+      {"double", DOUBLE_KEYW},
+      {""}, {""}, {""}, {""},
+#line 50 "scripts/genksyms/keywords.gperf"
+      {"signed", SIGNED_KEYW}
+    };
+
+  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
+    {
+      register int key = is_reserved_hash (str, len);
+
+      if (key <= MAX_HASH_VALUE && key >= 0)
+        {
+          register const char *s = wordlist[key].name;
+
+          if (*str == *s && !strcmp (str + 1, s + 1))
+            return &wordlist[key];
+        }
+    }
+  return 0;
+}
diff -urN linux-3.2.4/scripts/genksyms/lex.lex.c linux/scripts/genksyms/lex.lex.c
--- linux-3.2.4/scripts/genksyms/lex.lex.c	1970-01-01 07:00:00.000000000 +0700
+++ linux/scripts/genksyms/lex.lex.c	2013-04-11 13:58:34.469958239 +0800
@@ -0,0 +1,2245 @@
+
+#line 3 "scripts/genksyms/lex.lex.c_shipped"
+
+#define  YY_INT_ALIGNED short int
+
+/* A lexical scanner generated by flex */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+#define YY_FLEX_SUBMINOR_VERSION 35
+#if YY_FLEX_SUBMINOR_VERSION > 0
+#define FLEX_BETA
+#endif
+
+/* First, we deal with  platform-specific or compiler-specific issues. */
+
+/* begin standard C headers. */
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+#include <stdlib.h>
+
+/* end standard C headers. */
+
+/* flex integer type definitions */
+
+#ifndef FLEXINT_H
+#define FLEXINT_H
+
+/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
+
+#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+
+/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
+ * if you want the limit (max/min) macros for int types. 
+ */
+#ifndef __STDC_LIMIT_MACROS
+#define __STDC_LIMIT_MACROS 1
+#endif
+
+#include <inttypes.h>
+typedef int8_t flex_int8_t;
+typedef uint8_t flex_uint8_t;
+typedef int16_t flex_int16_t;
+typedef uint16_t flex_uint16_t;
+typedef int32_t flex_int32_t;
+typedef uint32_t flex_uint32_t;
+#else
+typedef signed char flex_int8_t;
+typedef short int flex_int16_t;
+typedef int flex_int32_t;
+typedef unsigned char flex_uint8_t; 
+typedef unsigned short int flex_uint16_t;
+typedef unsigned int flex_uint32_t;
+#endif /* ! C99 */
+
+/* Limits of integral types. */
+#ifndef INT8_MIN
+#define INT8_MIN               (-128)
+#endif
+#ifndef INT16_MIN
+#define INT16_MIN              (-32767-1)
+#endif
+#ifndef INT32_MIN
+#define INT32_MIN              (-2147483647-1)
+#endif
+#ifndef INT8_MAX
+#define INT8_MAX               (127)
+#endif
+#ifndef INT16_MAX
+#define INT16_MAX              (32767)
+#endif
+#ifndef INT32_MAX
+#define INT32_MAX              (2147483647)
+#endif
+#ifndef UINT8_MAX
+#define UINT8_MAX              (255U)
+#endif
+#ifndef UINT16_MAX
+#define UINT16_MAX             (65535U)
+#endif
+#ifndef UINT32_MAX
+#define UINT32_MAX             (4294967295U)
+#endif
+
+#endif /* ! FLEXINT_H */
+
+#ifdef __cplusplus
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+/* C99 requires __STDC__ to be defined as 1. */
+#if defined (__STDC__)
+
+#define YY_USE_CONST
+
+#endif	/* defined (__STDC__) */
+#endif	/* ! __cplusplus */
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN (yy_start) = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START (((yy_start) - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart(yyin  )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#ifndef YY_BUF_SIZE
+#define YY_BUF_SIZE 16384
+#endif
+
+/* The state buf must be large enough to hold one state per character in the main buffer.
+ */
+#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
+
+#ifndef YY_TYPEDEF_YY_BUFFER_STATE
+#define YY_TYPEDEF_YY_BUFFER_STATE
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+#endif
+
+extern int yyleng;
+
+extern FILE *yyin, *yyout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+    #define YY_LESS_LINENO(n)
+    
+/* Return all but the first "n" matched characters back to the input stream. */
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+        int yyless_macro_arg = (n); \
+        YY_LESS_LINENO(yyless_macro_arg);\
+		*yy_cp = (yy_hold_char); \
+		YY_RESTORE_YY_MORE_OFFSET \
+		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, (yytext_ptr)  )
+
+#ifndef YY_TYPEDEF_YY_SIZE_T
+#define YY_TYPEDEF_YY_SIZE_T
+typedef size_t yy_size_t;
+#endif
+
+#ifndef YY_STRUCT_YY_BUFFER_STATE
+#define YY_STRUCT_YY_BUFFER_STATE
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+    int yy_bs_lineno; /**< The line count. */
+    int yy_bs_column; /**< The column count. */
+    
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+
+	};
+#endif /* !YY_STRUCT_YY_BUFFER_STATE */
+
+/* Stack of input buffers. */
+static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
+static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
+static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ *
+ * Returns the top of the stack, or NULL.
+ */
+#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
+                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
+                          : NULL)
+
+/* Same as previous macro, but useful when we know that the buffer stack is not
+ * NULL or when we need an lvalue. For internal use only.
+ */
+#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+static char yy_hold_char;
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+int yyleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 0;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void yyrestart (FILE *input_file  );
+void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
+YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
+void yy_delete_buffer (YY_BUFFER_STATE b  );
+void yy_flush_buffer (YY_BUFFER_STATE b  );
+void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
+void yypop_buffer_state (void );
+
+static void yyensure_buffer_stack (void );
+static void yy_load_buffer_state (void );
+static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );
+
+#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )
+
+YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
+YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
+YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );
+
+void *yyalloc (yy_size_t  );
+void *yyrealloc (void *,yy_size_t  );
+void yyfree (void *  );
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! YY_CURRENT_BUFFER ){ \
+        yyensure_buffer_stack (); \
+		YY_CURRENT_BUFFER_LVALUE =    \
+            yy_create_buffer(yyin,YY_BUF_SIZE ); \
+	} \
+	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! YY_CURRENT_BUFFER ){\
+        yyensure_buffer_stack (); \
+		YY_CURRENT_BUFFER_LVALUE =    \
+            yy_create_buffer(yyin,YY_BUF_SIZE ); \
+	} \
+	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
+
+/* Begin user sect3 */
+
+#define yywrap(n) 1
+#define YY_SKIP_YYWRAP
+
+typedef unsigned char YY_CHAR;
+
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+
+typedef int yy_state_type;
+
+extern int yylineno;
+
+int yylineno = 1;
+
+extern char *yytext;
+#define yytext_ptr yytext
+
+static yy_state_type yy_get_previous_state (void );
+static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
+static int yy_get_next_buffer (void );
+static void yy_fatal_error (yyconst char msg[]  );
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	(yytext_ptr) = yy_bp; \
+	yyleng = (size_t) (yy_cp - yy_bp); \
+	(yy_hold_char) = *yy_cp; \
+	*yy_cp = '\0'; \
+	(yy_c_buf_p) = yy_cp;
+
+#define YY_NUM_RULES 13
+#define YY_END_OF_BUFFER 14
+/* This struct is not used in this scanner,
+   but its presence is necessary. */
+struct yy_trans_info
+	{
+	flex_int32_t yy_verify;
+	flex_int32_t yy_nxt;
+	};
+static yyconst flex_int16_t yy_accept[73] =
+    {   0,
+        0,    0,   14,   12,    4,    3,   12,    7,   12,   12,
+       12,   12,   12,    9,    9,   12,   12,    7,   12,   12,
+        4,    0,    5,    0,    7,    8,    0,    6,    0,    0,
+       10,   10,    9,    0,    0,    9,    9,    0,    9,    0,
+        0,    0,    0,    2,    0,    0,   11,    0,   10,    0,
+       10,    9,    9,    0,    0,    0,   10,   10,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        1,    0
+    } ;
+
+static yyconst flex_int32_t yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    2,    1,    5,    6,    7,    8,    9,   10,    1,
+        1,    8,   11,    1,   12,   13,    8,   14,   15,   15,
+       15,   15,   15,   15,   15,   16,   16,    1,    1,   17,
+       18,   19,    1,    1,   20,   20,   20,   20,   21,   22,
+        7,    7,    7,    7,    7,   23,    7,    7,    7,    7,
+        7,    7,    7,    7,   24,    7,    7,   25,    7,    7,
+        1,   26,    1,    8,    7,    1,   20,   20,   20,   20,
+
+       21,   22,    7,    7,    7,    7,    7,   27,    7,    7,
+        7,    7,    7,    7,    7,    7,   24,    7,    7,   25,
+        7,    7,    1,   28,    1,    8,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst flex_int32_t yy_meta[29] =
+    {   0,
+        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
+        4,    4,    5,    6,    6,    6,    1,    1,    1,    7,
+        8,    7,    3,    3,    3,    1,    3,    1
+    } ;
+
+static yyconst flex_int16_t yy_base[85] =
+    {   0,
+        0,  145,  150,  266,   27,  266,   25,    0,  131,   23,
+       23,   16,   23,   39,   31,   25,   39,   60,   22,   65,
+       57,   43,  266,    0,    0,  266,   61,  266,    0,  128,
+       74,    0,  113,   59,   62,  113,   52,    0,    0,   72,
+       66,  110,  100,  266,   73,   74,  266,   70,  266,   90,
+      103,  266,   84,  129,  108,  113,  143,  266,  107,   66,
+      118,  137,  168,  120,   80,   91,  145,  143,   83,   41,
+      266,  266,  190,  196,  204,  212,  220,  228,  232,  237,
+      238,  243,  249,  257
+    } ;
+
+static yyconst flex_int16_t yy_def[85] =
+    {   0,
+       72,    1,   72,   72,   72,   72,   73,   74,   72,   72,
+       75,   72,   72,   72,   14,   72,   72,   74,   72,   76,
+       72,   73,   72,   77,   74,   72,   75,   72,   78,   72,
+       72,   31,   14,   79,   80,   72,   72,   81,   15,   73,
+       75,   76,   76,   72,   73,   75,   72,   82,   72,   72,
+       72,   72,   81,   76,   54,   72,   72,   72,   76,   54,
+       76,   76,   76,   54,   83,   76,   63,   83,   84,   84,
+       72,    0,   72,   72,   72,   72,   72,   72,   72,   72,
+       72,   72,   72,   72
+    } ;
+
+static yyconst flex_int16_t yy_nxt[295] =
+    {   0,
+        4,    5,    6,    5,    7,    4,    8,    9,   10,   11,
+        9,   12,   13,   14,   15,   15,   16,    9,   17,    8,
+        8,    8,   18,    8,    8,    4,    8,   19,   21,   23,
+       21,   26,   28,   26,   26,   30,   31,   31,   31,   26,
+       26,   26,   26,   71,   39,   39,   39,   23,   29,   26,
+       24,   32,   33,   33,   34,   72,   26,   26,   21,   35,
+       21,   36,   37,   38,   40,   36,   43,   44,   24,   41,
+       28,   32,   50,   50,   52,   28,   23,   23,   52,   35,
+       56,   56,   44,   28,   42,   71,   29,   31,   31,   31,
+       42,   29,   59,   44,   48,   49,   49,   24,   24,   29,
+
+       49,   43,   44,   51,   51,   51,   36,   37,   59,   44,
+       36,   65,   44,   54,   55,   55,   51,   51,   51,   59,
+       44,   64,   64,   64,   58,   58,   57,   57,   57,   58,
+       59,   44,   42,   64,   64,   64,   52,   72,   59,   44,
+       47,   66,   60,   60,   42,   44,   59,   69,   26,   72,
+       20,   61,   62,   63,   72,   61,   57,   57,   57,   66,
+       72,   72,   72,   66,   49,   49,   72,   61,   62,   49,
+       44,   61,   72,   72,   72,   72,   72,   72,   72,   72,
+       72,   67,   67,   67,   72,   72,   72,   67,   67,   67,
+       22,   22,   22,   22,   22,   22,   22,   22,   25,   72,
+
+       72,   25,   25,   25,   27,   27,   27,   27,   27,   27,
+       27,   27,   42,   42,   42,   42,   42,   42,   42,   42,
+       45,   72,   45,   45,   45,   45,   45,   45,   46,   72,
+       46,   46,   46,   46,   46,   46,   34,   34,   72,   34,
+       51,   72,   51,   53,   53,   53,   57,   72,   57,   68,
+       68,   68,   68,   68,   68,   68,   68,   70,   70,   70,
+       70,   70,   70,   70,   70,    3,   72,   72,   72,   72,
+       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
+       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
+       72,   72,   72,   72
+
+    } ;
+
+static yyconst flex_int16_t yy_chk[295] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    5,    7,
+        5,   10,   11,   12,   12,   13,   13,   13,   13,   19,
+       10,   16,   16,   70,   15,   15,   15,   22,   11,   19,
+        7,   14,   14,   14,   14,   15,   17,   17,   21,   14,
+       21,   14,   14,   14,   18,   14,   20,   20,   22,   18,
+       27,   34,   35,   35,   37,   41,   40,   45,   37,   34,
+       48,   48,   65,   46,   65,   69,   27,   31,   31,   31,
+       60,   41,   66,   66,   31,   31,   31,   40,   45,   46,
+
+       31,   43,   43,   50,   50,   50,   53,   53,   59,   59,
+       53,   59,   42,   43,   43,   43,   51,   51,   51,   61,
+       61,   55,   55,   55,   51,   51,   56,   56,   56,   51,
+       54,   54,   55,   64,   64,   64,   36,   33,   62,   62,
+       30,   61,   54,   54,   64,   68,   67,   68,    9,    3,
+        2,   54,   54,   54,    0,   54,   57,   57,   57,   62,
+        0,    0,    0,   62,   57,   57,    0,   67,   67,   57,
+       63,   67,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,   63,   63,   63,    0,    0,    0,   63,   63,   63,
+       73,   73,   73,   73,   73,   73,   73,   73,   74,    0,
+
+        0,   74,   74,   74,   75,   75,   75,   75,   75,   75,
+       75,   75,   76,   76,   76,   76,   76,   76,   76,   76,
+       77,    0,   77,   77,   77,   77,   77,   77,   78,    0,
+       78,   78,   78,   78,   78,   78,   79,   79,    0,   79,
+       80,    0,   80,   81,   81,   81,   82,    0,   82,   83,
+       83,   83,   83,   83,   83,   83,   83,   84,   84,   84,
+       84,   84,   84,   84,   84,   72,   72,   72,   72,   72,
+       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
+       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
+       72,   72,   72,   72
+
+    } ;
+
+static yy_state_type yy_last_accepting_state;
+static char *yy_last_accepting_cpos;
+
+extern int yy_flex_debug;
+int yy_flex_debug = 0;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+/* Lexical analysis for genksyms.
+   Copyright 1996, 1997 Linux International.
+
+   New implementation contributed by Richard Henderson <rth@tamu.edu>
+   Based on original work by Bjorn Ekwall <bj0rn@blox.se>
+
+   Taken from Linux modutils 2.4.22.
+
+   This program is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published by the
+   Free Software Foundation; either version 2 of the License, or (at your
+   option) any later version.
+
+   This program is distributed in the hope that it will be useful, but
+   WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software Foundation,
+   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
+
+#include <limits.h>
+#include <stdlib.h>
+#include <string.h>
+#include <ctype.h>
+
+#include "genksyms.h"
+#include "parse.tab.h"
+
+/* We've got a two-level lexer here.  We let flex do basic tokenization
+   and then we categorize those basic tokens in the second stage.  */
+#define YY_DECL		static int yylex1(void)
+
+/* We don't do multiple input files.  */
+#define YY_NO_INPUT 1
+
+#define INITIAL 0
+
+#ifndef YY_NO_UNISTD_H
+/* Special case for "unistd.h", since it is non-ANSI. We include it way
+ * down here because we want the user's section 1 to have been scanned first.
+ * The user has a chance to override it with an option.
+ */
+#include <unistd.h>
+#endif
+
+#ifndef YY_EXTRA_TYPE
+#define YY_EXTRA_TYPE void *
+#endif
+
+static int yy_init_globals (void );
+
+/* Accessor methods to globals.
+   These are made visible to non-reentrant scanners for convenience. */
+
+int yylex_destroy (void );
+
+int yyget_debug (void );
+
+void yyset_debug (int debug_flag  );
+
+YY_EXTRA_TYPE yyget_extra (void );
+
+void yyset_extra (YY_EXTRA_TYPE user_defined  );
+
+FILE *yyget_in (void );
+
+void yyset_in  (FILE * in_str  );
+
+FILE *yyget_out (void );
+
+void yyset_out  (FILE * out_str  );
+
+int yyget_leng (void );
+
+char *yyget_text (void );
+
+int yyget_lineno (void );
+
+void yyset_lineno (int line_number  );
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap (void );
+#else
+extern int yywrap (void );
+#endif
+#endif
+
+    static void yyunput (int c,char *buf_ptr  );
+    
+#ifndef yytext_ptr
+static void yy_flex_strncpy (char *,yyconst char *,int );
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen (yyconst char * );
+#endif
+
+#ifndef YY_NO_INPUT
+
+#ifdef __cplusplus
+static int yyinput (void );
+#else
+static int input (void );
+#endif
+
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO fwrite( yytext, yyleng, 1, yyout )
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
+		{ \
+		int c = '*'; \
+		int n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else \
+		{ \
+		errno=0; \
+		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
+			{ \
+			if( errno != EINTR) \
+				{ \
+				YY_FATAL_ERROR( "input in flex scanner failed" ); \
+				break; \
+				} \
+			errno=0; \
+			clearerr(yyin); \
+			} \
+		}\
+\
+
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* end tables serialization structures and prototypes */
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL_IS_OURS 1
+
+extern int yylex (void);
+
+#define YY_DECL int yylex (void)
+#endif /* !YY_DECL */
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	if ( yyleng > 0 ) \
+		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
+				(yytext[yyleng - 1] == '\n'); \
+	YY_USER_ACTION
+
+/** The main scanner function which does all the work.
+ */
+YY_DECL
+{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+    
+ /* Keep track of our location in the original source files.  */
+
+	if ( !(yy_init) )
+		{
+		(yy_init) = 1;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! (yy_start) )
+			(yy_start) = 1;	/* first start state */
+
+		if ( ! yyin )
+			yyin = stdin;
+
+		if ( ! yyout )
+			yyout = stdout;
+
+		if ( ! YY_CURRENT_BUFFER ) {
+			yyensure_buffer_stack ();
+			YY_CURRENT_BUFFER_LVALUE =
+				yy_create_buffer(yyin,YY_BUF_SIZE );
+		}
+
+		yy_load_buffer_state( );
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = (yy_c_buf_p);
+
+		/* Support of yytext. */
+		*yy_cp = (yy_hold_char);
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = (yy_start);
+		yy_current_state += YY_AT_BOL();
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			if ( yy_accept[yy_current_state] )
+				{
+				(yy_last_accepting_state) = yy_current_state;
+				(yy_last_accepting_cpos) = yy_cp;
+				}
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 73 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			++yy_cp;
+			}
+		while ( yy_base[yy_current_state] != 266 );
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+		if ( yy_act == 0 )
+			{ /* have to back up */
+			yy_cp = (yy_last_accepting_cpos);
+			yy_current_state = (yy_last_accepting_state);
+			yy_act = yy_accept[yy_current_state];
+			}
+
+		YY_DO_BEFORE_ACTION;
+
+do_action:	/* This label is used only to access EOF actions. */
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+			case 0: /* must back up */
+			/* undo the effects of YY_DO_BEFORE_ACTION */
+			*yy_cp = (yy_hold_char);
+			yy_cp = (yy_last_accepting_cpos);
+			yy_current_state = (yy_last_accepting_state);
+			goto yy_find_action;
+
+case 1:
+/* rule 1 can match eol */
+YY_RULE_SETUP
+return FILENAME;
+	YY_BREAK
+case 2:
+/* rule 2 can match eol */
+YY_RULE_SETUP
+cur_line++;
+	YY_BREAK
+case 3:
+/* rule 3 can match eol */
+YY_RULE_SETUP
+cur_line++;
+	YY_BREAK
+/* Ignore all other whitespace.  */
+case 4:
+YY_RULE_SETUP
+;
+	YY_BREAK
+case 5:
+/* rule 5 can match eol */
+YY_RULE_SETUP
+return STRING;
+	YY_BREAK
+case 6:
+/* rule 6 can match eol */
+YY_RULE_SETUP
+return CHAR;
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+return IDENT;
+	YY_BREAK
+/* The Pedant requires that the other C multi-character tokens be
+    recognized as tokens.  We don't actually use them since we don't
+    parse expressions, but we do want whitespace to be arranged
+    around them properly.  */
+case 8:
+YY_RULE_SETUP
+return OTHER;
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+return INT;
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+return REAL;
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+return DOTS;
+	YY_BREAK
+/* All other tokens are single characters.  */
+case 12:
+YY_RULE_SETUP
+return yytext[0];
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+ECHO;
+	YY_BREAK
+case YY_STATE_EOF(INITIAL):
+	yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = (yy_hold_char);
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between YY_CURRENT_BUFFER and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
+			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
+			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state(  );
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++(yy_c_buf_p);
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = (yy_c_buf_p);
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer(  ) )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				(yy_did_buffer_switch_on_eof) = 0;
+
+				if ( yywrap( ) )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! (yy_did_buffer_switch_on_eof) )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				(yy_c_buf_p) =
+					(yytext_ptr) + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state(  );
+
+				yy_cp = (yy_c_buf_p);
+				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				(yy_c_buf_p) =
+				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
+
+				yy_current_state = yy_get_previous_state(  );
+
+				yy_cp = (yy_c_buf_p);
+				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+} /* end of yylex */
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+static int yy_get_next_buffer (void)
+{
+    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
+	register char *source = (yytext_ptr);
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
+
+	else
+		{
+			int num_to_read =
+			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
+
+			int yy_c_buf_p_offset =
+				(int) ((yy_c_buf_p) - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
+						number_to_move - 1;
+
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
+			(yy_n_chars), (size_t) num_to_read );
+
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	if ( (yy_n_chars) == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart(yyin  );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
+		/* Extend the array by 50%, plus the number we really need. */
+		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
+		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
+		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
+			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
+	}
+
+	(yy_n_chars) += number_to_move;
+	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
+	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
+
+	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
+
+	return ret_val;
+}
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+    static yy_state_type yy_get_previous_state (void)
+{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+    
+	yy_current_state = (yy_start);
+	yy_current_state += YY_AT_BOL();
+
+	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		if ( yy_accept[yy_current_state] )
+			{
+			(yy_last_accepting_state) = yy_current_state;
+			(yy_last_accepting_cpos) = yy_cp;
+			}
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 73 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		}
+
+	return yy_current_state;
+}
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
+{
+	register int yy_is_jam;
+    	register char *yy_cp = (yy_c_buf_p);
+
+	register YY_CHAR yy_c = 1;
+	if ( yy_accept[yy_current_state] )
+		{
+		(yy_last_accepting_state) = yy_current_state;
+		(yy_last_accepting_cpos) = yy_cp;
+		}
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 73 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 72);
+
+	return yy_is_jam ? 0 : yy_current_state;
+}
+
+    static void yyunput (int c, register char * yy_bp )
+{
+	register char *yy_cp;
+    
+    yy_cp = (yy_c_buf_p);
+
+	/* undo effects of setting up yytext */
+	*yy_cp = (yy_hold_char);
+
+	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = (yy_n_chars) + 2;
+		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
+					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
+		register char *source =
+				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
+
+		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
+			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
+
+		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+	(yytext_ptr) = yy_bp;
+	(yy_hold_char) = *yy_cp;
+	(yy_c_buf_p) = yy_cp;
+}
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+    static int yyinput (void)
+#else
+    static int input  (void)
+#endif
+
+{
+	int c;
+    
+	*(yy_c_buf_p) = (yy_hold_char);
+
+	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
+			/* This was really a NUL. */
+			*(yy_c_buf_p) = '\0';
+
+		else
+			{ /* need more input */
+			int offset = (yy_c_buf_p) - (yytext_ptr);
+			++(yy_c_buf_p);
+
+			switch ( yy_get_next_buffer(  ) )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart(yyin );
+
+					/*FALLTHROUGH*/
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap( ) )
+						return EOF;
+
+					if ( ! (yy_did_buffer_switch_on_eof) )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					(yy_c_buf_p) = (yytext_ptr) + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
+	*(yy_c_buf_p) = '\0';	/* preserve yytext */
+	(yy_hold_char) = *++(yy_c_buf_p);
+
+	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
+
+	return c;
+}
+#endif	/* ifndef YY_NO_INPUT */
+
+/** Immediately switch to a different input stream.
+ * @param input_file A readable stream.
+ * 
+ * @note This function does not reset the start condition to @c INITIAL .
+ */
+    void yyrestart  (FILE * input_file )
+{
+    
+	if ( ! YY_CURRENT_BUFFER ){
+        yyensure_buffer_stack ();
+		YY_CURRENT_BUFFER_LVALUE =
+            yy_create_buffer(yyin,YY_BUF_SIZE );
+	}
+
+	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
+	yy_load_buffer_state( );
+}
+
+/** Switch to a different input buffer.
+ * @param new_buffer The new input buffer.
+ * 
+ */
+    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
+{
+    
+	/* TODO. We should be able to replace this entire function body
+	 * with
+	 *		yypop_buffer_state();
+	 *		yypush_buffer_state(new_buffer);
+     */
+	yyensure_buffer_stack ();
+	if ( YY_CURRENT_BUFFER == new_buffer )
+		return;
+
+	if ( YY_CURRENT_BUFFER )
+		{
+		/* Flush out information for old buffer. */
+		*(yy_c_buf_p) = (yy_hold_char);
+		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	YY_CURRENT_BUFFER_LVALUE = new_buffer;
+	yy_load_buffer_state( );
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	(yy_did_buffer_switch_on_eof) = 1;
+}
+
+static void yy_load_buffer_state  (void)
+{
+    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
+	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
+	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
+	(yy_hold_char) = *(yy_c_buf_p);
+}
+
+/** Allocate and initialize an input buffer state.
+ * @param file A readable stream.
+ * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
+ * 
+ * @return the allocated buffer state.
+ */
+    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
+{
+	YY_BUFFER_STATE b;
+    
+	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer(b,file );
+
+	return b;
+}
+
+/** Destroy the buffer.
+ * @param b a buffer created with yy_create_buffer()
+ * 
+ */
+    void yy_delete_buffer (YY_BUFFER_STATE  b )
+{
+    
+	if ( ! b )
+		return;
+
+	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
+		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yyfree((void *) b->yy_ch_buf  );
+
+	yyfree((void *) b  );
+}
+
+#ifndef __cplusplus
+extern int isatty (int );
+#endif /* __cplusplus */
+    
+/* Initializes or reinitializes a buffer.
+ * This function is sometimes called more than once on the same buffer,
+ * such as during a yyrestart() or at EOF.
+ */
+    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
+
+{
+	int oerrno = errno;
+    
+	yy_flush_buffer(b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+    /* If b is the current buffer, then yy_init_buffer was _probably_
+     * called from yyrestart() or through yy_get_next_buffer.
+     * In that case, we don't want to reset the lineno or column.
+     */
+    if (b != YY_CURRENT_BUFFER){
+        b->yy_bs_lineno = 1;
+        b->yy_bs_column = 0;
+    }
+
+        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+    
+	errno = oerrno;
+}
+
+/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
+ * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
+ * 
+ */
+    void yy_flush_buffer (YY_BUFFER_STATE  b )
+{
+    	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == YY_CURRENT_BUFFER )
+		yy_load_buffer_state( );
+}
+
+/** Pushes the new state onto the stack. The new state becomes
+ *  the current state. This function will allocate the stack
+ *  if necessary.
+ *  @param new_buffer The new state.
+ *  
+ */
+void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
+{
+    	if (new_buffer == NULL)
+		return;
+
+	yyensure_buffer_stack();
+
+	/* This block is copied from yy_switch_to_buffer. */
+	if ( YY_CURRENT_BUFFER )
+		{
+		/* Flush out information for old buffer. */
+		*(yy_c_buf_p) = (yy_hold_char);
+		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
+		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
+		}
+
+	/* Only push if top exists. Otherwise, replace top. */
+	if (YY_CURRENT_BUFFER)
+		(yy_buffer_stack_top)++;
+	YY_CURRENT_BUFFER_LVALUE = new_buffer;
+
+	/* copied from yy_switch_to_buffer. */
+	yy_load_buffer_state( );
+	(yy_did_buffer_switch_on_eof) = 1;
+}
+
+/** Removes and deletes the top of the stack, if present.
+ *  The next element becomes the new top.
+ *  
+ */
+void yypop_buffer_state (void)
+{
+    	if (!YY_CURRENT_BUFFER)
+		return;
+
+	yy_delete_buffer(YY_CURRENT_BUFFER );
+	YY_CURRENT_BUFFER_LVALUE = NULL;
+	if ((yy_buffer_stack_top) > 0)
+		--(yy_buffer_stack_top);
+
+	if (YY_CURRENT_BUFFER) {
+		yy_load_buffer_state( );
+		(yy_did_buffer_switch_on_eof) = 1;
+	}
+}
+
+/* Allocates the stack if it does not exist.
+ *  Guarantees space for at least one push.
+ */
+static void yyensure_buffer_stack (void)
+{
+	int num_to_alloc;
+    
+	if (!(yy_buffer_stack)) {
+
+		/* First allocation is just for 2 elements, since we don't know if this
+		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
+		 * immediate realloc on the next call.
+         */
+		num_to_alloc = 1;
+		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
+								(num_to_alloc * sizeof(struct yy_buffer_state*)
+								);
+		if ( ! (yy_buffer_stack) )
+			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
+								  
+		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
+				
+		(yy_buffer_stack_max) = num_to_alloc;
+		(yy_buffer_stack_top) = 0;
+		return;
+	}
+
+	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){
+
+		/* Increase the buffer to prepare for a possible push. */
+		int grow_size = 8 /* arbitrary grow size */;
+
+		num_to_alloc = (yy_buffer_stack_max) + grow_size;
+		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
+								((yy_buffer_stack),
+								num_to_alloc * sizeof(struct yy_buffer_state*)
+								);
+		if ( ! (yy_buffer_stack) )
+			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
+
+		/* zero only the new slots.*/
+		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
+		(yy_buffer_stack_max) = num_to_alloc;
+	}
+}
+
+/** Setup the input buffer state to scan directly from a user-specified character buffer.
+ * @param base the character buffer
+ * @param size the size in bytes of the character buffer
+ * 
+ * @return the newly allocated buffer state object. 
+ */
+YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
+{
+	YY_BUFFER_STATE b;
+    
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer(b  );
+
+	return b;
+}
+
+/** Setup the input buffer state to scan a string. The next call to yylex() will
+ * scan from a @e copy of @a str.
+ * @param yystr a NUL-terminated string to scan
+ * 
+ * @return the newly allocated buffer state object.
+ * @note If you want to scan bytes that may contain NUL values, then use
+ *       yy_scan_bytes() instead.
+ */
+YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
+{
+    
+	return yy_scan_bytes(yystr,strlen(yystr) );
+}
+
+/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
+ * scan from a @e copy of @a bytes.
+ * @param bytes the byte buffer to scan
+ * @param len the number of bytes in the buffer pointed to by @a bytes.
+ * 
+ * @return the newly allocated buffer state object.
+ */
+YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
+{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+    
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = _yybytes_len + 2;
+	buf = (char *) yyalloc(n  );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < _yybytes_len; ++i )
+		buf[i] = yybytes[i];
+
+	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer(buf,n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+}
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+static void yy_fatal_error (yyconst char* msg )
+{
+    	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+}
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+        int yyless_macro_arg = (n); \
+        YY_LESS_LINENO(yyless_macro_arg);\
+		yytext[yyleng] = (yy_hold_char); \
+		(yy_c_buf_p) = yytext + yyless_macro_arg; \
+		(yy_hold_char) = *(yy_c_buf_p); \
+		*(yy_c_buf_p) = '\0'; \
+		yyleng = yyless_macro_arg; \
+		} \
+	while ( 0 )
+
+/* Accessor  methods (get/set functions) to struct members. */
+
+/** Get the current line number.
+ * 
+ */
+int yyget_lineno  (void)
+{
+        
+    return yylineno;
+}
+
+/** Get the input stream.
+ * 
+ */
+FILE *yyget_in  (void)
+{
+        return yyin;
+}
+
+/** Get the output stream.
+ * 
+ */
+FILE *yyget_out  (void)
+{
+        return yyout;
+}
+
+/** Get the length of the current token.
+ * 
+ */
+int yyget_leng  (void)
+{
+        return yyleng;
+}
+
+/** Get the current token.
+ * 
+ */
+
+char *yyget_text  (void)
+{
+        return yytext;
+}
+
+/** Set the current line number.
+ * @param line_number
+ * 
+ */
+void yyset_lineno (int  line_number )
+{
+    
+    yylineno = line_number;
+}
+
+/** Set the input stream. This does not discard the current
+ * input buffer.
+ * @param in_str A readable stream.
+ * 
+ * @see yy_switch_to_buffer
+ */
+void yyset_in (FILE *  in_str )
+{
+        yyin = in_str ;
+}
+
+void yyset_out (FILE *  out_str )
+{
+        yyout = out_str ;
+}
+
+int yyget_debug  (void)
+{
+        return yy_flex_debug;
+}
+
+void yyset_debug (int  bdebug )
+{
+        yy_flex_debug = bdebug ;
+}
+
+static int yy_init_globals (void)
+{
+        /* Initialization is the same as for the non-reentrant scanner.
+     * This function is called from yylex_destroy(), so don't allocate here.
+     */
+
+    (yy_buffer_stack) = 0;
+    (yy_buffer_stack_top) = 0;
+    (yy_buffer_stack_max) = 0;
+    (yy_c_buf_p) = (char *) 0;
+    (yy_init) = 0;
+    (yy_start) = 0;
+
+/* Defined in main.c */
+#ifdef YY_STDINIT
+    yyin = stdin;
+    yyout = stdout;
+#else
+    yyin = (FILE *) 0;
+    yyout = (FILE *) 0;
+#endif
+
+    /* For future reference: Set errno on error, since we are called by
+     * yylex_init()
+     */
+    return 0;
+}
+
+/* yylex_destroy is for both reentrant and non-reentrant scanners. */
+int yylex_destroy  (void)
+{
+    
+    /* Pop the buffer stack, destroying each element. */
+	while(YY_CURRENT_BUFFER){
+		yy_delete_buffer(YY_CURRENT_BUFFER  );
+		YY_CURRENT_BUFFER_LVALUE = NULL;
+		yypop_buffer_state();
+	}
+
+	/* Destroy the stack itself. */
+	yyfree((yy_buffer_stack) );
+	(yy_buffer_stack) = NULL;
+
+    /* Reset the globals. This is important in a non-reentrant scanner so the next time
+     * yylex() is called, initialization will occur. */
+    yy_init_globals( );
+
+    return 0;
+}
+
+/*
+ * Internal utility routines.
+ */
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
+{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+}
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen (yyconst char * s )
+{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+}
+#endif
+
+void *yyalloc (yy_size_t  size )
+{
+	return (void *) malloc( size );
+}
+
+void *yyrealloc  (void * ptr, yy_size_t  size )
+{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+}
+
+void yyfree (void * ptr )
+{
+	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
+}
+
+#define YYTABLES_NAME "yytables"
+
+/* Bring in the keyword recognizer.  */
+
+#include "keywords.hash.c"
+
+/* Macros to append to our phrase collection list.  */
+
+/*
+ * We mark any token, that that equals to a known enumerator, as
+ * SYM_ENUM_CONST. The parser will change this for struct and union tags later,
+ * the only problem is struct and union members:
+ *    enum e { a, b }; struct s { int a, b; }
+ * but in this case, the only effect will be, that the ABI checksums become
+ * more volatile, which is acceptable. Also, such collisions are quite rare,
+ * so far it was only observed in include/linux/telephony.h.
+ */
+#define _APP(T,L)	do {						   \
+			  cur_node = next_node;				   \
+			  next_node = xmalloc(sizeof(*next_node));	   \
+			  next_node->next = cur_node;			   \
+			  cur_node->string = memcpy(xmalloc(L+1), T, L+1); \
+			  cur_node->tag =				   \
+			    find_symbol(cur_node->string, SYM_ENUM_CONST, 1)?\
+			    SYM_ENUM_CONST : SYM_NORMAL ;		   \
+			  cur_node->in_source_file = in_source_file;       \
+			} while (0)
+
+#define APP		_APP(yytext, yyleng)
+
+/* The second stage lexer.  Here we incorporate knowledge of the state
+   of the parser to tailor the tokens that are returned.  */
+
+int
+yylex(void)
+{
+  static enum {
+    ST_NOTSTARTED, ST_NORMAL, ST_ATTRIBUTE, ST_ASM, ST_BRACKET, ST_BRACE,
+    ST_EXPRESSION, ST_TABLE_1, ST_TABLE_2, ST_TABLE_3, ST_TABLE_4,
+    ST_TABLE_5, ST_TABLE_6
+  } lexstate = ST_NOTSTARTED;
+
+  static int suppress_type_lookup, dont_want_brace_phrase;
+  static struct string_list *next_node;
+
+  int token, count = 0;
+  struct string_list *cur_node;
+
+  if (lexstate == ST_NOTSTARTED)
+    {
+      next_node = xmalloc(sizeof(*next_node));
+      next_node->next = NULL;
+      lexstate = ST_NORMAL;
+    }
+
+repeat:
+  token = yylex1();
+
+  if (token == 0)
+    return 0;
+  else if (token == FILENAME)
+    {
+      char *file, *e;
+
+      /* Save the filename and line number for later error messages.  */
+
+      if (cur_filename)
+	free(cur_filename);
+
+      file = strchr(yytext, '\"')+1;
+      e = strchr(file, '\"');
+      *e = '\0';
+      cur_filename = memcpy(xmalloc(e-file+1), file, e-file+1);
+      cur_line = atoi(yytext+2);
+
+      if (!source_file) {
+        source_file = xstrdup(cur_filename);
+        in_source_file = 1;
+      } else {
+        in_source_file = (strcmp(cur_filename, source_file) == 0);
+      }
+
+      goto repeat;
+    }
+
+  switch (lexstate)
+    {
+    case ST_NORMAL:
+      switch (token)
+	{
+	case IDENT:
+	  APP;
+	  {
+	    const struct resword *r = is_reserved_word(yytext, yyleng);
+	    if (r)
+	      {
+		switch (token = r->token)
+		  {
+		  case ATTRIBUTE_KEYW:
+		    lexstate = ST_ATTRIBUTE;
+		    count = 0;
+		    goto repeat;
+		  case ASM_KEYW:
+		    lexstate = ST_ASM;
+		    count = 0;
+		    goto repeat;
+
+		  case STRUCT_KEYW:
+		  case UNION_KEYW:
+		  case ENUM_KEYW:
+		    dont_want_brace_phrase = 3;
+		    suppress_type_lookup = 2;
+		    goto fini;
+
+		  case EXPORT_SYMBOL_KEYW:
+		      goto fini;
+		  }
+	      }
+	    if (!suppress_type_lookup)
+	      {
+		if (find_symbol(yytext, SYM_TYPEDEF, 1))
+		  token = TYPE;
+	      }
+	  }
+	  break;
+
+	case '[':
+	  APP;
+	  lexstate = ST_BRACKET;
+	  count = 1;
+	  goto repeat;
+
+	case '{':
+	  APP;
+	  if (dont_want_brace_phrase)
+	    break;
+	  lexstate = ST_BRACE;
+	  count = 1;
+	  goto repeat;
+
+	case '=': case ':':
+	  APP;
+	  lexstate = ST_EXPRESSION;
+	  break;
+
+	case DOTS:
+	default:
+	  APP;
+	  break;
+	}
+      break;
+
+    case ST_ATTRIBUTE:
+      APP;
+      switch (token)
+	{
+	case '(':
+	  ++count;
+	  goto repeat;
+	case ')':
+	  if (--count == 0)
+	    {
+	      lexstate = ST_NORMAL;
+	      token = ATTRIBUTE_PHRASE;
+	      break;
+	    }
+	  goto repeat;
+	default:
+	  goto repeat;
+	}
+      break;
+
+    case ST_ASM:
+      APP;
+      switch (token)
+	{
+	case '(':
+	  ++count;
+	  goto repeat;
+	case ')':
+	  if (--count == 0)
+	    {
+	      lexstate = ST_NORMAL;
+	      token = ASM_PHRASE;
+	      break;
+	    }
+	  goto repeat;
+	default:
+	  goto repeat;
+	}
+      break;
+
+    case ST_BRACKET:
+      APP;
+      switch (token)
+	{
+	case '[':
+	  ++count;
+	  goto repeat;
+	case ']':
+	  if (--count == 0)
+	    {
+	      lexstate = ST_NORMAL;
+	      token = BRACKET_PHRASE;
+	      break;
+	    }
+	  goto repeat;
+	default:
+	  goto repeat;
+	}
+      break;
+
+    case ST_BRACE:
+      APP;
+      switch (token)
+	{
+	case '{':
+	  ++count;
+	  goto repeat;
+	case '}':
+	  if (--count == 0)
+	    {
+	      lexstate = ST_NORMAL;
+	      token = BRACE_PHRASE;
+	      break;
+	    }
+	  goto repeat;
+	default:
+	  goto repeat;
+	}
+      break;
+
+    case ST_EXPRESSION:
+      switch (token)
+	{
+	case '(': case '[': case '{':
+	  ++count;
+	  APP;
+	  goto repeat;
+	case '}':
+	  /* is this the last line of an enum declaration? */
+	  if (count == 0)
+	    {
+	      /* Put back the token we just read so's we can find it again
+		 after registering the expression.  */
+	      unput(token);
+
+	      lexstate = ST_NORMAL;
+	      token = EXPRESSION_PHRASE;
+	      break;
+	    }
+	  /* FALLTHRU */
+	case ')': case ']':
+	  --count;
+	  APP;
+	  goto repeat;
+	case ',': case ';':
+	  if (count == 0)
+	    {
+	      /* Put back the token we just read so's we can find it again
+		 after registering the expression.  */
+	      unput(token);
+
+	      lexstate = ST_NORMAL;
+	      token = EXPRESSION_PHRASE;
+	      break;
+	    }
+	  APP;
+	  goto repeat;
+	default:
+	  APP;
+	  goto repeat;
+	}
+      break;
+
+    case ST_TABLE_1:
+      goto repeat;
+
+    case ST_TABLE_2:
+      if (token == IDENT && yyleng == 1 && yytext[0] == 'X')
+	{
+	  token = EXPORT_SYMBOL_KEYW;
+	  lexstate = ST_TABLE_5;
+	  APP;
+	  break;
+	}
+      lexstate = ST_TABLE_6;
+      /* FALLTHRU */
+
+    case ST_TABLE_6:
+      switch (token)
+	{
+	case '{': case '[': case '(':
+	  ++count;
+	  break;
+	case '}': case ']': case ')':
+	  --count;
+	  break;
+	case ',':
+	  if (count == 0)
+	    lexstate = ST_TABLE_2;
+	  break;
+	};
+      goto repeat;
+
+    case ST_TABLE_3:
+      goto repeat;
+
+    case ST_TABLE_4:
+      if (token == ';')
+	lexstate = ST_NORMAL;
+      goto repeat;
+
+    case ST_TABLE_5:
+      switch (token)
+	{
+	case ',':
+	  token = ';';
+	  lexstate = ST_TABLE_2;
+	  APP;
+	  break;
+	default:
+	  APP;
+	  break;
+	}
+      break;
+
+    default:
+      exit(1);
+    }
+fini:
+
+  if (suppress_type_lookup > 0)
+    --suppress_type_lookup;
+  if (dont_want_brace_phrase > 0)
+    --dont_want_brace_phrase;
+
+  yylval = &next_node->next;
+
+  return token;
+}
+
diff -urN linux-3.2.4/scripts/genksyms/parse.tab.c linux/scripts/genksyms/parse.tab.c
--- linux-3.2.4/scripts/genksyms/parse.tab.c	1970-01-01 07:00:00.000000000 +0700
+++ linux/scripts/genksyms/parse.tab.c	2013-04-11 13:58:34.496624761 +0800
@@ -0,0 +1,2399 @@
+/* A Bison parser, made by GNU Bison 2.5.  */
+
+/* Bison implementation for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "2.5"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+/* Using locations.  */
+#define YYLSP_NEEDED 0
+
+
+
+/* Copy the first part of user declarations.  */
+
+
+
+#include <assert.h>
+#include <stdlib.h>
+#include <string.h>
+#include "genksyms.h"
+
+static int is_typedef;
+static int is_extern;
+static char *current_name;
+static struct string_list *decl_spec;
+
+static void yyerror(const char *);
+
+static inline void
+remove_node(struct string_list **p)
+{
+  struct string_list *node = *p;
+  *p = node->next;
+  free_node(node);
+}
+
+static inline void
+remove_list(struct string_list **pb, struct string_list **pe)
+{
+  struct string_list *b = *pb, *e = *pe;
+  *pb = e;
+  free_list(b, e);
+}
+
+/* Record definition of a struct/union/enum */
+static void record_compound(struct string_list **keyw,
+		       struct string_list **ident,
+		       struct string_list **body,
+		       enum symbol_type type)
+{
+	struct string_list *b = *body, *i = *ident, *r;
+
+	if (i->in_source_file) {
+		remove_node(keyw);
+		(*ident)->tag = type;
+		remove_list(body, ident);
+		return;
+	}
+	r = copy_node(i); r->tag = type;
+	r->next = (*keyw)->next; *body = r; (*keyw)->next = NULL;
+	add_symbol(i->string, type, b, is_extern);
+}
+
+
+
+
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 1
+#endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* Enabling the token table.  */
+#ifndef YYTOKEN_TABLE
+# define YYTOKEN_TABLE 0
+#endif
+
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     ASM_KEYW = 258,
+     ATTRIBUTE_KEYW = 259,
+     AUTO_KEYW = 260,
+     BOOL_KEYW = 261,
+     CHAR_KEYW = 262,
+     CONST_KEYW = 263,
+     DOUBLE_KEYW = 264,
+     ENUM_KEYW = 265,
+     EXTERN_KEYW = 266,
+     EXTENSION_KEYW = 267,
+     FLOAT_KEYW = 268,
+     INLINE_KEYW = 269,
+     INT_KEYW = 270,
+     LONG_KEYW = 271,
+     REGISTER_KEYW = 272,
+     RESTRICT_KEYW = 273,
+     SHORT_KEYW = 274,
+     SIGNED_KEYW = 275,
+     STATIC_KEYW = 276,
+     STRUCT_KEYW = 277,
+     TYPEDEF_KEYW = 278,
+     UNION_KEYW = 279,
+     UNSIGNED_KEYW = 280,
+     VOID_KEYW = 281,
+     VOLATILE_KEYW = 282,
+     TYPEOF_KEYW = 283,
+     EXPORT_SYMBOL_KEYW = 284,
+     ASM_PHRASE = 285,
+     ATTRIBUTE_PHRASE = 286,
+     BRACE_PHRASE = 287,
+     BRACKET_PHRASE = 288,
+     EXPRESSION_PHRASE = 289,
+     CHAR = 290,
+     DOTS = 291,
+     IDENT = 292,
+     INT = 293,
+     REAL = 294,
+     STRING = 295,
+     TYPE = 296,
+     OTHER = 297,
+     FILENAME = 298
+   };
+#endif
+
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef int YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+
+/* Copy the second part of user declarations.  */
+
+
+
+#ifdef short
+# undef short
+#endif
+
+#ifdef YYTYPE_UINT8
+typedef YYTYPE_UINT8 yytype_uint8;
+#else
+typedef unsigned char yytype_uint8;
+#endif
+
+#ifdef YYTYPE_INT8
+typedef YYTYPE_INT8 yytype_int8;
+#elif (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+typedef signed char yytype_int8;
+#else
+typedef short int yytype_int8;
+#endif
+
+#ifdef YYTYPE_UINT16
+typedef YYTYPE_UINT16 yytype_uint16;
+#else
+typedef unsigned short int yytype_uint16;
+#endif
+
+#ifdef YYTYPE_INT16
+typedef YYTYPE_INT16 yytype_int16;
+#else
+typedef short int yytype_int16;
+#endif
+
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned int
+# endif
+#endif
+
+#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(msgid) dgettext ("bison-runtime", msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(msgid) msgid
+# endif
+#endif
+
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(e) ((void) (e))
+#else
+# define YYUSE(e) /* empty */
+#endif
+
+/* Identity function, used to suppress warnings about constant conditions.  */
+#ifndef lint
+# define YYID(n) (n)
+#else
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static int
+YYID (int yyi)
+#else
+static int
+YYID (yyi)
+    int yyi;
+#endif
+{
+  return yyi;
+}
+#endif
+
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+	     && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (YYID (0))
+
+#endif
+
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from FROM to TO.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(To, From, Count) \
+      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
+#  else
+#   define YYCOPY(To, From, Count)		\
+      do					\
+	{					\
+	  YYSIZE_T yyi;				\
+	  for (yyi = 0; yyi < (Count); yyi++)	\
+	    (To)[yyi] = (From)[yyi];		\
+	}					\
+      while (YYID (0))
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  4
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   532
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  53
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  49
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  132
+/* YYNRULES -- Number of states.  */
+#define YYNSTATES  188
+
+/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   298
+
+#define YYTRANSLATE(YYX)						\
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+      47,    49,    48,     2,    46,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    52,    44,
+       2,    50,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    51,     2,    45,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43
+};
+
+#if YYDEBUG
+/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
+   YYRHS.  */
+static const yytype_uint16 yyprhs[] =
+{
+       0,     0,     3,     5,     8,     9,    12,    13,    18,    19,
+      23,    25,    27,    29,    31,    34,    37,    41,    42,    44,
+      46,    50,    55,    56,    58,    60,    63,    65,    67,    69,
+      71,    73,    75,    77,    79,    81,    87,    92,    95,    98,
+     101,   105,   109,   113,   116,   119,   122,   124,   126,   128,
+     130,   132,   134,   136,   138,   140,   142,   144,   147,   148,
+     150,   152,   155,   157,   159,   161,   163,   166,   168,   170,
+     175,   180,   183,   187,   191,   194,   196,   198,   200,   205,
+     210,   213,   217,   221,   224,   226,   230,   231,   233,   235,
+     239,   242,   245,   247,   248,   250,   252,   257,   262,   265,
+     269,   273,   277,   278,   280,   283,   287,   291,   292,   294,
+     296,   299,   303,   306,   307,   309,   311,   315,   318,   321,
+     323,   326,   327,   330,   334,   339,   341,   345,   347,   351,
+     354,   355,   357
+};
+
+/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
+static const yytype_int8 yyrhs[] =
+{
+      54,     0,    -1,    55,    -1,    54,    55,    -1,    -1,    56,
+      57,    -1,    -1,    12,    23,    58,    60,    -1,    -1,    23,
+      59,    60,    -1,    60,    -1,    84,    -1,    99,    -1,   101,
+      -1,     1,    44,    -1,     1,    45,    -1,    64,    61,    44,
+      -1,    -1,    62,    -1,    63,    -1,    62,    46,    63,    -1,
+      74,   100,    95,    85,    -1,    -1,    65,    -1,    66,    -1,
+      65,    66,    -1,    67,    -1,    68,    -1,     5,    -1,    17,
+      -1,    21,    -1,    11,    -1,    14,    -1,    69,    -1,    73,
+      -1,    28,    47,    65,    48,    49,    -1,    28,    47,    65,
+      49,    -1,    22,    37,    -1,    24,    37,    -1,    10,    37,
+      -1,    22,    37,    87,    -1,    24,    37,    87,    -1,    10,
+      37,    96,    -1,    10,    96,    -1,    22,    87,    -1,    24,
+      87,    -1,     7,    -1,    19,    -1,    15,    -1,    16,    -1,
+      20,    -1,    25,    -1,    13,    -1,     9,    -1,    26,    -1,
+       6,    -1,    41,    -1,    48,    71,    -1,    -1,    72,    -1,
+      73,    -1,    72,    73,    -1,     8,    -1,    27,    -1,    31,
+      -1,    18,    -1,    70,    74,    -1,    75,    -1,    37,    -1,
+      75,    47,    78,    49,    -1,    75,    47,     1,    49,    -1,
+      75,    33,    -1,    47,    74,    49,    -1,    47,     1,    49,
+      -1,    70,    76,    -1,    77,    -1,    37,    -1,    41,    -1,
+      77,    47,    78,    49,    -1,    77,    47,     1,    49,    -1,
+      77,    33,    -1,    47,    76,    49,    -1,    47,     1,    49,
+      -1,    79,    36,    -1,    79,    -1,    80,    46,    36,    -1,
+      -1,    80,    -1,    81,    -1,    80,    46,    81,    -1,    65,
+      82,    -1,    70,    82,    -1,    83,    -1,    -1,    37,    -1,
+      41,    -1,    83,    47,    78,    49,    -1,    83,    47,     1,
+      49,    -1,    83,    33,    -1,    47,    82,    49,    -1,    47,
+       1,    49,    -1,    64,    74,    32,    -1,    -1,    86,    -1,
+      50,    34,    -1,    51,    88,    45,    -1,    51,     1,    45,
+      -1,    -1,    89,    -1,    90,    -1,    89,    90,    -1,    64,
+      91,    44,    -1,     1,    44,    -1,    -1,    92,    -1,    93,
+      -1,    92,    46,    93,    -1,    76,    95,    -1,    37,    94,
+      -1,    94,    -1,    52,    34,    -1,    -1,    95,    31,    -1,
+      51,    97,    45,    -1,    51,    97,    46,    45,    -1,    98,
+      -1,    97,    46,    98,    -1,    37,    -1,    37,    50,    34,
+      -1,    30,    44,    -1,    -1,    30,    -1,    29,    47,    37,
+      49,    44,    -1
+};
+
+/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
+static const yytype_uint16 yyrline[] =
+{
+       0,   123,   123,   124,   128,   128,   134,   134,   136,   136,
+     138,   139,   140,   141,   142,   143,   147,   161,   162,   166,
+     174,   187,   193,   194,   198,   199,   203,   209,   213,   214,
+     215,   216,   217,   221,   222,   223,   224,   228,   230,   232,
+     236,   238,   240,   245,   248,   249,   253,   254,   255,   256,
+     257,   258,   259,   260,   261,   262,   263,   267,   272,   273,
+     277,   278,   282,   282,   282,   283,   291,   292,   296,   305,
+     307,   309,   311,   313,   320,   321,   325,   326,   327,   329,
+     331,   333,   335,   340,   341,   342,   346,   347,   351,   352,
+     357,   362,   364,   368,   369,   377,   381,   383,   385,   387,
+     389,   394,   403,   404,   409,   414,   415,   419,   420,   424,
+     425,   429,   431,   436,   437,   441,   442,   446,   447,   448,
+     452,   456,   457,   461,   462,   466,   467,   470,   475,   483,
+     487,   488,   492
+};
+#endif
+
+#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "ASM_KEYW", "ATTRIBUTE_KEYW",
+  "AUTO_KEYW", "BOOL_KEYW", "CHAR_KEYW", "CONST_KEYW", "DOUBLE_KEYW",
+  "ENUM_KEYW", "EXTERN_KEYW", "EXTENSION_KEYW", "FLOAT_KEYW",
+  "INLINE_KEYW", "INT_KEYW", "LONG_KEYW", "REGISTER_KEYW", "RESTRICT_KEYW",
+  "SHORT_KEYW", "SIGNED_KEYW", "STATIC_KEYW", "STRUCT_KEYW",
+  "TYPEDEF_KEYW", "UNION_KEYW", "UNSIGNED_KEYW", "VOID_KEYW",
+  "VOLATILE_KEYW", "TYPEOF_KEYW", "EXPORT_SYMBOL_KEYW", "ASM_PHRASE",
+  "ATTRIBUTE_PHRASE", "BRACE_PHRASE", "BRACKET_PHRASE",
+  "EXPRESSION_PHRASE", "CHAR", "DOTS", "IDENT", "INT", "REAL", "STRING",
+  "TYPE", "OTHER", "FILENAME", "';'", "'}'", "','", "'('", "'*'", "')'",
+  "'='", "'{'", "':'", "$accept", "declaration_seq", "declaration", "$@1",
+  "declaration1", "$@2", "$@3", "simple_declaration",
+  "init_declarator_list_opt", "init_declarator_list", "init_declarator",
+  "decl_specifier_seq_opt", "decl_specifier_seq", "decl_specifier",
+  "storage_class_specifier", "type_specifier", "simple_type_specifier",
+  "ptr_operator", "cvar_qualifier_seq_opt", "cvar_qualifier_seq",
+  "cvar_qualifier", "declarator", "direct_declarator", "nested_declarator",
+  "direct_nested_declarator", "parameter_declaration_clause",
+  "parameter_declaration_list_opt", "parameter_declaration_list",
+  "parameter_declaration", "m_abstract_declarator",
+  "direct_m_abstract_declarator", "function_definition", "initializer_opt",
+  "initializer", "class_body", "member_specification_opt",
+  "member_specification", "member_declaration",
+  "member_declarator_list_opt", "member_declarator_list",
+  "member_declarator", "member_bitfield_declarator", "attribute_opt",
+  "enum_body", "enumerator_list", "enumerator", "asm_definition",
+  "asm_phrase_opt", "export_definition", 0
+};
+#endif
+
+# ifdef YYPRINT
+/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
+   token YYLEX-NUM.  */
+static const yytype_uint16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
+     295,   296,   297,   298,    59,   125,    44,    40,    42,    41,
+      61,   123,    58
+};
+# endif
+
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_uint8 yyr1[] =
+{
+       0,    53,    54,    54,    56,    55,    58,    57,    59,    57,
+      57,    57,    57,    57,    57,    57,    60,    61,    61,    62,
+      62,    63,    64,    64,    65,    65,    66,    66,    67,    67,
+      67,    67,    67,    68,    68,    68,    68,    68,    68,    68,
+      68,    68,    68,    68,    68,    68,    69,    69,    69,    69,
+      69,    69,    69,    69,    69,    69,    69,    70,    71,    71,
+      72,    72,    73,    73,    73,    73,    74,    74,    75,    75,
+      75,    75,    75,    75,    76,    76,    77,    77,    77,    77,
+      77,    77,    77,    78,    78,    78,    79,    79,    80,    80,
+      81,    82,    82,    83,    83,    83,    83,    83,    83,    83,
+      83,    84,    85,    85,    86,    87,    87,    88,    88,    89,
+      89,    90,    90,    91,    91,    92,    92,    93,    93,    93,
+      94,    95,    95,    96,    96,    97,    97,    98,    98,    99,
+     100,   100,   101
+};
+
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
+static const yytype_uint8 yyr2[] =
+{
+       0,     2,     1,     2,     0,     2,     0,     4,     0,     3,
+       1,     1,     1,     1,     2,     2,     3,     0,     1,     1,
+       3,     4,     0,     1,     1,     2,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     5,     4,     2,     2,     2,
+       3,     3,     3,     2,     2,     2,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     2,     0,     1,
+       1,     2,     1,     1,     1,     1,     2,     1,     1,     4,
+       4,     2,     3,     3,     2,     1,     1,     1,     4,     4,
+       2,     3,     3,     2,     1,     3,     0,     1,     1,     3,
+       2,     2,     1,     0,     1,     1,     4,     4,     2,     3,
+       3,     3,     0,     1,     2,     3,     3,     0,     1,     1,
+       2,     3,     2,     0,     1,     1,     3,     2,     2,     1,
+       2,     0,     2,     3,     4,     1,     3,     1,     3,     2,
+       0,     1,     5
+};
+
+/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE doesn't specify something else to do.  Zero
+   means the default is an error.  */
+static const yytype_uint8 yydefact[] =
+{
+       4,     4,     2,     0,     1,     3,     0,    28,    55,    46,
+      62,    53,     0,    31,     0,    52,    32,    48,    49,    29,
+      65,    47,    50,    30,     0,     8,     0,    51,    54,    63,
+       0,     0,     0,    64,    56,     5,    10,    17,    23,    24,
+      26,    27,    33,    34,    11,    12,    13,    14,    15,    39,
+       0,    43,     6,    37,     0,    44,    22,    38,    45,     0,
+       0,   129,    68,     0,    58,     0,    18,    19,     0,   130,
+      67,    25,    42,   127,     0,   125,    22,    40,     0,   113,
+       0,     0,   109,     9,    17,    41,     0,     0,     0,     0,
+      57,    59,    60,    16,     0,    66,   131,   101,   121,    71,
+       0,     0,   123,     0,     7,   112,   106,    76,    77,     0,
+       0,     0,   121,    75,     0,   114,   115,   119,   105,     0,
+     110,   130,     0,    36,     0,    73,    72,    61,    20,   102,
+       0,    93,     0,    84,    87,    88,   128,   124,   126,   118,
+       0,    76,     0,   120,    74,   117,    80,     0,   111,     0,
+      35,   132,   122,     0,    21,   103,    70,    94,    56,     0,
+      93,    90,    92,    69,    83,     0,    82,    81,     0,     0,
+     116,   104,     0,    95,     0,    91,    98,     0,    85,    89,
+      79,    78,   100,    99,     0,     0,    97,    96
+};
+
+/* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,     1,     2,     3,    35,    76,    56,    36,    65,    66,
+      67,    79,    38,    39,    40,    41,    42,    68,    90,    91,
+      43,   121,    70,   112,   113,   132,   133,   134,   135,   161,
+     162,    44,   154,   155,    55,    80,    81,    82,   114,   115,
+     116,   117,   129,    51,    74,    75,    45,    98,    46
+};
+
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
+#define YYPACT_NINF -135
+static const yytype_int16 yypact[] =
+{
+    -135,    20,  -135,   321,  -135,  -135,    30,  -135,  -135,  -135,
+    -135,  -135,   -28,  -135,     2,  -135,  -135,  -135,  -135,  -135,
+    -135,  -135,  -135,  -135,    -6,  -135,     9,  -135,  -135,  -135,
+      -5,    15,   -17,  -135,  -135,  -135,  -135,    18,   491,  -135,
+    -135,  -135,  -135,  -135,  -135,  -135,  -135,  -135,  -135,   -22,
+      31,  -135,  -135,    19,   106,  -135,   491,    19,  -135,   491,
+      50,  -135,  -135,    11,    -3,    51,    57,  -135,    18,   -14,
+      14,  -135,  -135,    48,    46,  -135,   491,  -135,    33,    32,
+      59,   154,  -135,  -135,    18,  -135,   365,    56,    60,    61,
+    -135,    -3,  -135,  -135,    18,  -135,  -135,  -135,  -135,  -135,
+     202,    74,  -135,   -23,  -135,  -135,  -135,    77,  -135,    16,
+     101,    49,  -135,    34,    92,    93,  -135,  -135,  -135,    94,
+    -135,   110,    95,  -135,    97,  -135,  -135,  -135,  -135,   -20,
+      96,   410,    99,   113,   100,  -135,  -135,  -135,  -135,  -135,
+     103,  -135,   107,  -135,  -135,   111,  -135,   239,  -135,    32,
+    -135,  -135,  -135,   123,  -135,  -135,  -135,  -135,  -135,     3,
+      52,  -135,    38,  -135,  -135,   454,  -135,  -135,   117,   128,
+    -135,  -135,   134,  -135,   135,  -135,  -135,   276,  -135,  -135,
+    -135,  -135,  -135,  -135,   137,   138,  -135,  -135
+};
+
+/* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
+{
+    -135,  -135,   187,  -135,  -135,  -135,  -135,   -50,  -135,  -135,
+      98,     0,   -59,   -37,  -135,  -135,  -135,   -77,  -135,  -135,
+     -54,   -30,  -135,   -90,  -135,  -134,  -135,  -135,    24,   -58,
+    -135,  -135,  -135,  -135,   -18,  -135,  -135,   109,  -135,  -135,
+      44,    87,    84,   148,  -135,   102,  -135,  -135,  -135
+};
+
+/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule which
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -109
+static const yytype_int16 yytable[] =
+{
+      86,    71,   111,    37,   172,    10,    83,    69,    58,    49,
+      92,   152,    88,   169,    73,    20,    96,   140,    97,   142,
+       4,   144,   137,    50,    29,    52,   104,    61,    33,    50,
+     153,    53,   111,    89,   111,    77,   -93,   127,    95,    85,
+     157,   131,    59,   185,   173,    54,    57,    99,    62,    71,
+     159,    64,   -93,   141,   160,    62,    84,   108,    63,    64,
+      54,   100,    60,   109,    64,    63,    64,   146,    73,   107,
+      54,   176,   111,   108,    47,    48,    84,   105,   106,   109,
+      64,   147,   160,   160,   110,   177,   141,    87,   131,   157,
+     108,   102,   103,   173,    71,    93,   109,    64,   101,   159,
+      64,   174,   175,    94,   118,   124,   131,    78,   136,   125,
+     126,     7,     8,     9,    10,    11,    12,    13,   131,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,   110,
+      26,    27,    28,    29,    30,   143,   148,    33,   105,   149,
+      96,   151,   152,   -22,   150,   156,   165,    34,   163,   164,
+     -22,  -107,   166,   -22,   -22,   119,   167,   171,   -22,     7,
+       8,     9,    10,    11,    12,    13,   180,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,   181,    26,    27,
+      28,    29,    30,   182,   183,    33,   186,   187,     5,   179,
+     120,   -22,   128,   170,   139,    34,   145,    72,   -22,  -108,
+       0,   -22,   -22,   130,     0,   138,   -22,     7,     8,     9,
+      10,    11,    12,    13,     0,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,     0,    26,    27,    28,    29,
+      30,     0,     0,    33,     0,     0,     0,     0,   -86,     0,
+     168,     0,     0,    34,     7,     8,     9,    10,    11,    12,
+      13,   -86,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,     0,    26,    27,    28,    29,    30,     0,     0,
+      33,     0,     0,     0,     0,   -86,     0,   184,     0,     0,
+      34,     7,     8,     9,    10,    11,    12,    13,   -86,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
+      26,    27,    28,    29,    30,     0,     0,    33,     0,     0,
+       0,     0,   -86,     0,     0,     0,     0,    34,     0,     0,
+       0,     0,     6,     0,     0,   -86,     7,     8,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,     0,     0,     0,     0,     0,   -22,     0,
+       0,     0,    34,     0,     0,   -22,     0,     0,   -22,   -22,
+       7,     8,     9,    10,    11,    12,    13,     0,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,     0,    26,
+      27,    28,    29,    30,     0,     0,    33,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
+       0,     0,     0,   122,   123,     7,     8,     9,    10,    11,
+      12,    13,     0,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,     0,    26,    27,    28,    29,    30,     0,
+       0,    33,     0,     0,     0,     0,     0,   157,     0,     0,
+       0,   158,     0,     0,     0,     0,     0,   159,    64,     7,
+       8,     9,    10,    11,    12,    13,     0,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,     0,    26,    27,
+      28,    29,    30,     0,     0,    33,     0,     0,     0,     0,
+     178,     0,     0,     0,     0,    34,     7,     8,     9,    10,
+      11,    12,    13,     0,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,     0,    26,    27,    28,    29,    30,
+       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    34
+};
+
+#define yypact_value_is_default(yystate) \
+  ((yystate) == (-135))
+
+#define yytable_value_is_error(yytable_value) \
+  YYID (0)
+
+static const yytype_int16 yycheck[] =
+{
+      59,    38,    79,     3,     1,     8,    56,    37,    26,    37,
+      64,    31,     1,   147,    37,    18,    30,     1,    32,   109,
+       0,   111,    45,    51,    27,    23,    76,    44,    31,    51,
+      50,    37,   109,    63,   111,    53,    33,    91,    68,    57,
+      37,   100,    47,   177,    41,    51,    37,    33,    37,    86,
+      47,    48,    49,    37,   131,    37,    56,    41,    47,    48,
+      51,    47,    47,    47,    48,    47,    48,    33,    37,    37,
+      51,    33,   149,    41,    44,    45,    76,    44,    45,    47,
+      48,    47,   159,   160,    52,    47,    37,    37,   147,    37,
+      41,    45,    46,    41,   131,    44,    47,    48,    50,    47,
+      48,   159,   160,    46,    45,    49,   165,     1,    34,    49,
+      49,     5,     6,     7,     8,     9,    10,    11,   177,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    52,
+      24,    25,    26,    27,    28,    34,    44,    31,    44,    46,
+      30,    44,    31,    37,    49,    49,    46,    41,    49,    36,
+      44,    45,    49,    47,    48,     1,    49,    34,    52,     5,
+       6,     7,     8,     9,    10,    11,    49,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    49,    24,    25,
+      26,    27,    28,    49,    49,    31,    49,    49,     1,   165,
+      81,    37,    94,   149,   107,    41,   112,    49,    44,    45,
+      -1,    47,    48,     1,    -1,   103,    52,     5,     6,     7,
+       8,     9,    10,    11,    -1,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    -1,    24,    25,    26,    27,
+      28,    -1,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,
+       1,    -1,    -1,    41,     5,     6,     7,     8,     9,    10,
+      11,    49,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    -1,    24,    25,    26,    27,    28,    -1,    -1,
+      31,    -1,    -1,    -1,    -1,    36,    -1,     1,    -1,    -1,
+      41,     5,     6,     7,     8,     9,    10,    11,    49,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
+      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
+      -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
+      -1,    -1,     1,    -1,    -1,    49,     5,     6,     7,     8,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    37,    -1,
+      -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    47,    48,
+       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    -1,    24,
+      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
+      -1,    -1,    -1,    48,    49,     5,     6,     7,     8,     9,
+      10,    11,    -1,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    -1,    24,    25,    26,    27,    28,    -1,
+      -1,    31,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
+      -1,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,     5,
+       6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    -1,    24,    25,
+      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    -1,
+      36,    -1,    -1,    -1,    -1,    41,     5,     6,     7,     8,
+       9,    10,    11,    -1,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    -1,    24,    25,    26,    27,    28,
+      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    41
+};
+
+/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+   symbol of state STATE-NUM.  */
+static const yytype_uint8 yystos[] =
+{
+       0,    54,    55,    56,     0,    55,     1,     5,     6,     7,
+       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    30,    31,    41,    57,    60,    64,    65,    66,
+      67,    68,    69,    73,    84,    99,   101,    44,    45,    37,
+      51,    96,    23,    37,    51,    87,    59,    37,    87,    47,
+      47,    44,    37,    47,    48,    61,    62,    63,    70,    74,
+      75,    66,    96,    37,    97,    98,    58,    87,     1,    64,
+      88,    89,    90,    60,    64,    87,    65,    37,     1,    74,
+      71,    72,    73,    44,    46,    74,    30,    32,   100,    33,
+      47,    50,    45,    46,    60,    44,    45,    37,    41,    47,
+      52,    70,    76,    77,    91,    92,    93,    94,    45,     1,
+      90,    74,    48,    49,    49,    49,    49,    73,    63,    95,
+       1,    65,    78,    79,    80,    81,    34,    45,    98,    94,
+       1,    37,    76,    34,    76,    95,    33,    47,    44,    46,
+      49,    44,    31,    50,    85,    86,    49,    37,    41,    47,
+      70,    82,    83,    49,    36,    46,    49,    49,     1,    78,
+      93,    34,     1,    41,    82,    82,    33,    47,    36,    81,
+      49,    49,    49,    49,     1,    78,    49,    49
+};
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		(-2)
+#define YYEOF		0
+
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT		goto yyabortlab
+#define YYERROR		goto yyerrorlab
+
+
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
+
+#define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
+
+#define YYRECOVERING()  (!!yyerrstatus)
+
+#define YYBACKUP(Token, Value)					\
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      YYPOPSTACK (1);						\
+      goto yybackup;						\
+    }								\
+  else								\
+    {								\
+      yyerror (YY_("syntax error: cannot back up")); \
+      YYERROR;							\
+    }								\
+while (YYID (0))
+
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+
+/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
+   If N is 0, then set CURRENT to the empty location which ends
+   the previous symbol: RHS[0] (always defined).  */
+
+#define YYRHSLOC(Rhs, K) ((Rhs)[K])
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)				\
+    do									\
+      if (YYID (N))                                                    \
+	{								\
+	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
+	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
+	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
+	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
+	}								\
+      else								\
+	{								\
+	  (Current).first_line   = (Current).last_line   =		\
+	    YYRHSLOC (Rhs, 0).last_line;				\
+	  (Current).first_column = (Current).last_column =		\
+	    YYRHSLOC (Rhs, 0).last_column;				\
+	}								\
+    while (YYID (0))
+#endif
+
+
+/* This macro is provided for backward compatibility. */
+
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+#endif
+
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
+
+#ifdef YYLEX_PARAM
+# define YYLEX yylex (YYLEX_PARAM)
+#else
+# define YYLEX yylex ()
+#endif
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (YYID (0))
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
+do {									  \
+  if (yydebug)								  \
+    {									  \
+      YYFPRINTF (stderr, "%s ", Title);					  \
+      yy_symbol_print (stderr,						  \
+		  Type, Value); \
+      YYFPRINTF (stderr, "\n");						  \
+    }									  \
+} while (YYID (0))
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_value_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# else
+  YYUSE (yyoutput);
+# endif
+  switch (yytype)
+    {
+      default:
+	break;
+    }
+}
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (yytype < YYNTOKENS)
+    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
+  else
+    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
+
+  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
+  YYFPRINTF (yyoutput, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+#else
+static void
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
+#endif
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)				\
+do {								\
+  if (yydebug)							\
+    yy_stack_print ((Bottom), (Top));				\
+} while (YYID (0))
+
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
+#else
+static void
+yy_reduce_print (yyvsp, yyrule)
+    YYSTYPE *yyvsp;
+    int yyrule;
+#endif
+{
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  unsigned long int yylno = yyrline[yyrule];
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+	     yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
+		       &(yyvsp[(yyi + 1) - (yynrhs)])
+		       		       );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)		\
+do {					\
+  if (yydebug)				\
+    yy_reduce_print (yyvsp, Rule); \
+} while (YYID (0))
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
+
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef	YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static YYSIZE_T
+yystrlen (const char *yystr)
+#else
+static YYSIZE_T
+yystrlen (yystr)
+    const char *yystr;
+#endif
+{
+  YYSIZE_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+#else
+static char *
+yystpcpy (yydest, yysrc)
+    char *yydest;
+    const char *yysrc;
+#endif
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYSIZE_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYSIZE_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+	switch (*++yyp)
+	  {
+	  case '\'':
+	  case ',':
+	    goto do_not_strip_quotes;
+
+	  case '\\':
+	    if (*++yyp != '\\')
+	      goto do_not_strip_quotes;
+	    /* Fall through.  */
+	  default:
+	    if (yyres)
+	      yyres[yyn] = *yyp;
+	    yyn++;
+	    break;
+
+	  case '"':
+	    if (yyres)
+	      yyres[yyn] = '\0';
+	    return yyn;
+	  }
+    do_not_strip_quotes: ;
+    }
+
+  if (! yyres)
+    return yystrlen (yystr);
+
+  return yystpcpy (yyres, yystr) - yyres;
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
+{
+  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  YYSIZE_T yysize1;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = 0;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - Assume YYFAIL is not used.  It's too flawed to consider.  See
+       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
+       for details.  YYERROR is fine as it does not invoke this
+       function.
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
+                if (! (yysize <= yysize1
+                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                  return 2;
+                yysize = yysize1;
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  yysize1 = yysize + yystrlen (yyformat);
+  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+    return 2;
+  yysize = yysize1;
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
+
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+#else
+static void
+yydestruct (yymsg, yytype, yyvaluep)
+    const char *yymsg;
+    int yytype;
+    YYSTYPE *yyvaluep;
+#endif
+{
+  YYUSE (yyvaluep);
+
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  switch (yytype)
+    {
+
+      default:
+	break;
+    }
+}
+
+
+/* Prevent warnings from -Wmissing-prototypes.  */
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+
+/* The lookahead symbol.  */
+int yychar;
+
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval;
+
+/* Number of syntax errors so far.  */
+int yynerrs;
+
+
+/*----------.
+| yyparse.  |
+`----------*/
+
+#ifdef YYPARSE_PARAM
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void *YYPARSE_PARAM)
+#else
+int
+yyparse (YYPARSE_PARAM)
+    void *YYPARSE_PARAM;
+#endif
+#else /* ! YYPARSE_PARAM */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void)
+#else
+int
+yyparse ()
+
+#endif
+#endif
+{
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
+
+       Refer to the stacks thru separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yytoken = 0;
+  yyss = yyssa;
+  yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+  yyssp = yyss;
+  yyvsp = yyvs;
+
+  goto yysetstate;
+
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
+
+ yysetstate:
+  *yyssp = yystate;
+
+  if (yyss + yystacksize - 1 <= yyssp)
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYSIZE_T yysize = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      {
+	/* Give user a chance to reallocate the stack.  Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	yytype_int16 *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  This used to be a
+	   conditional around just the two extra args, but that might
+	   be undefined if yyoverflow is a macro.  */
+	yyoverflow (YY_("memory exhausted"),
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
+#else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyexhaustedlab;
+# else
+      /* Extend the stack our own way.  */
+      if (YYMAXDEPTH <= yystacksize)
+	goto yyexhaustedlab;
+      yystacksize *= 2;
+      if (YYMAXDEPTH < yystacksize)
+	yystacksize = YYMAXDEPTH;
+
+      {
+	yytype_int16 *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyexhaustedlab;
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+#  undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
+#endif /* no yyoverflow */
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
+
+      if (yyss + yystacksize - 1 <= yyssp)
+	YYABORT;
+    }
+
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
+  goto yybackup;
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+  yyn = yypact[yystate];
+  if (yypact_value_is_default (yyn))
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = YYLEX;
+    }
+
+  if (yychar <= YYEOF)
+    {
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
+    }
+
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
+    goto yydefault;
+  yyn = yytable[yyn];
+  if (yyn <= 0)
+    {
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
+
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
+
+  yystate = yyn;
+  *++yyvsp = yylval;
+
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 4:
+
+    { is_typedef = 0; is_extern = 0; current_name = NULL; decl_spec = NULL; }
+    break;
+
+  case 5:
+
+    { free_list(*(yyvsp[(2) - (2)]), NULL); *(yyvsp[(2) - (2)]) = NULL; }
+    break;
+
+  case 6:
+
+    { is_typedef = 1; }
+    break;
+
+  case 7:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 8:
+
+    { is_typedef = 1; }
+    break;
+
+  case 9:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 14:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 15:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 16:
+
+    { if (current_name) {
+		    struct string_list *decl = (*(yyvsp[(3) - (3)]))->next;
+		    (*(yyvsp[(3) - (3)]))->next = NULL;
+		    add_symbol(current_name,
+			       is_typedef ? SYM_TYPEDEF : SYM_NORMAL,
+			       decl, is_extern);
+		    current_name = NULL;
+		  }
+		  (yyval) = (yyvsp[(3) - (3)]);
+		}
+    break;
+
+  case 17:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 19:
+
+    { struct string_list *decl = *(yyvsp[(1) - (1)]);
+		  *(yyvsp[(1) - (1)]) = NULL;
+		  add_symbol(current_name,
+			     is_typedef ? SYM_TYPEDEF : SYM_NORMAL, decl, is_extern);
+		  current_name = NULL;
+		  (yyval) = (yyvsp[(1) - (1)]);
+		}
+    break;
+
+  case 20:
+
+    { struct string_list *decl = *(yyvsp[(3) - (3)]);
+		  *(yyvsp[(3) - (3)]) = NULL;
+		  free_list(*(yyvsp[(2) - (3)]), NULL);
+		  *(yyvsp[(2) - (3)]) = decl_spec;
+		  add_symbol(current_name,
+			     is_typedef ? SYM_TYPEDEF : SYM_NORMAL, decl, is_extern);
+		  current_name = NULL;
+		  (yyval) = (yyvsp[(3) - (3)]);
+		}
+    break;
+
+  case 21:
+
+    { (yyval) = (yyvsp[(4) - (4)]) ? (yyvsp[(4) - (4)]) : (yyvsp[(3) - (4)]) ? (yyvsp[(3) - (4)]) : (yyvsp[(2) - (4)]) ? (yyvsp[(2) - (4)]) : (yyvsp[(1) - (4)]); }
+    break;
+
+  case 22:
+
+    { decl_spec = NULL; }
+    break;
+
+  case 24:
+
+    { decl_spec = *(yyvsp[(1) - (1)]); }
+    break;
+
+  case 25:
+
+    { decl_spec = *(yyvsp[(2) - (2)]); }
+    break;
+
+  case 26:
+
+    { /* Version 2 checksumming ignores storage class, as that
+		     is really irrelevant to the linkage.  */
+		  remove_node((yyvsp[(1) - (1)]));
+		  (yyval) = (yyvsp[(1) - (1)]);
+		}
+    break;
+
+  case 31:
+
+    { is_extern = 1; (yyval) = (yyvsp[(1) - (1)]); }
+    break;
+
+  case 32:
+
+    { is_extern = 0; (yyval) = (yyvsp[(1) - (1)]); }
+    break;
+
+  case 37:
+
+    { remove_node((yyvsp[(1) - (2)])); (*(yyvsp[(2) - (2)]))->tag = SYM_STRUCT; (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 38:
+
+    { remove_node((yyvsp[(1) - (2)])); (*(yyvsp[(2) - (2)]))->tag = SYM_UNION; (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 39:
+
+    { remove_node((yyvsp[(1) - (2)])); (*(yyvsp[(2) - (2)]))->tag = SYM_ENUM; (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 40:
+
+    { record_compound((yyvsp[(1) - (3)]), (yyvsp[(2) - (3)]), (yyvsp[(3) - (3)]), SYM_STRUCT); (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 41:
+
+    { record_compound((yyvsp[(1) - (3)]), (yyvsp[(2) - (3)]), (yyvsp[(3) - (3)]), SYM_UNION); (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 42:
+
+    { record_compound((yyvsp[(1) - (3)]), (yyvsp[(2) - (3)]), (yyvsp[(3) - (3)]), SYM_ENUM); (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 43:
+
+    { add_symbol(NULL, SYM_ENUM, NULL, 0); (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 44:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 45:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 56:
+
+    { (*(yyvsp[(1) - (1)]))->tag = SYM_TYPEDEF; (yyval) = (yyvsp[(1) - (1)]); }
+    break;
+
+  case 57:
+
+    { (yyval) = (yyvsp[(2) - (2)]) ? (yyvsp[(2) - (2)]) : (yyvsp[(1) - (2)]); }
+    break;
+
+  case 58:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 61:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 65:
+
+    { /* restrict has no effect in prototypes so ignore it */
+		  remove_node((yyvsp[(1) - (1)]));
+		  (yyval) = (yyvsp[(1) - (1)]);
+		}
+    break;
+
+  case 66:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 68:
+
+    { if (current_name != NULL) {
+		    error_with_pos("unexpected second declaration name");
+		    YYERROR;
+		  } else {
+		    current_name = (*(yyvsp[(1) - (1)]))->string;
+		    (yyval) = (yyvsp[(1) - (1)]);
+		  }
+		}
+    break;
+
+  case 69:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 70:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 71:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 72:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 73:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 74:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 78:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 79:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 80:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 81:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 82:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 83:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 85:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 86:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 89:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 90:
+
+    { (yyval) = (yyvsp[(2) - (2)]) ? (yyvsp[(2) - (2)]) : (yyvsp[(1) - (2)]); }
+    break;
+
+  case 91:
+
+    { (yyval) = (yyvsp[(2) - (2)]) ? (yyvsp[(2) - (2)]) : (yyvsp[(1) - (2)]); }
+    break;
+
+  case 93:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 94:
+
+    { /* For version 2 checksums, we don't want to remember
+		     private parameter names.  */
+		  remove_node((yyvsp[(1) - (1)]));
+		  (yyval) = (yyvsp[(1) - (1)]);
+		}
+    break;
+
+  case 95:
+
+    { remove_node((yyvsp[(1) - (1)]));
+		  (yyval) = (yyvsp[(1) - (1)]);
+		}
+    break;
+
+  case 96:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 97:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 98:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 99:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 100:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 101:
+
+    { struct string_list *decl = *(yyvsp[(2) - (3)]);
+		  *(yyvsp[(2) - (3)]) = NULL;
+		  add_symbol(current_name, SYM_NORMAL, decl, is_extern);
+		  (yyval) = (yyvsp[(3) - (3)]);
+		}
+    break;
+
+  case 102:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 104:
+
+    { remove_list((yyvsp[(2) - (2)]), &(*(yyvsp[(1) - (2)]))->next); (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 105:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 106:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 107:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 110:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 111:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 112:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 113:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 116:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 117:
+
+    { (yyval) = (yyvsp[(2) - (2)]) ? (yyvsp[(2) - (2)]) : (yyvsp[(1) - (2)]); }
+    break;
+
+  case 118:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 120:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 121:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 123:
+
+    { (yyval) = (yyvsp[(3) - (3)]); }
+    break;
+
+  case 124:
+
+    { (yyval) = (yyvsp[(4) - (4)]); }
+    break;
+
+  case 127:
+
+    {
+			const char *name = strdup((*(yyvsp[(1) - (1)]))->string);
+			add_symbol(name, SYM_ENUM_CONST, NULL, 0);
+		}
+    break;
+
+  case 128:
+
+    {
+			const char *name = strdup((*(yyvsp[(1) - (3)]))->string);
+			struct string_list *expr = copy_list_range(*(yyvsp[(3) - (3)]), *(yyvsp[(2) - (3)]));
+			add_symbol(name, SYM_ENUM_CONST, expr, 0);
+		}
+    break;
+
+  case 129:
+
+    { (yyval) = (yyvsp[(2) - (2)]); }
+    break;
+
+  case 130:
+
+    { (yyval) = NULL; }
+    break;
+
+  case 132:
+
+    { export_symbol((*(yyvsp[(3) - (5)]))->string); (yyval) = (yyvsp[(5) - (5)]); }
+    break;
+
+
+
+      default: break;
+    }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
+
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTOKENS];
+
+  goto yynewstate;
+
+
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
+
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      if (yychar <= YYEOF)
+	{
+	  /* Return failure if at end of input.  */
+	  if (yychar == YYEOF)
+	    YYABORT;
+	}
+      else
+	{
+	  yydestruct ("Error: discarding",
+		      yytoken, &yylval);
+	  yychar = YYEMPTY;
+	}
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+  goto yyerrlab1;
+
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+
+  /* Pacify compilers like GCC when the user code never invokes
+     YYERROR and the label yyerrorlab therefore never appears in user
+     code.  */
+  if (/*CONSTCOND*/ 0)
+     goto yyerrorlab;
+
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
+
+  for (;;)
+    {
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+	{
+	  yyn += YYTERROR;
+	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+	    {
+	      yyn = yytable[yyn];
+	      if (0 < yyn)
+		break;
+	    }
+	}
+
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
+	YYABORT;
+
+
+      yydestruct ("Error: popping",
+		  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
+    }
+
+  *++yyvsp = yylval;
+
+
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#if !defined(yyoverflow) || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
+#endif
+
+yyreturn:
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
+    {
+      yydestruct ("Cleanup: popping",
+		  yystos[*yyssp], yyvsp);
+      YYPOPSTACK (1);
+    }
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
+#endif
+  /* Make sure YYID is used.  */
+  return YYID (yyresult);
+}
+
+
+
+
+
+static void
+yyerror(const char *e)
+{
+  error_with_pos("%s", e);
+}
+
diff -urN linux-3.2.4/scripts/genksyms/parse.tab.h linux/scripts/genksyms/parse.tab.h
--- linux-3.2.4/scripts/genksyms/parse.tab.h	1970-01-01 07:00:00.000000000 +0700
+++ linux/scripts/genksyms/parse.tab.h	2013-04-11 13:58:34.469958239 +0800
@@ -0,0 +1,95 @@
+/* A Bison parser, made by GNU Bison 2.5.  */
+
+/* Bison interface for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     ASM_KEYW = 258,
+     ATTRIBUTE_KEYW = 259,
+     AUTO_KEYW = 260,
+     BOOL_KEYW = 261,
+     CHAR_KEYW = 262,
+     CONST_KEYW = 263,
+     DOUBLE_KEYW = 264,
+     ENUM_KEYW = 265,
+     EXTERN_KEYW = 266,
+     EXTENSION_KEYW = 267,
+     FLOAT_KEYW = 268,
+     INLINE_KEYW = 269,
+     INT_KEYW = 270,
+     LONG_KEYW = 271,
+     REGISTER_KEYW = 272,
+     RESTRICT_KEYW = 273,
+     SHORT_KEYW = 274,
+     SIGNED_KEYW = 275,
+     STATIC_KEYW = 276,
+     STRUCT_KEYW = 277,
+     TYPEDEF_KEYW = 278,
+     UNION_KEYW = 279,
+     UNSIGNED_KEYW = 280,
+     VOID_KEYW = 281,
+     VOLATILE_KEYW = 282,
+     TYPEOF_KEYW = 283,
+     EXPORT_SYMBOL_KEYW = 284,
+     ASM_PHRASE = 285,
+     ATTRIBUTE_PHRASE = 286,
+     BRACE_PHRASE = 287,
+     BRACKET_PHRASE = 288,
+     EXPRESSION_PHRASE = 289,
+     CHAR = 290,
+     DOTS = 291,
+     IDENT = 292,
+     INT = 293,
+     REAL = 294,
+     STRING = 295,
+     TYPE = 296,
+     OTHER = 297,
+     FILENAME = 298
+   };
+#endif
+
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef int YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+extern YYSTYPE yylval;
+
+
diff -urN linux-3.2.4/security/tomoyo/builtin-policy.h linux/security/tomoyo/builtin-policy.h
--- linux-3.2.4/security/tomoyo/builtin-policy.h	1970-01-01 07:00:00.000000000 +0700
+++ linux/security/tomoyo/builtin-policy.h	2013-04-11 13:58:28.413324384 +0800
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -urN linux-3.2.4/security/tomoyo/policy/exception_policy.conf linux/security/tomoyo/policy/exception_policy.conf
--- linux-3.2.4/security/tomoyo/policy/exception_policy.conf	1970-01-01 07:00:00.000000000 +0700
+++ linux/security/tomoyo/policy/exception_policy.conf	2013-04-11 13:58:28.376657917 +0800
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
